[{"name":"abstract fun create(depth: Int): String","description":"dev.tesserakt.rdf.n3.serialization.PrettyFormatter.Indent.create","location":"serialization/n3/dev.tesserakt.rdf.n3.serialization/-pretty-formatter/-indent/create.html","searchKeys":["create","abstract fun create(depth: Int): String","dev.tesserakt.rdf.n3.serialization.PrettyFormatter.Indent.create"]},{"name":"constructor(indent: PrettyFormatter.Indent = SimpleIndent(\"    \"), flattenStrategy: PrettyFormatter.FlattenStrategy = LengthBasedFlattening(64))","description":"dev.tesserakt.rdf.n3.serialization.PrettyFormatter.PrettyFormatter","location":"serialization/n3/dev.tesserakt.rdf.n3.serialization/-pretty-formatter/-pretty-formatter.html","searchKeys":["PrettyFormatter","constructor(indent: PrettyFormatter.Indent = SimpleIndent(\"    \"), flattenStrategy: PrettyFormatter.FlattenStrategy = LengthBasedFlattening(64))","dev.tesserakt.rdf.n3.serialization.PrettyFormatter.PrettyFormatter"]},{"name":"constructor(maxLength: Int)","description":"dev.tesserakt.rdf.n3.serialization.PrettyFormatter.LengthBasedFlattening.LengthBasedFlattening","location":"serialization/n3/dev.tesserakt.rdf.n3.serialization/-pretty-formatter/-length-based-flattening/-length-based-flattening.html","searchKeys":["LengthBasedFlattening","constructor(maxLength: Int)","dev.tesserakt.rdf.n3.serialization.PrettyFormatter.LengthBasedFlattening.LengthBasedFlattening"]},{"name":"constructor(pattern: String)","description":"dev.tesserakt.rdf.n3.serialization.PrettyFormatter.SimpleIndent.SimpleIndent","location":"serialization/n3/dev.tesserakt.rdf.n3.serialization/-pretty-formatter/-simple-indent/-simple-indent.html","searchKeys":["SimpleIndent","constructor(pattern: String)","dev.tesserakt.rdf.n3.serialization.PrettyFormatter.SimpleIndent.SimpleIndent"]},{"name":"data class LengthBasedFlattening(maxLength: Int) : PrettyFormatter.FlattenStrategy","description":"dev.tesserakt.rdf.n3.serialization.PrettyFormatter.LengthBasedFlattening","location":"serialization/n3/dev.tesserakt.rdf.n3.serialization/-pretty-formatter/-length-based-flattening/index.html","searchKeys":["LengthBasedFlattening","data class LengthBasedFlattening(maxLength: Int) : PrettyFormatter.FlattenStrategy","dev.tesserakt.rdf.n3.serialization.PrettyFormatter.LengthBasedFlattening"]},{"name":"data class PrettyFormatter(val indent: PrettyFormatter.Indent = SimpleIndent(\"    \"), val flattenStrategy: PrettyFormatter.FlattenStrategy = LengthBasedFlattening(64)) : Formatter","description":"dev.tesserakt.rdf.n3.serialization.PrettyFormatter","location":"serialization/n3/dev.tesserakt.rdf.n3.serialization/-pretty-formatter/index.html","searchKeys":["PrettyFormatter","data class PrettyFormatter(val indent: PrettyFormatter.Indent = SimpleIndent(\"    \"), val flattenStrategy: PrettyFormatter.FlattenStrategy = LengthBasedFlattening(64)) : Formatter","dev.tesserakt.rdf.n3.serialization.PrettyFormatter"]},{"name":"data object NoFlattening : PrettyFormatter.FlattenStrategy","description":"dev.tesserakt.rdf.n3.serialization.PrettyFormatter.NoFlattening","location":"serialization/n3/dev.tesserakt.rdf.n3.serialization/-pretty-formatter/-no-flattening/index.html","searchKeys":["NoFlattening","data object NoFlattening : PrettyFormatter.FlattenStrategy","dev.tesserakt.rdf.n3.serialization.PrettyFormatter.NoFlattening"]},{"name":"data object SimpleFormatter : Formatter","description":"dev.tesserakt.rdf.n3.serialization.SimpleFormatter","location":"serialization/n3/dev.tesserakt.rdf.n3.serialization/-simple-formatter/index.html","searchKeys":["SimpleFormatter","data object SimpleFormatter : Formatter","dev.tesserakt.rdf.n3.serialization.SimpleFormatter"]},{"name":"fun interface Indent","description":"dev.tesserakt.rdf.n3.serialization.PrettyFormatter.Indent","location":"serialization/n3/dev.tesserakt.rdf.n3.serialization/-pretty-formatter/-indent/index.html","searchKeys":["Indent","fun interface Indent","dev.tesserakt.rdf.n3.serialization.PrettyFormatter.Indent"]},{"name":"fun serialize(store: Store, formatter: Formatter = DefaultFormatter): String","description":"dev.tesserakt.rdf.n3.serialization.N3Serializer.serialize","location":"serialization/n3/dev.tesserakt.rdf.n3.serialization/-n3-serializer/serialize.html","searchKeys":["serialize","fun serialize(store: Store, formatter: Formatter = DefaultFormatter): String","dev.tesserakt.rdf.n3.serialization.N3Serializer.serialize"]},{"name":"object N3Serializer","description":"dev.tesserakt.rdf.n3.serialization.N3Serializer","location":"serialization/n3/dev.tesserakt.rdf.n3.serialization/-n3-serializer/index.html","searchKeys":["N3Serializer","object N3Serializer","dev.tesserakt.rdf.n3.serialization.N3Serializer"]},{"name":"open override fun create(depth: Int): String","description":"dev.tesserakt.rdf.n3.serialization.PrettyFormatter.SimpleIndent.create","location":"serialization/n3/dev.tesserakt.rdf.n3.serialization/-pretty-formatter/-simple-indent/create.html","searchKeys":["create","open override fun create(depth: Int): String","dev.tesserakt.rdf.n3.serialization.PrettyFormatter.SimpleIndent.create"]},{"name":"sealed class FlattenStrategy","description":"dev.tesserakt.rdf.n3.serialization.PrettyFormatter.FlattenStrategy","location":"serialization/n3/dev.tesserakt.rdf.n3.serialization/-pretty-formatter/-flatten-strategy/index.html","searchKeys":["FlattenStrategy","sealed class FlattenStrategy","dev.tesserakt.rdf.n3.serialization.PrettyFormatter.FlattenStrategy"]},{"name":"sealed class Formatter","description":"dev.tesserakt.rdf.n3.serialization.Formatter","location":"serialization/n3/dev.tesserakt.rdf.n3.serialization/-formatter/index.html","searchKeys":["Formatter","sealed class Formatter","dev.tesserakt.rdf.n3.serialization.Formatter"]},{"name":"val DefaultFormatter: PrettyFormatter","description":"dev.tesserakt.rdf.n3.serialization.N3Serializer.DefaultFormatter","location":"serialization/n3/dev.tesserakt.rdf.n3.serialization/-n3-serializer/-default-formatter.html","searchKeys":["DefaultFormatter","val DefaultFormatter: PrettyFormatter","dev.tesserakt.rdf.n3.serialization.N3Serializer.DefaultFormatter"]},{"name":"val flattenStrategy: PrettyFormatter.FlattenStrategy","description":"dev.tesserakt.rdf.n3.serialization.PrettyFormatter.flattenStrategy","location":"serialization/n3/dev.tesserakt.rdf.n3.serialization/-pretty-formatter/flatten-strategy.html","searchKeys":["flattenStrategy","val flattenStrategy: PrettyFormatter.FlattenStrategy","dev.tesserakt.rdf.n3.serialization.PrettyFormatter.flattenStrategy"]},{"name":"val indent: PrettyFormatter.Indent","description":"dev.tesserakt.rdf.n3.serialization.PrettyFormatter.indent","location":"serialization/n3/dev.tesserakt.rdf.n3.serialization/-pretty-formatter/indent.html","searchKeys":["indent","val indent: PrettyFormatter.Indent","dev.tesserakt.rdf.n3.serialization.PrettyFormatter.indent"]},{"name":"value class SimpleIndent(pattern: String) : PrettyFormatter.Indent","description":"dev.tesserakt.rdf.n3.serialization.PrettyFormatter.SimpleIndent","location":"serialization/n3/dev.tesserakt.rdf.n3.serialization/-pretty-formatter/-simple-indent/index.html","searchKeys":["SimpleIndent","value class SimpleIndent(pattern: String) : PrettyFormatter.Indent","dev.tesserakt.rdf.n3.serialization.PrettyFormatter.SimpleIndent"]},{"name":"annotation class ExperimentalN3Api","description":"dev.tesserakt.rdf.n3.ExperimentalN3Api","location":"n3/dev.tesserakt.rdf.n3/-experimental-n3-api/index.html","searchKeys":["ExperimentalN3Api","annotation class ExperimentalN3Api","dev.tesserakt.rdf.n3.ExperimentalN3Api"]},{"name":"constructor()","description":"dev.tesserakt.rdf.n3.Store.Store","location":"n3/dev.tesserakt.rdf.n3/-store/-store.html","searchKeys":["Store","constructor()","dev.tesserakt.rdf.n3.Store.Store"]},{"name":"constructor(elements: Collection<Quad>)","description":"dev.tesserakt.rdf.n3.Store.Store","location":"n3/dev.tesserakt.rdf.n3/-store/-store.html","searchKeys":["Store","constructor(elements: Collection<Quad>)","dev.tesserakt.rdf.n3.Store.Store"]},{"name":"constructor(s: Quad.Term, p: Quad.Term, o: Quad.Term)","description":"dev.tesserakt.rdf.n3.Quad.Quad","location":"n3/dev.tesserakt.rdf.n3/-quad/-quad.html","searchKeys":["Quad","constructor(s: Quad.Term, p: Quad.Term, o: Quad.Term)","dev.tesserakt.rdf.n3.Quad.Quad"]},{"name":"constructor(statements: Store)","description":"dev.tesserakt.rdf.n3.Quad.Term.StatementsList.StatementsList","location":"n3/dev.tesserakt.rdf.n3/-quad/-term/-statements-list/-statements-list.html","searchKeys":["StatementsList","constructor(statements: Store)","dev.tesserakt.rdf.n3.Quad.Term.StatementsList.StatementsList"]},{"name":"constructor(term: Quad.Term)","description":"dev.tesserakt.rdf.n3.Quad.Term.RdfTerm.RdfTerm","location":"n3/dev.tesserakt.rdf.n3/-quad/-term/-rdf-term/-rdf-term.html","searchKeys":["RdfTerm","constructor(term: Quad.Term)","dev.tesserakt.rdf.n3.Quad.Term.RdfTerm.RdfTerm"]},{"name":"data class Quad(val s: Quad.Term, val p: Quad.Term, val o: Quad.Term)","description":"dev.tesserakt.rdf.n3.Quad","location":"n3/dev.tesserakt.rdf.n3/-quad/index.html","searchKeys":["Quad","data class Quad(val s: Quad.Term, val p: Quad.Term, val o: Quad.Term)","dev.tesserakt.rdf.n3.Quad"]},{"name":"fun add(quad: Quad)","description":"dev.tesserakt.rdf.n3.Store.add","location":"n3/dev.tesserakt.rdf.n3/-store/add.html","searchKeys":["add","fun add(quad: Quad)","dev.tesserakt.rdf.n3.Store.add"]},{"name":"open override fun toString(): String","description":"dev.tesserakt.rdf.n3.Quad.Term.RdfTerm.toString","location":"n3/dev.tesserakt.rdf.n3/-quad/-term/-rdf-term/to-string.html","searchKeys":["toString","open override fun toString(): String","dev.tesserakt.rdf.n3.Quad.Term.RdfTerm.toString"]},{"name":"open override fun toString(): String","description":"dev.tesserakt.rdf.n3.Quad.Term.StatementsList.toString","location":"n3/dev.tesserakt.rdf.n3/-quad/-term/-statements-list/to-string.html","searchKeys":["toString","open override fun toString(): String","dev.tesserakt.rdf.n3.Quad.Term.StatementsList.toString"]},{"name":"open override fun toString(): String","description":"dev.tesserakt.rdf.n3.Quad.toString","location":"n3/dev.tesserakt.rdf.n3/-quad/to-string.html","searchKeys":["toString","open override fun toString(): String","dev.tesserakt.rdf.n3.Quad.toString"]},{"name":"open override fun toString(): String","description":"dev.tesserakt.rdf.n3.Store.toString","location":"n3/dev.tesserakt.rdf.n3/-store/to-string.html","searchKeys":["toString","open override fun toString(): String","dev.tesserakt.rdf.n3.Store.toString"]},{"name":"sealed interface Term","description":"dev.tesserakt.rdf.n3.Quad.Term","location":"n3/dev.tesserakt.rdf.n3/-quad/-term/index.html","searchKeys":["Term","sealed interface Term","dev.tesserakt.rdf.n3.Quad.Term"]},{"name":"val o: Quad.Term","description":"dev.tesserakt.rdf.n3.Quad.o","location":"n3/dev.tesserakt.rdf.n3/-quad/o.html","searchKeys":["o","val o: Quad.Term","dev.tesserakt.rdf.n3.Quad.o"]},{"name":"val p: Quad.Term","description":"dev.tesserakt.rdf.n3.Quad.p","location":"n3/dev.tesserakt.rdf.n3/-quad/p.html","searchKeys":["p","val p: Quad.Term","dev.tesserakt.rdf.n3.Quad.p"]},{"name":"val s: Quad.Term","description":"dev.tesserakt.rdf.n3.Quad.s","location":"n3/dev.tesserakt.rdf.n3/-quad/s.html","searchKeys":["s","val s: Quad.Term","dev.tesserakt.rdf.n3.Quad.s"]},{"name":"val statements: Store","description":"dev.tesserakt.rdf.n3.Quad.Term.StatementsList.statements","location":"n3/dev.tesserakt.rdf.n3/-quad/-term/-statements-list/statements.html","searchKeys":["statements","val statements: Store","dev.tesserakt.rdf.n3.Quad.Term.StatementsList.statements"]},{"name":"val term: Quad.Term","description":"dev.tesserakt.rdf.n3.Quad.Term.RdfTerm.term","location":"n3/dev.tesserakt.rdf.n3/-quad/-term/-rdf-term/term.html","searchKeys":["term","val term: Quad.Term","dev.tesserakt.rdf.n3.Quad.Term.RdfTerm.term"]},{"name":"value class RdfTerm(val term: Quad.Term) : Quad.Term","description":"dev.tesserakt.rdf.n3.Quad.Term.RdfTerm","location":"n3/dev.tesserakt.rdf.n3/-quad/-term/-rdf-term/index.html","searchKeys":["RdfTerm","value class RdfTerm(val term: Quad.Term) : Quad.Term","dev.tesserakt.rdf.n3.Quad.Term.RdfTerm"]},{"name":"value class StatementsList(val statements: Store) : Quad.Term","description":"dev.tesserakt.rdf.n3.Quad.Term.StatementsList","location":"n3/dev.tesserakt.rdf.n3/-quad/-term/-statements-list/index.html","searchKeys":["StatementsList","value class StatementsList(val statements: Store) : Quad.Term","dev.tesserakt.rdf.n3.Quad.Term.StatementsList"]},{"name":"value class Store : Set<Quad> ","description":"dev.tesserakt.rdf.n3.Store","location":"n3/dev.tesserakt.rdf.n3/-store/index.html","searchKeys":["Store","value class Store : Set<Quad> ","dev.tesserakt.rdf.n3.Store"]},{"name":"abstract val datatype: N3NamedNode","description":"dev.tesserakt.interop.rdfjs.n3.N3Literal.datatype","location":"interop/rdfjs/dev.tesserakt.interop.rdfjs.n3/-n3-literal/datatype.html","searchKeys":["datatype","abstract val datatype: N3NamedNode","dev.tesserakt.interop.rdfjs.n3.N3Literal.datatype"]},{"name":"abstract val language: String","description":"dev.tesserakt.interop.rdfjs.n3.N3Literal.language","location":"interop/rdfjs/dev.tesserakt.interop.rdfjs.n3/-n3-literal/language.html","searchKeys":["language","abstract val language: String","dev.tesserakt.interop.rdfjs.n3.N3Literal.language"]},{"name":"abstract val termType: String","description":"dev.tesserakt.interop.rdfjs.n3.N3Term.termType","location":"interop/rdfjs/dev.tesserakt.interop.rdfjs.n3/-n3-term/term-type.html","searchKeys":["termType","abstract val termType: String","dev.tesserakt.interop.rdfjs.n3.N3Term.termType"]},{"name":"abstract val value: String","description":"dev.tesserakt.interop.rdfjs.n3.N3Term.value","location":"interop/rdfjs/dev.tesserakt.interop.rdfjs.n3/-n3-term/value.html","searchKeys":["value","abstract val value: String","dev.tesserakt.interop.rdfjs.n3.N3Term.value"]},{"name":"constructor()","description":"dev.tesserakt.interop.rdfjs.n3.N3Store.N3Store","location":"interop/rdfjs/dev.tesserakt.interop.rdfjs.n3/-n3-store/-n3-store.html","searchKeys":["N3Store","constructor()","dev.tesserakt.interop.rdfjs.n3.N3Store.N3Store"]},{"name":"constructor(subject: N3Term, predicate: N3Term, object: N3Term)","description":"dev.tesserakt.interop.rdfjs.n3.N3Quad.N3Quad","location":"interop/rdfjs/dev.tesserakt.interop.rdfjs.n3/-n3-quad/-n3-quad.html","searchKeys":["N3Quad","constructor(subject: N3Term, predicate: N3Term, object: N3Term)","dev.tesserakt.interop.rdfjs.n3.N3Quad.N3Quad"]},{"name":"constructor(subject: N3Term, predicate: N3Term, object: N3Term, graph: N3Term? = definedExternally)","description":"dev.tesserakt.interop.rdfjs.n3.N3Quad.N3Quad","location":"interop/rdfjs/dev.tesserakt.interop.rdfjs.n3/-n3-quad/-n3-quad.html","searchKeys":["N3Quad","constructor(subject: N3Term, predicate: N3Term, object: N3Term, graph: N3Term? = definedExternally)","dev.tesserakt.interop.rdfjs.n3.N3Quad.N3Quad"]},{"name":"external class N3Quad(subject: N3Term, predicate: N3Term, object: N3Term, graph: N3Term? = definedExternally)","description":"dev.tesserakt.interop.rdfjs.n3.N3Quad","location":"interop/rdfjs/dev.tesserakt.interop.rdfjs.n3/-n3-quad/index.html","searchKeys":["N3Quad","external class N3Quad(subject: N3Term, predicate: N3Term, object: N3Term, graph: N3Term? = definedExternally)","dev.tesserakt.interop.rdfjs.n3.N3Quad"]},{"name":"external class N3Store","description":"dev.tesserakt.interop.rdfjs.n3.N3Store","location":"interop/rdfjs/dev.tesserakt.interop.rdfjs.n3/-n3-store/index.html","searchKeys":["N3Store","external class N3Store","dev.tesserakt.interop.rdfjs.n3.N3Store"]},{"name":"external interface N3BlankNode : N3Term","description":"dev.tesserakt.interop.rdfjs.n3.N3BlankNode","location":"interop/rdfjs/dev.tesserakt.interop.rdfjs.n3/-n3-blank-node/index.html","searchKeys":["N3BlankNode","external interface N3BlankNode : N3Term","dev.tesserakt.interop.rdfjs.n3.N3BlankNode"]},{"name":"external interface N3Literal : N3Term","description":"dev.tesserakt.interop.rdfjs.n3.N3Literal","location":"interop/rdfjs/dev.tesserakt.interop.rdfjs.n3/-n3-literal/index.html","searchKeys":["N3Literal","external interface N3Literal : N3Term","dev.tesserakt.interop.rdfjs.n3.N3Literal"]},{"name":"external interface N3NamedNode : N3Term","description":"dev.tesserakt.interop.rdfjs.n3.N3NamedNode","location":"interop/rdfjs/dev.tesserakt.interop.rdfjs.n3/-n3-named-node/index.html","searchKeys":["N3NamedNode","external interface N3NamedNode : N3Term","dev.tesserakt.interop.rdfjs.n3.N3NamedNode"]},{"name":"external interface N3Term","description":"dev.tesserakt.interop.rdfjs.n3.N3Term","location":"interop/rdfjs/dev.tesserakt.interop.rdfjs.n3/-n3-term/index.html","searchKeys":["N3Term","external interface N3Term","dev.tesserakt.interop.rdfjs.n3.N3Term"]},{"name":"fun Collection<Quad>.toN3Store(): N3Store","description":"dev.tesserakt.interop.rdfjs.toN3Store","location":"interop/rdfjs/dev.tesserakt.interop.rdfjs/to-n3-store.html","searchKeys":["toN3Store","fun Collection<Quad>.toN3Store(): N3Store","dev.tesserakt.interop.rdfjs.toN3Store"]},{"name":"fun N3BlankNode.toTerm(): Quad.BlankTerm","description":"dev.tesserakt.interop.rdfjs.toTerm","location":"interop/rdfjs/dev.tesserakt.interop.rdfjs/to-term.html","searchKeys":["toTerm","fun N3BlankNode.toTerm(): Quad.BlankTerm","dev.tesserakt.interop.rdfjs.toTerm"]},{"name":"fun N3Literal.toTerm(): Quad.Literal","description":"dev.tesserakt.interop.rdfjs.toTerm","location":"interop/rdfjs/dev.tesserakt.interop.rdfjs/to-term.html","searchKeys":["toTerm","fun N3Literal.toTerm(): Quad.Literal","dev.tesserakt.interop.rdfjs.toTerm"]},{"name":"fun N3NamedNode.toTerm(): Quad.NamedTerm","description":"dev.tesserakt.interop.rdfjs.toTerm","location":"interop/rdfjs/dev.tesserakt.interop.rdfjs/to-term.html","searchKeys":["toTerm","fun N3NamedNode.toTerm(): Quad.NamedTerm","dev.tesserakt.interop.rdfjs.toTerm"]},{"name":"fun N3Quad.toQuad(): Quad","description":"dev.tesserakt.interop.rdfjs.toQuad","location":"interop/rdfjs/dev.tesserakt.interop.rdfjs/to-quad.html","searchKeys":["toQuad","fun N3Quad.toQuad(): Quad","dev.tesserakt.interop.rdfjs.toQuad"]},{"name":"fun N3Store.toStore(): Store","description":"dev.tesserakt.interop.rdfjs.toStore","location":"interop/rdfjs/dev.tesserakt.interop.rdfjs/to-store.html","searchKeys":["toStore","fun N3Store.toStore(): Store","dev.tesserakt.interop.rdfjs.toStore"]},{"name":"fun N3Term.toGraphTerm(): Quad.Graph","description":"dev.tesserakt.interop.rdfjs.toGraphTerm","location":"interop/rdfjs/dev.tesserakt.interop.rdfjs/to-graph-term.html","searchKeys":["toGraphTerm","fun N3Term.toGraphTerm(): Quad.Graph","dev.tesserakt.interop.rdfjs.toGraphTerm"]},{"name":"fun N3Term.toTerm(): Quad.Term","description":"dev.tesserakt.interop.rdfjs.toTerm","location":"interop/rdfjs/dev.tesserakt.interop.rdfjs/to-term.html","searchKeys":["toTerm","fun N3Term.toTerm(): Quad.Term","dev.tesserakt.interop.rdfjs.toTerm"]},{"name":"fun Quad.Graph.toN3GraphTerm(): N3Term","description":"dev.tesserakt.interop.rdfjs.toN3GraphTerm","location":"interop/rdfjs/dev.tesserakt.interop.rdfjs/to-n3-graph-term.html","searchKeys":["toN3GraphTerm","fun Quad.Graph.toN3GraphTerm(): N3Term","dev.tesserakt.interop.rdfjs.toN3GraphTerm"]},{"name":"fun Quad.Term.toN3Term(): N3Term","description":"dev.tesserakt.interop.rdfjs.toN3Term","location":"interop/rdfjs/dev.tesserakt.interop.rdfjs/to-n3-term.html","searchKeys":["toN3Term","fun Quad.Term.toN3Term(): N3Term","dev.tesserakt.interop.rdfjs.toN3Term"]},{"name":"fun Quad.toN3Triple(): N3Quad","description":"dev.tesserakt.interop.rdfjs.toN3Triple","location":"interop/rdfjs/dev.tesserakt.interop.rdfjs/to-n3-triple.html","searchKeys":["toN3Triple","fun Quad.toN3Triple(): N3Quad","dev.tesserakt.interop.rdfjs.toN3Triple"]},{"name":"fun add(subject: N3Term, predicate: N3Term, object: N3Term, graph: N3Term? = definedExternally)","description":"dev.tesserakt.interop.rdfjs.n3.N3Store.add","location":"interop/rdfjs/dev.tesserakt.interop.rdfjs.n3/-n3-store/add.html","searchKeys":["add","fun add(subject: N3Term, predicate: N3Term, object: N3Term, graph: N3Term? = definedExternally)","dev.tesserakt.interop.rdfjs.n3.N3Store.add"]},{"name":"fun add(triple: N3Quad)","description":"dev.tesserakt.interop.rdfjs.n3.N3Store.add","location":"interop/rdfjs/dev.tesserakt.interop.rdfjs.n3/-n3-store/add.html","searchKeys":["add","fun add(triple: N3Quad)","dev.tesserakt.interop.rdfjs.n3.N3Store.add"]},{"name":"fun addAll(triples: Array<N3Quad>)","description":"dev.tesserakt.interop.rdfjs.n3.N3Store.addAll","location":"interop/rdfjs/dev.tesserakt.interop.rdfjs.n3/-n3-store/add-all.html","searchKeys":["addAll","fun addAll(triples: Array<N3Quad>)","dev.tesserakt.interop.rdfjs.n3.N3Store.addAll"]},{"name":"fun createBlankNode(suggestedName: String = definedExternally): N3BlankNode","description":"dev.tesserakt.interop.rdfjs.n3.N3Store.createBlankNode","location":"interop/rdfjs/dev.tesserakt.interop.rdfjs.n3/-n3-store/create-blank-node.html","searchKeys":["createBlankNode","fun createBlankNode(suggestedName: String = definedExternally): N3BlankNode","dev.tesserakt.interop.rdfjs.n3.N3Store.createBlankNode"]},{"name":"fun delete(triple: N3Quad)","description":"dev.tesserakt.interop.rdfjs.n3.N3Store.delete","location":"interop/rdfjs/dev.tesserakt.interop.rdfjs.n3/-n3-store/delete.html","searchKeys":["delete","fun delete(triple: N3Quad)","dev.tesserakt.interop.rdfjs.n3.N3Store.delete"]},{"name":"fun forEach(callback: (N3Quad) -> Unit, subject: N3Term? = definedExternally, predicate: N3Term? = definedExternally, object: N3Term? = definedExternally)","description":"dev.tesserakt.interop.rdfjs.n3.N3Store.forEach","location":"interop/rdfjs/dev.tesserakt.interop.rdfjs.n3/-n3-store/for-each.html","searchKeys":["forEach","fun forEach(callback: (N3Quad) -> Unit, subject: N3Term? = definedExternally, predicate: N3Term? = definedExternally, object: N3Term? = definedExternally)","dev.tesserakt.interop.rdfjs.n3.N3Store.forEach"]},{"name":"fun fromArray(store: Array<QuadJs>): N3Store","description":"RDFJS.fromArray","location":"interop/rdfjs/[root]/-r-d-f-j-s/from-array.html","searchKeys":["fromArray","fun fromArray(store: Array<QuadJs>): N3Store","RDFJS.fromArray"]},{"name":"fun fromSet(store: JsSet<QuadJs>): N3Store","description":"RDFJS.fromSet","location":"interop/rdfjs/[root]/-r-d-f-j-s/from-set.html","searchKeys":["fromSet","fun fromSet(store: JsSet<QuadJs>): N3Store","RDFJS.fromSet"]},{"name":"fun fromStore(store: MutableStoreJs): N3Store","description":"RDFJS.fromStore","location":"interop/rdfjs/[root]/-r-d-f-j-s/from-store.html","searchKeys":["fromStore","fun fromStore(store: MutableStoreJs): N3Store","RDFJS.fromStore"]},{"name":"fun getObjects(): Array<N3Term>","description":"dev.tesserakt.interop.rdfjs.n3.N3Store.getObjects","location":"interop/rdfjs/dev.tesserakt.interop.rdfjs.n3/-n3-store/get-objects.html","searchKeys":["getObjects","fun getObjects(): Array<N3Term>","dev.tesserakt.interop.rdfjs.n3.N3Store.getObjects"]},{"name":"fun getPredicates(): Array<N3Term>","description":"dev.tesserakt.interop.rdfjs.n3.N3Store.getPredicates","location":"interop/rdfjs/dev.tesserakt.interop.rdfjs.n3/-n3-store/get-predicates.html","searchKeys":["getPredicates","fun getPredicates(): Array<N3Term>","dev.tesserakt.interop.rdfjs.n3.N3Store.getPredicates"]},{"name":"fun getQuads(subject: N3Term = definedExternally, predicate: N3Term = definedExternally, object: N3Term = definedExternally, graph: N3Term = definedExternally): Array<N3Quad>","description":"dev.tesserakt.interop.rdfjs.n3.N3Store.getQuads","location":"interop/rdfjs/dev.tesserakt.interop.rdfjs.n3/-n3-store/get-quads.html","searchKeys":["getQuads","fun getQuads(subject: N3Term = definedExternally, predicate: N3Term = definedExternally, object: N3Term = definedExternally, graph: N3Term = definedExternally): Array<N3Quad>","dev.tesserakt.interop.rdfjs.n3.N3Store.getQuads"]},{"name":"fun getSubjects(): Array<N3Term>","description":"dev.tesserakt.interop.rdfjs.n3.N3Store.getSubjects","location":"interop/rdfjs/dev.tesserakt.interop.rdfjs.n3/-n3-store/get-subjects.html","searchKeys":["getSubjects","fun getSubjects(): Array<N3Term>","dev.tesserakt.interop.rdfjs.n3.N3Store.getSubjects"]},{"name":"fun has(triple: N3Quad)","description":"dev.tesserakt.interop.rdfjs.n3.N3Store.has","location":"interop/rdfjs/dev.tesserakt.interop.rdfjs.n3/-n3-store/has.html","searchKeys":["has","fun has(triple: N3Quad)","dev.tesserakt.interop.rdfjs.n3.N3Store.has"]},{"name":"object RDFJS","description":"RDFJS","location":"interop/rdfjs/[root]/-r-d-f-j-s/index.html","searchKeys":["RDFJS","object RDFJS","RDFJS"]},{"name":"val graph: N3Term","description":"dev.tesserakt.interop.rdfjs.n3.N3Quad.graph","location":"interop/rdfjs/dev.tesserakt.interop.rdfjs.n3/-n3-quad/graph.html","searchKeys":["graph","val graph: N3Term","dev.tesserakt.interop.rdfjs.n3.N3Quad.graph"]},{"name":"val object: N3Term","description":"dev.tesserakt.interop.rdfjs.n3.N3Quad.object","location":"interop/rdfjs/dev.tesserakt.interop.rdfjs.n3/-n3-quad/object.html","searchKeys":["object","val object: N3Term","dev.tesserakt.interop.rdfjs.n3.N3Quad.object"]},{"name":"val predicate: N3Term","description":"dev.tesserakt.interop.rdfjs.n3.N3Quad.predicate","location":"interop/rdfjs/dev.tesserakt.interop.rdfjs.n3/-n3-quad/predicate.html","searchKeys":["predicate","val predicate: N3Term","dev.tesserakt.interop.rdfjs.n3.N3Quad.predicate"]},{"name":"val size: Int","description":"dev.tesserakt.interop.rdfjs.n3.N3Store.size","location":"interop/rdfjs/dev.tesserakt.interop.rdfjs.n3/-n3-store/size.html","searchKeys":["size","val size: Int","dev.tesserakt.interop.rdfjs.n3.N3Store.size"]},{"name":"val subject: N3Term","description":"dev.tesserakt.interop.rdfjs.n3.N3Quad.subject","location":"interop/rdfjs/dev.tesserakt.interop.rdfjs.n3/-n3-quad/subject.html","searchKeys":["subject","val subject: N3Term","dev.tesserakt.interop.rdfjs.n3.N3Quad.subject"]},{"name":"AVG","description":"dev.tesserakt.sparql.types.Expression.BindingAggregate.Type.AVG","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-binding-aggregate/-type/-a-v-g/index.html","searchKeys":["AVG","AVG","dev.tesserakt.sparql.types.Expression.BindingAggregate.Type.AVG"]},{"name":"COUNT","description":"dev.tesserakt.sparql.types.Expression.BindingAggregate.Type.COUNT","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-binding-aggregate/-type/-c-o-u-n-t/index.html","searchKeys":["COUNT","COUNT","dev.tesserakt.sparql.types.Expression.BindingAggregate.Type.COUNT"]},{"name":"DIV","description":"dev.tesserakt.sparql.types.Expression.MathOp.Operator.DIV","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-math-op/-operator/-d-i-v/index.html","searchKeys":["DIV","DIV","dev.tesserakt.sparql.types.Expression.MathOp.Operator.DIV"]},{"name":"EQUAL","description":"dev.tesserakt.sparql.types.Expression.Comparison.Operator.EQUAL","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-comparison/-operator/-e-q-u-a-l/index.html","searchKeys":["EQUAL","EQUAL","dev.tesserakt.sparql.types.Expression.Comparison.Operator.EQUAL"]},{"name":"GREATER_THAN","description":"dev.tesserakt.sparql.types.Expression.Comparison.Operator.GREATER_THAN","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-comparison/-operator/-g-r-e-a-t-e-r_-t-h-a-n/index.html","searchKeys":["GREATER_THAN","GREATER_THAN","dev.tesserakt.sparql.types.Expression.Comparison.Operator.GREATER_THAN"]},{"name":"GREATER_THAN_OR_EQ","description":"dev.tesserakt.sparql.types.Expression.Comparison.Operator.GREATER_THAN_OR_EQ","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-comparison/-operator/-g-r-e-a-t-e-r_-t-h-a-n_-o-r_-e-q/index.html","searchKeys":["GREATER_THAN_OR_EQ","GREATER_THAN_OR_EQ","dev.tesserakt.sparql.types.Expression.Comparison.Operator.GREATER_THAN_OR_EQ"]},{"name":"GROUP_CONCAT","description":"dev.tesserakt.sparql.types.Expression.BindingAggregate.Type.GROUP_CONCAT","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-binding-aggregate/-type/-g-r-o-u-p_-c-o-n-c-a-t/index.html","searchKeys":["GROUP_CONCAT","GROUP_CONCAT","dev.tesserakt.sparql.types.Expression.BindingAggregate.Type.GROUP_CONCAT"]},{"name":"LESS_THAN","description":"dev.tesserakt.sparql.types.Expression.Comparison.Operator.LESS_THAN","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-comparison/-operator/-l-e-s-s_-t-h-a-n/index.html","searchKeys":["LESS_THAN","LESS_THAN","dev.tesserakt.sparql.types.Expression.Comparison.Operator.LESS_THAN"]},{"name":"LESS_THAN_OR_EQ","description":"dev.tesserakt.sparql.types.Expression.Comparison.Operator.LESS_THAN_OR_EQ","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-comparison/-operator/-l-e-s-s_-t-h-a-n_-o-r_-e-q/index.html","searchKeys":["LESS_THAN_OR_EQ","LESS_THAN_OR_EQ","dev.tesserakt.sparql.types.Expression.Comparison.Operator.LESS_THAN_OR_EQ"]},{"name":"MAX","description":"dev.tesserakt.sparql.types.Expression.BindingAggregate.Type.MAX","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-binding-aggregate/-type/-m-a-x/index.html","searchKeys":["MAX","MAX","dev.tesserakt.sparql.types.Expression.BindingAggregate.Type.MAX"]},{"name":"MIN","description":"dev.tesserakt.sparql.types.Expression.BindingAggregate.Type.MIN","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-binding-aggregate/-type/-m-i-n/index.html","searchKeys":["MIN","MIN","dev.tesserakt.sparql.types.Expression.BindingAggregate.Type.MIN"]},{"name":"MUL","description":"dev.tesserakt.sparql.types.Expression.MathOp.Operator.MUL","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-math-op/-operator/-m-u-l/index.html","searchKeys":["MUL","MUL","dev.tesserakt.sparql.types.Expression.MathOp.Operator.MUL"]},{"name":"NOT_EQUAL","description":"dev.tesserakt.sparql.types.Expression.Comparison.Operator.NOT_EQUAL","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-comparison/-operator/-n-o-t_-e-q-u-a-l/index.html","searchKeys":["NOT_EQUAL","NOT_EQUAL","dev.tesserakt.sparql.types.Expression.Comparison.Operator.NOT_EQUAL"]},{"name":"SAMPLE","description":"dev.tesserakt.sparql.types.Expression.BindingAggregate.Type.SAMPLE","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-binding-aggregate/-type/-s-a-m-p-l-e/index.html","searchKeys":["SAMPLE","SAMPLE","dev.tesserakt.sparql.types.Expression.BindingAggregate.Type.SAMPLE"]},{"name":"SUB","description":"dev.tesserakt.sparql.types.Expression.MathOp.Operator.SUB","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-math-op/-operator/-s-u-b/index.html","searchKeys":["SUB","SUB","dev.tesserakt.sparql.types.Expression.MathOp.Operator.SUB"]},{"name":"SUM","description":"dev.tesserakt.sparql.types.Expression.BindingAggregate.Type.SUM","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-binding-aggregate/-type/-s-u-m/index.html","searchKeys":["SUM","SUM","dev.tesserakt.sparql.types.Expression.BindingAggregate.Type.SUM"]},{"name":"SUM","description":"dev.tesserakt.sparql.types.Expression.MathOp.Operator.SUM","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-math-op/-operator/-s-u-m/index.html","searchKeys":["SUM","SUM","dev.tesserakt.sparql.types.Expression.MathOp.Operator.SUM"]},{"name":"abstract val body: GraphPattern","description":"dev.tesserakt.sparql.types.QueryStructure.body","location":"sparql/core/dev.tesserakt.sparql.types/-query-structure/body.html","searchKeys":["body","abstract val body: GraphPattern","dev.tesserakt.sparql.types.QueryStructure.body"]},{"name":"abstract val element: TriplePattern.UnboundPredicate","description":"dev.tesserakt.sparql.types.TriplePattern.RepeatingPredicate.element","location":"sparql/core/dev.tesserakt.sparql.types/-triple-pattern/-repeating-predicate/element.html","searchKeys":["element","abstract val element: TriplePattern.UnboundPredicate","dev.tesserakt.sparql.types.TriplePattern.RepeatingPredicate.element"]},{"name":"abstract val name: String","description":"dev.tesserakt.sparql.types.SelectQueryStructure.Output.name","location":"sparql/core/dev.tesserakt.sparql.types/-select-query-structure/-output/name.html","searchKeys":["name","abstract val name: String","dev.tesserakt.sparql.types.SelectQueryStructure.Output.name"]},{"name":"abstract val name: String","description":"dev.tesserakt.sparql.types.TriplePattern.Binding.name","location":"sparql/core/dev.tesserakt.sparql.types/-triple-pattern/-binding/name.html","searchKeys":["name","abstract val name: String","dev.tesserakt.sparql.types.TriplePattern.Binding.name"]},{"name":"class Builder(start: Expression)","description":"dev.tesserakt.sparql.types.Expression.MathOp.Builder","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-math-op/-builder/index.html","searchKeys":["Builder","class Builder(start: Expression)","dev.tesserakt.sparql.types.Expression.MathOp.Builder"]},{"name":"constructor(a: TriplePattern.Predicate, b: TriplePattern.Predicate)","description":"dev.tesserakt.sparql.types.TriplePattern.Sequence.Sequence","location":"sparql/core/dev.tesserakt.sparql.types/-triple-pattern/-sequence/-sequence.html","searchKeys":["Sequence","constructor(a: TriplePattern.Predicate, b: TriplePattern.Predicate)","dev.tesserakt.sparql.types.TriplePattern.Sequence.Sequence"]},{"name":"constructor(a: TriplePattern.StatelessPredicate, b: TriplePattern.StatelessPredicate)","description":"dev.tesserakt.sparql.types.TriplePattern.SimpleAlts.SimpleAlts","location":"sparql/core/dev.tesserakt.sparql.types/-triple-pattern/-simple-alts/-simple-alts.html","searchKeys":["SimpleAlts","constructor(a: TriplePattern.StatelessPredicate, b: TriplePattern.StatelessPredicate)","dev.tesserakt.sparql.types.TriplePattern.SimpleAlts.SimpleAlts"]},{"name":"constructor(a: TriplePattern.UnboundPredicate, b: TriplePattern.UnboundPredicate)","description":"dev.tesserakt.sparql.types.TriplePattern.Alts.Alts","location":"sparql/core/dev.tesserakt.sparql.types/-triple-pattern/-alts/-alts.html","searchKeys":["Alts","constructor(a: TriplePattern.UnboundPredicate, b: TriplePattern.UnboundPredicate)","dev.tesserakt.sparql.types.TriplePattern.Alts.Alts"]},{"name":"constructor(a: TriplePattern.UnboundPredicate, b: TriplePattern.UnboundPredicate)","description":"dev.tesserakt.sparql.types.TriplePattern.UnboundSequence.UnboundSequence","location":"sparql/core/dev.tesserakt.sparql.types/-triple-pattern/-unbound-sequence/-unbound-sequence.html","searchKeys":["UnboundSequence","constructor(a: TriplePattern.UnboundPredicate, b: TriplePattern.UnboundPredicate)","dev.tesserakt.sparql.types.TriplePattern.UnboundSequence.UnboundSequence"]},{"name":"constructor(allowed: List<TriplePattern.StatelessPredicate>)","description":"dev.tesserakt.sparql.types.TriplePattern.SimpleAlts.SimpleAlts","location":"sparql/core/dev.tesserakt.sparql.types/-triple-pattern/-simple-alts/-simple-alts.html","searchKeys":["SimpleAlts","constructor(allowed: List<TriplePattern.StatelessPredicate>)","dev.tesserakt.sparql.types.TriplePattern.SimpleAlts.SimpleAlts"]},{"name":"constructor(allowed: List<TriplePattern.UnboundPredicate>)","description":"dev.tesserakt.sparql.types.TriplePattern.Alts.Alts","location":"sparql/core/dev.tesserakt.sparql.types/-triple-pattern/-alts/-alts.html","searchKeys":["Alts","constructor(allowed: List<TriplePattern.UnboundPredicate>)","dev.tesserakt.sparql.types.TriplePattern.Alts.Alts"]},{"name":"constructor(chain: List<TriplePattern.Predicate>)","description":"dev.tesserakt.sparql.types.TriplePattern.Sequence.Sequence","location":"sparql/core/dev.tesserakt.sparql.types/-triple-pattern/-sequence/-sequence.html","searchKeys":["Sequence","constructor(chain: List<TriplePattern.Predicate>)","dev.tesserakt.sparql.types.TriplePattern.Sequence.Sequence"]},{"name":"constructor(chain: List<TriplePattern.UnboundPredicate>)","description":"dev.tesserakt.sparql.types.TriplePattern.UnboundSequence.UnboundSequence","location":"sparql/core/dev.tesserakt.sparql.types/-triple-pattern/-unbound-sequence/-unbound-sequence.html","searchKeys":["UnboundSequence","constructor(chain: List<TriplePattern.UnboundPredicate>)","dev.tesserakt.sparql.types.TriplePattern.UnboundSequence.UnboundSequence"]},{"name":"constructor(element: TriplePattern.UnboundPredicate)","description":"dev.tesserakt.sparql.types.TriplePattern.OneOrMore.OneOrMore","location":"sparql/core/dev.tesserakt.sparql.types/-triple-pattern/-one-or-more/-one-or-more.html","searchKeys":["OneOrMore","constructor(element: TriplePattern.UnboundPredicate)","dev.tesserakt.sparql.types.TriplePattern.OneOrMore.OneOrMore"]},{"name":"constructor(element: TriplePattern.UnboundPredicate)","description":"dev.tesserakt.sparql.types.TriplePattern.ZeroOrMore.ZeroOrMore","location":"sparql/core/dev.tesserakt.sparql.types/-triple-pattern/-zero-or-more/-zero-or-more.html","searchKeys":["ZeroOrMore","constructor(element: TriplePattern.UnboundPredicate)","dev.tesserakt.sparql.types.TriplePattern.ZeroOrMore.ZeroOrMore"]},{"name":"constructor(expression: Expression, target: Binding)","description":"dev.tesserakt.sparql.types.Aggregation.Aggregation","location":"sparql/core/dev.tesserakt.sparql.types/-aggregation/-aggregation.html","searchKeys":["Aggregation","constructor(expression: Expression, target: Binding)","dev.tesserakt.sparql.types.Aggregation.Aggregation"]},{"name":"constructor(expression: Expression, target: Binding)","description":"dev.tesserakt.sparql.types.BindingStatement.BindingStatement","location":"sparql/core/dev.tesserakt.sparql.types/-binding-statement/-binding-statement.html","searchKeys":["BindingStatement","constructor(expression: Expression, target: Binding)","dev.tesserakt.sparql.types.BindingStatement.BindingStatement"]},{"name":"constructor(expression: Expression, target: String)","description":"dev.tesserakt.sparql.types.Expression.BindingStatement.BindingStatement","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-binding-statement/-binding-statement.html","searchKeys":["BindingStatement","constructor(expression: Expression, target: String)","dev.tesserakt.sparql.types.Expression.BindingStatement.BindingStatement"]},{"name":"constructor(expression: Expression.Comparison)","description":"dev.tesserakt.sparql.types.Filter.Predicate.Predicate","location":"sparql/core/dev.tesserakt.sparql.types/-filter/-predicate/-predicate.html","searchKeys":["Predicate","constructor(expression: Expression.Comparison)","dev.tesserakt.sparql.types.Filter.Predicate.Predicate"]},{"name":"constructor(id: Int)","description":"dev.tesserakt.sparql.types.TriplePattern.GeneratedBinding.GeneratedBinding","location":"sparql/core/dev.tesserakt.sparql.types/-triple-pattern/-generated-binding/-generated-binding.html","searchKeys":["GeneratedBinding","constructor(id: Int)","dev.tesserakt.sparql.types.TriplePattern.GeneratedBinding.GeneratedBinding"]},{"name":"constructor(input: Binding, regex: String, mode: String)","description":"dev.tesserakt.sparql.types.Filter.Regex.Regex","location":"sparql/core/dev.tesserakt.sparql.types/-filter/-regex/-regex.html","searchKeys":["Regex","constructor(input: Binding, regex: String, mode: String)","dev.tesserakt.sparql.types.Filter.Regex.Regex"]},{"name":"constructor(items: List<TriplePattern>)","description":"dev.tesserakt.sparql.types.TriplePatternSet.TriplePatternSet","location":"sparql/core/dev.tesserakt.sparql.types/-triple-pattern-set/-triple-pattern-set.html","searchKeys":["TriplePatternSet","constructor(items: List<TriplePattern>)","dev.tesserakt.sparql.types.TriplePatternSet.TriplePatternSet"]},{"name":"constructor(lhs: Expression, rhs: Expression, operator: Expression.Comparison.Operator)","description":"dev.tesserakt.sparql.types.Expression.Comparison.Comparison","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-comparison/-comparison.html","searchKeys":["Comparison","constructor(lhs: Expression, rhs: Expression, operator: Expression.Comparison.Operator)","dev.tesserakt.sparql.types.Expression.Comparison.Comparison"]},{"name":"constructor(lhs: Expression, rhs: Expression, operator: Expression.MathOp.Operator)","description":"dev.tesserakt.sparql.types.Expression.MathOp.MathOp","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-math-op/-math-op.html","searchKeys":["MathOp","constructor(lhs: Expression, rhs: Expression, operator: Expression.MathOp.Operator)","dev.tesserakt.sparql.types.Expression.MathOp.MathOp"]},{"name":"constructor(name: String)","description":"dev.tesserakt.sparql.types.Binding.Binding","location":"sparql/core/dev.tesserakt.sparql.types/-binding/-binding.html","searchKeys":["Binding","constructor(name: String)","dev.tesserakt.sparql.types.Binding.Binding"]},{"name":"constructor(name: String)","description":"dev.tesserakt.sparql.types.Expression.BindingValues.BindingValues","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-binding-values/-binding-values.html","searchKeys":["BindingValues","constructor(name: String)","dev.tesserakt.sparql.types.Expression.BindingValues.BindingValues"]},{"name":"constructor(name: String)","description":"dev.tesserakt.sparql.types.SelectQueryStructure.BindingOutput.BindingOutput","location":"sparql/core/dev.tesserakt.sparql.types/-select-query-structure/-binding-output/-binding-output.html","searchKeys":["BindingOutput","constructor(name: String)","dev.tesserakt.sparql.types.SelectQueryStructure.BindingOutput.BindingOutput"]},{"name":"constructor(name: String)","description":"dev.tesserakt.sparql.types.TriplePattern.NamedBinding.NamedBinding","location":"sparql/core/dev.tesserakt.sparql.types/-triple-pattern/-named-binding/-named-binding.html","searchKeys":["NamedBinding","constructor(name: String)","dev.tesserakt.sparql.types.TriplePattern.NamedBinding.NamedBinding"]},{"name":"constructor(name: String, args: List<Expression>)","description":"dev.tesserakt.sparql.types.Expression.FuncCall.FuncCall","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-func-call/-func-call.html","searchKeys":["FuncCall","constructor(name: String, args: List<Expression>)","dev.tesserakt.sparql.types.Expression.FuncCall.FuncCall"]},{"name":"constructor(name: String, expression: Expression)","description":"dev.tesserakt.sparql.types.SelectQueryStructure.ExpressionOutput.ExpressionOutput","location":"sparql/core/dev.tesserakt.sparql.types/-select-query-structure/-expression-output/-expression-output.html","searchKeys":["ExpressionOutput","constructor(name: String, expression: Expression)","dev.tesserakt.sparql.types.SelectQueryStructure.ExpressionOutput.ExpressionOutput"]},{"name":"constructor(output: List<SelectQueryStructure.Output>?, body: GraphPattern, grouping: Expression?, groupingFilter: Expression?, ordering: Expression?)","description":"dev.tesserakt.sparql.types.SelectQueryStructure.SelectQueryStructure","location":"sparql/core/dev.tesserakt.sparql.types/-select-query-structure/-select-query-structure.html","searchKeys":["SelectQueryStructure","constructor(output: List<SelectQueryStructure.Output>?, body: GraphPattern, grouping: Expression?, groupingFilter: Expression?, ordering: Expression?)","dev.tesserakt.sparql.types.SelectQueryStructure.SelectQueryStructure"]},{"name":"constructor(pattern: GraphPattern)","description":"dev.tesserakt.sparql.types.Filter.Exists.Exists","location":"sparql/core/dev.tesserakt.sparql.types/-filter/-exists/-exists.html","searchKeys":["Exists","constructor(pattern: GraphPattern)","dev.tesserakt.sparql.types.Filter.Exists.Exists"]},{"name":"constructor(pattern: GraphPattern)","description":"dev.tesserakt.sparql.types.Filter.NotExists.NotExists","location":"sparql/core/dev.tesserakt.sparql.types/-filter/-not-exists/-not-exists.html","searchKeys":["NotExists","constructor(pattern: GraphPattern)","dev.tesserakt.sparql.types.Filter.NotExists.NotExists"]},{"name":"constructor(pattern: GraphPattern)","description":"dev.tesserakt.sparql.types.GraphPatternSegment.GraphPatternSegment","location":"sparql/core/dev.tesserakt.sparql.types/-graph-pattern-segment/-graph-pattern-segment.html","searchKeys":["GraphPatternSegment","constructor(pattern: GraphPattern)","dev.tesserakt.sparql.types.GraphPatternSegment.GraphPatternSegment"]},{"name":"constructor(patterns: TriplePatternSet, bindingStatements: List<BindingStatement>, filters: List<Filter>, unions: List<Union>, optional: List<Optional>)","description":"dev.tesserakt.sparql.types.GraphPattern.GraphPattern","location":"sparql/core/dev.tesserakt.sparql.types/-graph-pattern/-graph-pattern.html","searchKeys":["GraphPattern","constructor(patterns: TriplePatternSet, bindingStatements: List<BindingStatement>, filters: List<Filter>, unions: List<Union>, optional: List<Optional>)","dev.tesserakt.sparql.types.GraphPattern.GraphPattern"]},{"name":"constructor(query: SelectQueryStructure)","description":"dev.tesserakt.sparql.types.SelectQuerySegment.SelectQuerySegment","location":"sparql/core/dev.tesserakt.sparql.types/-select-query-segment/-select-query-segment.html","searchKeys":["SelectQuerySegment","constructor(query: SelectQueryStructure)","dev.tesserakt.sparql.types.SelectQuerySegment.SelectQuerySegment"]},{"name":"constructor(s: TriplePattern.Subject, p: TriplePattern.Predicate, o: TriplePattern.Object)","description":"dev.tesserakt.sparql.types.TriplePattern.TriplePattern","location":"sparql/core/dev.tesserakt.sparql.types/-triple-pattern/-triple-pattern.html","searchKeys":["TriplePattern","constructor(s: TriplePattern.Subject, p: TriplePattern.Predicate, o: TriplePattern.Object)","dev.tesserakt.sparql.types.TriplePattern.TriplePattern"]},{"name":"constructor(segment: Segment)","description":"dev.tesserakt.sparql.types.Optional.Optional","location":"sparql/core/dev.tesserakt.sparql.types/-optional/-optional.html","searchKeys":["Optional","constructor(segment: Segment)","dev.tesserakt.sparql.types.Optional.Optional"]},{"name":"constructor(segments: List<Segment>)","description":"dev.tesserakt.sparql.types.Union.Union","location":"sparql/core/dev.tesserakt.sparql.types/-union/-union.html","searchKeys":["Union","constructor(segments: List<Segment>)","dev.tesserakt.sparql.types.Union.Union"]},{"name":"constructor(start: Expression)","description":"dev.tesserakt.sparql.types.Expression.MathOp.Builder.Builder","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-math-op/-builder/-builder.html","searchKeys":["Builder","constructor(start: Expression)","dev.tesserakt.sparql.types.Expression.MathOp.Builder.Builder"]},{"name":"constructor(term: Quad.Term)","description":"dev.tesserakt.sparql.types.TriplePattern.Exact.Exact","location":"sparql/core/dev.tesserakt.sparql.types/-triple-pattern/-exact/-exact.html","searchKeys":["Exact","constructor(term: Quad.Term)","dev.tesserakt.sparql.types.TriplePattern.Exact.Exact"]},{"name":"constructor(terms: TriplePattern.SimpleAlts)","description":"dev.tesserakt.sparql.types.TriplePattern.Negated.Negated","location":"sparql/core/dev.tesserakt.sparql.types/-triple-pattern/-negated/-negated.html","searchKeys":["Negated","constructor(terms: TriplePattern.SimpleAlts)","dev.tesserakt.sparql.types.TriplePattern.Negated.Negated"]},{"name":"constructor(type: Expression.BindingAggregate.Type, input: Expression.BindingValues, distinct: Boolean)","description":"dev.tesserakt.sparql.types.Expression.BindingAggregate.BindingAggregate","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-binding-aggregate/-binding-aggregate.html","searchKeys":["BindingAggregate","constructor(type: Expression.BindingAggregate.Type, input: Expression.BindingValues, distinct: Boolean)","dev.tesserakt.sparql.types.Expression.BindingAggregate.BindingAggregate"]},{"name":"constructor(value: Expression)","description":"dev.tesserakt.sparql.types.Expression.Negative.Negative","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-negative/-negative.html","searchKeys":["Negative","constructor(value: Expression)","dev.tesserakt.sparql.types.Expression.Negative.Negative"]},{"name":"constructor(value: Number)","description":"dev.tesserakt.sparql.types.Expression.NumericLiteralValue.NumericLiteralValue","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-numeric-literal-value/-numeric-literal-value.html","searchKeys":["NumericLiteralValue","constructor(value: Number)","dev.tesserakt.sparql.types.Expression.NumericLiteralValue.NumericLiteralValue"]},{"name":"constructor(value: String)","description":"dev.tesserakt.sparql.types.Expression.StringLiteralValue.StringLiteralValue","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-string-literal-value/-string-literal-value.html","searchKeys":["StringLiteralValue","constructor(value: String)","dev.tesserakt.sparql.types.Expression.StringLiteralValue.StringLiteralValue"]},{"name":"data class Aggregation(val expression: Expression, val target: Binding) : QueryAtom","description":"dev.tesserakt.sparql.types.Aggregation","location":"sparql/core/dev.tesserakt.sparql.types/-aggregation/index.html","searchKeys":["Aggregation","data class Aggregation(val expression: Expression, val target: Binding) : QueryAtom","dev.tesserakt.sparql.types.Aggregation"]},{"name":"data class BindingAggregate(val type: Expression.BindingAggregate.Type, val input: Expression.BindingValues, val distinct: Boolean) : Expression","description":"dev.tesserakt.sparql.types.Expression.BindingAggregate","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-binding-aggregate/index.html","searchKeys":["BindingAggregate","data class BindingAggregate(val type: Expression.BindingAggregate.Type, val input: Expression.BindingValues, val distinct: Boolean) : Expression","dev.tesserakt.sparql.types.Expression.BindingAggregate"]},{"name":"data class BindingOutput(val name: String) : SelectQueryStructure.Output","description":"dev.tesserakt.sparql.types.SelectQueryStructure.BindingOutput","location":"sparql/core/dev.tesserakt.sparql.types/-select-query-structure/-binding-output/index.html","searchKeys":["BindingOutput","data class BindingOutput(val name: String) : SelectQueryStructure.Output","dev.tesserakt.sparql.types.SelectQueryStructure.BindingOutput"]},{"name":"data class BindingStatement(val expression: Expression, val target: Binding) : QueryAtom","description":"dev.tesserakt.sparql.types.BindingStatement","location":"sparql/core/dev.tesserakt.sparql.types/-binding-statement/index.html","searchKeys":["BindingStatement","data class BindingStatement(val expression: Expression, val target: Binding) : QueryAtom","dev.tesserakt.sparql.types.BindingStatement"]},{"name":"data class BindingStatement(val expression: Expression, val target: String)","description":"dev.tesserakt.sparql.types.Expression.BindingStatement","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-binding-statement/index.html","searchKeys":["BindingStatement","data class BindingStatement(val expression: Expression, val target: String)","dev.tesserakt.sparql.types.Expression.BindingStatement"]},{"name":"data class Comparison(val lhs: Expression, val rhs: Expression, val operator: Expression.Comparison.Operator) : Expression","description":"dev.tesserakt.sparql.types.Expression.Comparison","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-comparison/index.html","searchKeys":["Comparison","data class Comparison(val lhs: Expression, val rhs: Expression, val operator: Expression.Comparison.Operator) : Expression","dev.tesserakt.sparql.types.Expression.Comparison"]},{"name":"data class ExpressionOutput(val name: String, val expression: Expression) : SelectQueryStructure.Output","description":"dev.tesserakt.sparql.types.SelectQueryStructure.ExpressionOutput","location":"sparql/core/dev.tesserakt.sparql.types/-select-query-structure/-expression-output/index.html","searchKeys":["ExpressionOutput","data class ExpressionOutput(val name: String, val expression: Expression) : SelectQueryStructure.Output","dev.tesserakt.sparql.types.SelectQueryStructure.ExpressionOutput"]},{"name":"data class FuncCall(val name: String, val args: List<Expression>) : Expression","description":"dev.tesserakt.sparql.types.Expression.FuncCall","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-func-call/index.html","searchKeys":["FuncCall","data class FuncCall(val name: String, val args: List<Expression>) : Expression","dev.tesserakt.sparql.types.Expression.FuncCall"]},{"name":"data class GraphPattern(val patterns: TriplePatternSet, val bindingStatements: List<BindingStatement>, val filters: List<Filter>, val unions: List<Union>, val optional: List<Optional>) : QueryAtom","description":"dev.tesserakt.sparql.types.GraphPattern","location":"sparql/core/dev.tesserakt.sparql.types/-graph-pattern/index.html","searchKeys":["GraphPattern","data class GraphPattern(val patterns: TriplePatternSet, val bindingStatements: List<BindingStatement>, val filters: List<Filter>, val unions: List<Union>, val optional: List<Optional>) : QueryAtom","dev.tesserakt.sparql.types.GraphPattern"]},{"name":"data class MathOp(val lhs: Expression, val rhs: Expression, val operator: Expression.MathOp.Operator) : Expression","description":"dev.tesserakt.sparql.types.Expression.MathOp","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-math-op/index.html","searchKeys":["MathOp","data class MathOp(val lhs: Expression, val rhs: Expression, val operator: Expression.MathOp.Operator) : Expression","dev.tesserakt.sparql.types.Expression.MathOp"]},{"name":"data class Regex(val input: Binding, val regex: String, val mode: String) : Filter","description":"dev.tesserakt.sparql.types.Filter.Regex","location":"sparql/core/dev.tesserakt.sparql.types/-filter/-regex/index.html","searchKeys":["Regex","data class Regex(val input: Binding, val regex: String, val mode: String) : Filter","dev.tesserakt.sparql.types.Filter.Regex"]},{"name":"data class SelectQueryStructure(val output: List<SelectQueryStructure.Output>?, val body: GraphPattern, val grouping: Expression?, val groupingFilter: Expression?, val ordering: Expression?) : QueryStructure","description":"dev.tesserakt.sparql.types.SelectQueryStructure","location":"sparql/core/dev.tesserakt.sparql.types/-select-query-structure/index.html","searchKeys":["SelectQueryStructure","data class SelectQueryStructure(val output: List<SelectQueryStructure.Output>?, val body: GraphPattern, val grouping: Expression?, val groupingFilter: Expression?, val ordering: Expression?) : QueryStructure","dev.tesserakt.sparql.types.SelectQueryStructure"]},{"name":"data class TriplePattern(val s: TriplePattern.Subject, val p: TriplePattern.Predicate, val o: TriplePattern.Object) : QueryAtom","description":"dev.tesserakt.sparql.types.TriplePattern","location":"sparql/core/dev.tesserakt.sparql.types/-triple-pattern/index.html","searchKeys":["TriplePattern","data class TriplePattern(val s: TriplePattern.Subject, val p: TriplePattern.Predicate, val o: TriplePattern.Object) : QueryAtom","dev.tesserakt.sparql.types.TriplePattern"]},{"name":"enum Operator : Enum<Expression.Comparison.Operator> ","description":"dev.tesserakt.sparql.types.Expression.Comparison.Operator","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-comparison/-operator/index.html","searchKeys":["Operator","enum Operator : Enum<Expression.Comparison.Operator> ","dev.tesserakt.sparql.types.Expression.Comparison.Operator"]},{"name":"enum Operator : Enum<Expression.MathOp.Operator> ","description":"dev.tesserakt.sparql.types.Expression.MathOp.Operator","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-math-op/-operator/index.html","searchKeys":["Operator","enum Operator : Enum<Expression.MathOp.Operator> ","dev.tesserakt.sparql.types.Expression.MathOp.Operator"]},{"name":"enum Type : Enum<Expression.BindingAggregate.Type> ","description":"dev.tesserakt.sparql.types.Expression.BindingAggregate.Type","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-binding-aggregate/-type/index.html","searchKeys":["Type","enum Type : Enum<Expression.BindingAggregate.Type> ","dev.tesserakt.sparql.types.Expression.BindingAggregate.Type"]},{"name":"fun GraphPattern.extractAllBindings(): List<TriplePattern.Binding>","description":"dev.tesserakt.sparql.types.extractAllBindings","location":"sparql/core/dev.tesserakt.sparql.types/extract-all-bindings.html","searchKeys":["extractAllBindings","fun GraphPattern.extractAllBindings(): List<TriplePattern.Binding>","dev.tesserakt.sparql.types.extractAllBindings"]},{"name":"fun Segment.extractAllBindings(): List<TriplePattern.Binding>","description":"dev.tesserakt.sparql.types.extractAllBindings","location":"sparql/core/dev.tesserakt.sparql.types/extract-all-bindings.html","searchKeys":["extractAllBindings","fun Segment.extractAllBindings(): List<TriplePattern.Binding>","dev.tesserakt.sparql.types.extractAllBindings"]},{"name":"fun SelectQueryStructure.extractAllOutputsAsBindings(): List<TriplePattern.NamedBinding>","description":"dev.tesserakt.sparql.types.extractAllOutputsAsBindings","location":"sparql/core/dev.tesserakt.sparql.types/extract-all-outputs-as-bindings.html","searchKeys":["extractAllOutputsAsBindings","fun SelectQueryStructure.extractAllOutputsAsBindings(): List<TriplePattern.NamedBinding>","dev.tesserakt.sparql.types.extractAllOutputsAsBindings"]},{"name":"fun TriplePattern.Exact.matches(term: Quad.Term): Boolean","description":"dev.tesserakt.sparql.types.matches","location":"sparql/core/dev.tesserakt.sparql.types/matches.html","searchKeys":["matches","fun TriplePattern.Exact.matches(term: Quad.Term): Boolean","dev.tesserakt.sparql.types.matches"]},{"name":"fun TriplePattern.Object.matches(term: Quad.Term): Boolean","description":"dev.tesserakt.sparql.types.matches","location":"sparql/core/dev.tesserakt.sparql.types/matches.html","searchKeys":["matches","fun TriplePattern.Object.matches(term: Quad.Term): Boolean","dev.tesserakt.sparql.types.matches"]},{"name":"fun TriplePattern.Predicate.matches(term: Quad.Term): Boolean","description":"dev.tesserakt.sparql.types.matches","location":"sparql/core/dev.tesserakt.sparql.types/matches.html","searchKeys":["matches","fun TriplePattern.Predicate.matches(term: Quad.Term): Boolean","dev.tesserakt.sparql.types.matches"]},{"name":"fun TriplePattern.Subject.matches(term: Quad.Term): Boolean","description":"dev.tesserakt.sparql.types.matches","location":"sparql/core/dev.tesserakt.sparql.types/matches.html","searchKeys":["matches","fun TriplePattern.Subject.matches(term: Quad.Term): Boolean","dev.tesserakt.sparql.types.matches"]},{"name":"fun TriplePattern.extractAllBindings(): List<TriplePattern.Binding>","description":"dev.tesserakt.sparql.types.extractAllBindings","location":"sparql/core/dev.tesserakt.sparql.types/extract-all-bindings.html","searchKeys":["extractAllBindings","fun TriplePattern.extractAllBindings(): List<TriplePattern.Binding>","dev.tesserakt.sparql.types.extractAllBindings"]},{"name":"fun add(operator: Expression.MathOp.Operator, operand: Expression)","description":"dev.tesserakt.sparql.types.Expression.MathOp.Builder.add","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-math-op/-builder/add.html","searchKeys":["add","fun add(operator: Expression.MathOp.Operator, operand: Expression)","dev.tesserakt.sparql.types.Expression.MathOp.Builder.add"]},{"name":"fun build(): Expression","description":"dev.tesserakt.sparql.types.Expression.MathOp.Builder.build","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-math-op/-builder/build.html","searchKeys":["build","fun build(): Expression","dev.tesserakt.sparql.types.Expression.MathOp.Builder.build"]},{"name":"fun newAnonymousBinding(): TriplePattern.GeneratedBinding","description":"dev.tesserakt.sparql.newAnonymousBinding","location":"sparql/core/dev.tesserakt.sparql/new-anonymous-binding.html","searchKeys":["newAnonymousBinding","fun newAnonymousBinding(): TriplePattern.GeneratedBinding","dev.tesserakt.sparql.newAnonymousBinding"]},{"name":"fun of(value: Expression): Expression","description":"dev.tesserakt.sparql.types.Expression.Negative.Companion.of","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-negative/-companion/of.html","searchKeys":["of","fun of(value: Expression): Expression","dev.tesserakt.sparql.types.Expression.Negative.Companion.of"]},{"name":"fun valueOf(value: String): Expression.BindingAggregate.Type","description":"dev.tesserakt.sparql.types.Expression.BindingAggregate.Type.valueOf","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-binding-aggregate/-type/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): Expression.BindingAggregate.Type","dev.tesserakt.sparql.types.Expression.BindingAggregate.Type.valueOf"]},{"name":"fun valueOf(value: String): Expression.Comparison.Operator","description":"dev.tesserakt.sparql.types.Expression.Comparison.Operator.valueOf","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-comparison/-operator/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): Expression.Comparison.Operator","dev.tesserakt.sparql.types.Expression.Comparison.Operator.valueOf"]},{"name":"fun valueOf(value: String): Expression.MathOp.Operator","description":"dev.tesserakt.sparql.types.Expression.MathOp.Operator.valueOf","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-math-op/-operator/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): Expression.MathOp.Operator","dev.tesserakt.sparql.types.Expression.MathOp.Operator.valueOf"]},{"name":"fun values(): Array<Expression.BindingAggregate.Type>","description":"dev.tesserakt.sparql.types.Expression.BindingAggregate.Type.values","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-binding-aggregate/-type/values.html","searchKeys":["values","fun values(): Array<Expression.BindingAggregate.Type>","dev.tesserakt.sparql.types.Expression.BindingAggregate.Type.values"]},{"name":"fun values(): Array<Expression.Comparison.Operator>","description":"dev.tesserakt.sparql.types.Expression.Comparison.Operator.values","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-comparison/-operator/values.html","searchKeys":["values","fun values(): Array<Expression.Comparison.Operator>","dev.tesserakt.sparql.types.Expression.Comparison.Operator.values"]},{"name":"fun values(): Array<Expression.MathOp.Operator>","description":"dev.tesserakt.sparql.types.Expression.MathOp.Operator.values","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-math-op/-operator/values.html","searchKeys":["values","fun values(): Array<Expression.MathOp.Operator>","dev.tesserakt.sparql.types.Expression.MathOp.Operator.values"]},{"name":"object Companion","description":"dev.tesserakt.sparql.types.Expression.Negative.Companion","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-negative/-companion/index.html","searchKeys":["Companion","object Companion","dev.tesserakt.sparql.types.Expression.Negative.Companion"]},{"name":"open override fun toString(): String","description":"dev.tesserakt.sparql.types.Binding.toString","location":"sparql/core/dev.tesserakt.sparql.types/-binding/to-string.html","searchKeys":["toString","open override fun toString(): String","dev.tesserakt.sparql.types.Binding.toString"]},{"name":"open override fun toString(): String","description":"dev.tesserakt.sparql.types.Expression.BindingAggregate.toString","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-binding-aggregate/to-string.html","searchKeys":["toString","open override fun toString(): String","dev.tesserakt.sparql.types.Expression.BindingAggregate.toString"]},{"name":"open override fun toString(): String","description":"dev.tesserakt.sparql.types.Expression.BindingValues.toString","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-binding-values/to-string.html","searchKeys":["toString","open override fun toString(): String","dev.tesserakt.sparql.types.Expression.BindingValues.toString"]},{"name":"open override fun toString(): String","description":"dev.tesserakt.sparql.types.Expression.FuncCall.toString","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-func-call/to-string.html","searchKeys":["toString","open override fun toString(): String","dev.tesserakt.sparql.types.Expression.FuncCall.toString"]},{"name":"open override fun toString(): String","description":"dev.tesserakt.sparql.types.Expression.MathOp.toString","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-math-op/to-string.html","searchKeys":["toString","open override fun toString(): String","dev.tesserakt.sparql.types.Expression.MathOp.toString"]},{"name":"open override fun toString(): String","description":"dev.tesserakt.sparql.types.Expression.Negative.toString","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-negative/to-string.html","searchKeys":["toString","open override fun toString(): String","dev.tesserakt.sparql.types.Expression.Negative.toString"]},{"name":"open override fun toString(): String","description":"dev.tesserakt.sparql.types.Expression.NumericLiteralValue.toString","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-numeric-literal-value/to-string.html","searchKeys":["toString","open override fun toString(): String","dev.tesserakt.sparql.types.Expression.NumericLiteralValue.toString"]},{"name":"open override fun toString(): String","description":"dev.tesserakt.sparql.types.Expression.StringLiteralValue.toString","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-string-literal-value/to-string.html","searchKeys":["toString","open override fun toString(): String","dev.tesserakt.sparql.types.Expression.StringLiteralValue.toString"]},{"name":"open override fun toString(): String","description":"dev.tesserakt.sparql.types.TriplePattern.Alts.toString","location":"sparql/core/dev.tesserakt.sparql.types/-triple-pattern/-alts/to-string.html","searchKeys":["toString","open override fun toString(): String","dev.tesserakt.sparql.types.TriplePattern.Alts.toString"]},{"name":"open override fun toString(): String","description":"dev.tesserakt.sparql.types.TriplePattern.Exact.toString","location":"sparql/core/dev.tesserakt.sparql.types/-triple-pattern/-exact/to-string.html","searchKeys":["toString","open override fun toString(): String","dev.tesserakt.sparql.types.TriplePattern.Exact.toString"]},{"name":"open override fun toString(): String","description":"dev.tesserakt.sparql.types.TriplePattern.GeneratedBinding.toString","location":"sparql/core/dev.tesserakt.sparql.types/-triple-pattern/-generated-binding/to-string.html","searchKeys":["toString","open override fun toString(): String","dev.tesserakt.sparql.types.TriplePattern.GeneratedBinding.toString"]},{"name":"open override fun toString(): String","description":"dev.tesserakt.sparql.types.TriplePattern.NamedBinding.toString","location":"sparql/core/dev.tesserakt.sparql.types/-triple-pattern/-named-binding/to-string.html","searchKeys":["toString","open override fun toString(): String","dev.tesserakt.sparql.types.TriplePattern.NamedBinding.toString"]},{"name":"open override fun toString(): String","description":"dev.tesserakt.sparql.types.TriplePattern.Negated.toString","location":"sparql/core/dev.tesserakt.sparql.types/-triple-pattern/-negated/to-string.html","searchKeys":["toString","open override fun toString(): String","dev.tesserakt.sparql.types.TriplePattern.Negated.toString"]},{"name":"open override fun toString(): String","description":"dev.tesserakt.sparql.types.TriplePattern.OneOrMore.toString","location":"sparql/core/dev.tesserakt.sparql.types/-triple-pattern/-one-or-more/to-string.html","searchKeys":["toString","open override fun toString(): String","dev.tesserakt.sparql.types.TriplePattern.OneOrMore.toString"]},{"name":"open override fun toString(): String","description":"dev.tesserakt.sparql.types.TriplePattern.Sequence.toString","location":"sparql/core/dev.tesserakt.sparql.types/-triple-pattern/-sequence/to-string.html","searchKeys":["toString","open override fun toString(): String","dev.tesserakt.sparql.types.TriplePattern.Sequence.toString"]},{"name":"open override fun toString(): String","description":"dev.tesserakt.sparql.types.TriplePattern.SimpleAlts.toString","location":"sparql/core/dev.tesserakt.sparql.types/-triple-pattern/-simple-alts/to-string.html","searchKeys":["toString","open override fun toString(): String","dev.tesserakt.sparql.types.TriplePattern.SimpleAlts.toString"]},{"name":"open override fun toString(): String","description":"dev.tesserakt.sparql.types.TriplePattern.UnboundSequence.toString","location":"sparql/core/dev.tesserakt.sparql.types/-triple-pattern/-unbound-sequence/to-string.html","searchKeys":["toString","open override fun toString(): String","dev.tesserakt.sparql.types.TriplePattern.UnboundSequence.toString"]},{"name":"open override fun toString(): String","description":"dev.tesserakt.sparql.types.TriplePattern.ZeroOrMore.toString","location":"sparql/core/dev.tesserakt.sparql.types/-triple-pattern/-zero-or-more/to-string.html","searchKeys":["toString","open override fun toString(): String","dev.tesserakt.sparql.types.TriplePattern.ZeroOrMore.toString"]},{"name":"open override fun toString(): String","description":"dev.tesserakt.sparql.types.TriplePattern.toString","location":"sparql/core/dev.tesserakt.sparql.types/-triple-pattern/to-string.html","searchKeys":["toString","open override fun toString(): String","dev.tesserakt.sparql.types.TriplePattern.toString"]},{"name":"open override val body: GraphPattern","description":"dev.tesserakt.sparql.types.SelectQueryStructure.body","location":"sparql/core/dev.tesserakt.sparql.types/-select-query-structure/body.html","searchKeys":["body","open override val body: GraphPattern","dev.tesserakt.sparql.types.SelectQueryStructure.body"]},{"name":"open override val element: TriplePattern.UnboundPredicate","description":"dev.tesserakt.sparql.types.TriplePattern.OneOrMore.element","location":"sparql/core/dev.tesserakt.sparql.types/-triple-pattern/-one-or-more/element.html","searchKeys":["element","open override val element: TriplePattern.UnboundPredicate","dev.tesserakt.sparql.types.TriplePattern.OneOrMore.element"]},{"name":"open override val element: TriplePattern.UnboundPredicate","description":"dev.tesserakt.sparql.types.TriplePattern.ZeroOrMore.element","location":"sparql/core/dev.tesserakt.sparql.types/-triple-pattern/-zero-or-more/element.html","searchKeys":["element","open override val element: TriplePattern.UnboundPredicate","dev.tesserakt.sparql.types.TriplePattern.ZeroOrMore.element"]},{"name":"open override val name: String","description":"dev.tesserakt.sparql.types.SelectQueryStructure.BindingOutput.name","location":"sparql/core/dev.tesserakt.sparql.types/-select-query-structure/-binding-output/name.html","searchKeys":["name","open override val name: String","dev.tesserakt.sparql.types.SelectQueryStructure.BindingOutput.name"]},{"name":"open override val name: String","description":"dev.tesserakt.sparql.types.SelectQueryStructure.ExpressionOutput.name","location":"sparql/core/dev.tesserakt.sparql.types/-select-query-structure/-expression-output/name.html","searchKeys":["name","open override val name: String","dev.tesserakt.sparql.types.SelectQueryStructure.ExpressionOutput.name"]},{"name":"open override val name: String","description":"dev.tesserakt.sparql.types.TriplePattern.GeneratedBinding.name","location":"sparql/core/dev.tesserakt.sparql.types/-triple-pattern/-generated-binding/name.html","searchKeys":["name","open override val name: String","dev.tesserakt.sparql.types.TriplePattern.GeneratedBinding.name"]},{"name":"open override val name: String","description":"dev.tesserakt.sparql.types.TriplePattern.NamedBinding.name","location":"sparql/core/dev.tesserakt.sparql.types/-triple-pattern/-named-binding/name.html","searchKeys":["name","open override val name: String","dev.tesserakt.sparql.types.TriplePattern.NamedBinding.name"]},{"name":"sealed class Output","description":"dev.tesserakt.sparql.types.SelectQueryStructure.Output","location":"sparql/core/dev.tesserakt.sparql.types/-select-query-structure/-output/index.html","searchKeys":["Output","sealed class Output","dev.tesserakt.sparql.types.SelectQueryStructure.Output"]},{"name":"sealed class QueryStructure : QueryAtom","description":"dev.tesserakt.sparql.types.QueryStructure","location":"sparql/core/dev.tesserakt.sparql.types/-query-structure/index.html","searchKeys":["QueryStructure","sealed class QueryStructure : QueryAtom","dev.tesserakt.sparql.types.QueryStructure"]},{"name":"sealed interface Binding : TriplePattern.Subject, TriplePattern.Predicate, TriplePattern.Object","description":"dev.tesserakt.sparql.types.TriplePattern.Binding","location":"sparql/core/dev.tesserakt.sparql.types/-triple-pattern/-binding/index.html","searchKeys":["Binding","sealed interface Binding : TriplePattern.Subject, TriplePattern.Predicate, TriplePattern.Object","dev.tesserakt.sparql.types.TriplePattern.Binding"]},{"name":"sealed interface Element : QueryAtom","description":"dev.tesserakt.sparql.types.TriplePattern.Element","location":"sparql/core/dev.tesserakt.sparql.types/-triple-pattern/-element/index.html","searchKeys":["Element","sealed interface Element : QueryAtom","dev.tesserakt.sparql.types.TriplePattern.Element"]},{"name":"sealed interface Expression : QueryAtom","description":"dev.tesserakt.sparql.types.Expression","location":"sparql/core/dev.tesserakt.sparql.types/-expression/index.html","searchKeys":["Expression","sealed interface Expression : QueryAtom","dev.tesserakt.sparql.types.Expression"]},{"name":"sealed interface Filter : QueryAtom","description":"dev.tesserakt.sparql.types.Filter","location":"sparql/core/dev.tesserakt.sparql.types/-filter/index.html","searchKeys":["Filter","sealed interface Filter : QueryAtom","dev.tesserakt.sparql.types.Filter"]},{"name":"sealed interface Object : TriplePattern.Element","description":"dev.tesserakt.sparql.types.TriplePattern.Object","location":"sparql/core/dev.tesserakt.sparql.types/-triple-pattern/-object/index.html","searchKeys":["Object","sealed interface Object : TriplePattern.Element","dev.tesserakt.sparql.types.TriplePattern.Object"]},{"name":"sealed interface Predicate : TriplePattern.Element","description":"dev.tesserakt.sparql.types.TriplePattern.Predicate","location":"sparql/core/dev.tesserakt.sparql.types/-triple-pattern/-predicate/index.html","searchKeys":["Predicate","sealed interface Predicate : TriplePattern.Element","dev.tesserakt.sparql.types.TriplePattern.Predicate"]},{"name":"sealed interface QueryAtom","description":"dev.tesserakt.sparql.types.QueryAtom","location":"sparql/core/dev.tesserakt.sparql.types/-query-atom/index.html","searchKeys":["QueryAtom","sealed interface QueryAtom","dev.tesserakt.sparql.types.QueryAtom"]},{"name":"sealed interface RepeatingPredicate : TriplePattern.UnboundPredicate","description":"dev.tesserakt.sparql.types.TriplePattern.RepeatingPredicate","location":"sparql/core/dev.tesserakt.sparql.types/-triple-pattern/-repeating-predicate/index.html","searchKeys":["RepeatingPredicate","sealed interface RepeatingPredicate : TriplePattern.UnboundPredicate","dev.tesserakt.sparql.types.TriplePattern.RepeatingPredicate"]},{"name":"sealed interface Segment : QueryAtom","description":"dev.tesserakt.sparql.types.Segment","location":"sparql/core/dev.tesserakt.sparql.types/-segment/index.html","searchKeys":["Segment","sealed interface Segment : QueryAtom","dev.tesserakt.sparql.types.Segment"]},{"name":"sealed interface StatelessPredicate : TriplePattern.Predicate","description":"dev.tesserakt.sparql.types.TriplePattern.StatelessPredicate","location":"sparql/core/dev.tesserakt.sparql.types/-triple-pattern/-stateless-predicate/index.html","searchKeys":["StatelessPredicate","sealed interface StatelessPredicate : TriplePattern.Predicate","dev.tesserakt.sparql.types.TriplePattern.StatelessPredicate"]},{"name":"sealed interface Subject : TriplePattern.Element","description":"dev.tesserakt.sparql.types.TriplePattern.Subject","location":"sparql/core/dev.tesserakt.sparql.types/-triple-pattern/-subject/index.html","searchKeys":["Subject","sealed interface Subject : TriplePattern.Element","dev.tesserakt.sparql.types.TriplePattern.Subject"]},{"name":"sealed interface UnboundPredicate : TriplePattern.Predicate","description":"dev.tesserakt.sparql.types.TriplePattern.UnboundPredicate","location":"sparql/core/dev.tesserakt.sparql.types/-triple-pattern/-unbound-predicate/index.html","searchKeys":["UnboundPredicate","sealed interface UnboundPredicate : TriplePattern.Predicate","dev.tesserakt.sparql.types.TriplePattern.UnboundPredicate"]},{"name":"val TriplePattern.Object.bindingName: String?","description":"dev.tesserakt.sparql.types.bindingName","location":"sparql/core/dev.tesserakt.sparql.types/binding-name.html","searchKeys":["bindingName","val TriplePattern.Object.bindingName: String?","dev.tesserakt.sparql.types.bindingName"]},{"name":"val TriplePattern.Predicate.bindingName: String?","description":"dev.tesserakt.sparql.types.bindingName","location":"sparql/core/dev.tesserakt.sparql.types/binding-name.html","searchKeys":["bindingName","val TriplePattern.Predicate.bindingName: String?","dev.tesserakt.sparql.types.bindingName"]},{"name":"val TriplePattern.Subject.bindingName: String?","description":"dev.tesserakt.sparql.types.bindingName","location":"sparql/core/dev.tesserakt.sparql.types/binding-name.html","searchKeys":["bindingName","val TriplePattern.Subject.bindingName: String?","dev.tesserakt.sparql.types.bindingName"]},{"name":"val allowed: List<TriplePattern.StatelessPredicate>","description":"dev.tesserakt.sparql.types.TriplePattern.SimpleAlts.allowed","location":"sparql/core/dev.tesserakt.sparql.types/-triple-pattern/-simple-alts/allowed.html","searchKeys":["allowed","val allowed: List<TriplePattern.StatelessPredicate>","dev.tesserakt.sparql.types.TriplePattern.SimpleAlts.allowed"]},{"name":"val allowed: List<TriplePattern.UnboundPredicate>","description":"dev.tesserakt.sparql.types.TriplePattern.Alts.allowed","location":"sparql/core/dev.tesserakt.sparql.types/-triple-pattern/-alts/allowed.html","searchKeys":["allowed","val allowed: List<TriplePattern.UnboundPredicate>","dev.tesserakt.sparql.types.TriplePattern.Alts.allowed"]},{"name":"val args: List<Expression>","description":"dev.tesserakt.sparql.types.Expression.FuncCall.args","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-func-call/args.html","searchKeys":["args","val args: List<Expression>","dev.tesserakt.sparql.types.Expression.FuncCall.args"]},{"name":"val bindingStatements: List<BindingStatement>","description":"dev.tesserakt.sparql.types.GraphPattern.bindingStatements","location":"sparql/core/dev.tesserakt.sparql.types/-graph-pattern/binding-statements.html","searchKeys":["bindingStatements","val bindingStatements: List<BindingStatement>","dev.tesserakt.sparql.types.GraphPattern.bindingStatements"]},{"name":"val bindings: Set<String>","description":"dev.tesserakt.sparql.types.SelectQueryStructure.bindings","location":"sparql/core/dev.tesserakt.sparql.types/-select-query-structure/bindings.html","searchKeys":["bindings","val bindings: Set<String>","dev.tesserakt.sparql.types.SelectQueryStructure.bindings"]},{"name":"val chain: List<TriplePattern.Predicate>","description":"dev.tesserakt.sparql.types.TriplePattern.Sequence.chain","location":"sparql/core/dev.tesserakt.sparql.types/-triple-pattern/-sequence/chain.html","searchKeys":["chain","val chain: List<TriplePattern.Predicate>","dev.tesserakt.sparql.types.TriplePattern.Sequence.chain"]},{"name":"val chain: List<TriplePattern.UnboundPredicate>","description":"dev.tesserakt.sparql.types.TriplePattern.UnboundSequence.chain","location":"sparql/core/dev.tesserakt.sparql.types/-triple-pattern/-unbound-sequence/chain.html","searchKeys":["chain","val chain: List<TriplePattern.UnboundPredicate>","dev.tesserakt.sparql.types.TriplePattern.UnboundSequence.chain"]},{"name":"val distinct: Boolean","description":"dev.tesserakt.sparql.types.Expression.BindingAggregate.distinct","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-binding-aggregate/distinct.html","searchKeys":["distinct","val distinct: Boolean","dev.tesserakt.sparql.types.Expression.BindingAggregate.distinct"]},{"name":"val entries: EnumEntries<Expression.BindingAggregate.Type>","description":"dev.tesserakt.sparql.types.Expression.BindingAggregate.Type.entries","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-binding-aggregate/-type/entries.html","searchKeys":["entries","val entries: EnumEntries<Expression.BindingAggregate.Type>","dev.tesserakt.sparql.types.Expression.BindingAggregate.Type.entries"]},{"name":"val entries: EnumEntries<Expression.Comparison.Operator>","description":"dev.tesserakt.sparql.types.Expression.Comparison.Operator.entries","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-comparison/-operator/entries.html","searchKeys":["entries","val entries: EnumEntries<Expression.Comparison.Operator>","dev.tesserakt.sparql.types.Expression.Comparison.Operator.entries"]},{"name":"val entries: EnumEntries<Expression.MathOp.Operator>","description":"dev.tesserakt.sparql.types.Expression.MathOp.Operator.entries","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-math-op/-operator/entries.html","searchKeys":["entries","val entries: EnumEntries<Expression.MathOp.Operator>","dev.tesserakt.sparql.types.Expression.MathOp.Operator.entries"]},{"name":"val expression: Expression","description":"dev.tesserakt.sparql.types.Aggregation.expression","location":"sparql/core/dev.tesserakt.sparql.types/-aggregation/expression.html","searchKeys":["expression","val expression: Expression","dev.tesserakt.sparql.types.Aggregation.expression"]},{"name":"val expression: Expression","description":"dev.tesserakt.sparql.types.BindingStatement.expression","location":"sparql/core/dev.tesserakt.sparql.types/-binding-statement/expression.html","searchKeys":["expression","val expression: Expression","dev.tesserakt.sparql.types.BindingStatement.expression"]},{"name":"val expression: Expression","description":"dev.tesserakt.sparql.types.Expression.BindingStatement.expression","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-binding-statement/expression.html","searchKeys":["expression","val expression: Expression","dev.tesserakt.sparql.types.Expression.BindingStatement.expression"]},{"name":"val expression: Expression","description":"dev.tesserakt.sparql.types.SelectQueryStructure.ExpressionOutput.expression","location":"sparql/core/dev.tesserakt.sparql.types/-select-query-structure/-expression-output/expression.html","searchKeys":["expression","val expression: Expression","dev.tesserakt.sparql.types.SelectQueryStructure.ExpressionOutput.expression"]},{"name":"val expression: Expression.Comparison","description":"dev.tesserakt.sparql.types.Filter.Predicate.expression","location":"sparql/core/dev.tesserakt.sparql.types/-filter/-predicate/expression.html","searchKeys":["expression","val expression: Expression.Comparison","dev.tesserakt.sparql.types.Filter.Predicate.expression"]},{"name":"val filters: List<Filter>","description":"dev.tesserakt.sparql.types.GraphPattern.filters","location":"sparql/core/dev.tesserakt.sparql.types/-graph-pattern/filters.html","searchKeys":["filters","val filters: List<Filter>","dev.tesserakt.sparql.types.GraphPattern.filters"]},{"name":"val grouping: Expression?","description":"dev.tesserakt.sparql.types.SelectQueryStructure.grouping","location":"sparql/core/dev.tesserakt.sparql.types/-select-query-structure/grouping.html","searchKeys":["grouping","val grouping: Expression?","dev.tesserakt.sparql.types.SelectQueryStructure.grouping"]},{"name":"val groupingFilter: Expression?","description":"dev.tesserakt.sparql.types.SelectQueryStructure.groupingFilter","location":"sparql/core/dev.tesserakt.sparql.types/-select-query-structure/grouping-filter.html","searchKeys":["groupingFilter","val groupingFilter: Expression?","dev.tesserakt.sparql.types.SelectQueryStructure.groupingFilter"]},{"name":"val id: Int","description":"dev.tesserakt.sparql.types.TriplePattern.GeneratedBinding.id","location":"sparql/core/dev.tesserakt.sparql.types/-triple-pattern/-generated-binding/id.html","searchKeys":["id","val id: Int","dev.tesserakt.sparql.types.TriplePattern.GeneratedBinding.id"]},{"name":"val input: Binding","description":"dev.tesserakt.sparql.types.Filter.Regex.input","location":"sparql/core/dev.tesserakt.sparql.types/-filter/-regex/input.html","searchKeys":["input","val input: Binding","dev.tesserakt.sparql.types.Filter.Regex.input"]},{"name":"val input: Expression.BindingValues","description":"dev.tesserakt.sparql.types.Expression.BindingAggregate.input","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-binding-aggregate/input.html","searchKeys":["input","val input: Expression.BindingValues","dev.tesserakt.sparql.types.Expression.BindingAggregate.input"]},{"name":"val lhs: Expression","description":"dev.tesserakt.sparql.types.Expression.Comparison.lhs","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-comparison/lhs.html","searchKeys":["lhs","val lhs: Expression","dev.tesserakt.sparql.types.Expression.Comparison.lhs"]},{"name":"val lhs: Expression","description":"dev.tesserakt.sparql.types.Expression.MathOp.lhs","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-math-op/lhs.html","searchKeys":["lhs","val lhs: Expression","dev.tesserakt.sparql.types.Expression.MathOp.lhs"]},{"name":"val mode: String","description":"dev.tesserakt.sparql.types.Filter.Regex.mode","location":"sparql/core/dev.tesserakt.sparql.types/-filter/-regex/mode.html","searchKeys":["mode","val mode: String","dev.tesserakt.sparql.types.Filter.Regex.mode"]},{"name":"val name: String","description":"dev.tesserakt.sparql.types.Binding.name","location":"sparql/core/dev.tesserakt.sparql.types/-binding/name.html","searchKeys":["name","val name: String","dev.tesserakt.sparql.types.Binding.name"]},{"name":"val name: String","description":"dev.tesserakt.sparql.types.Expression.BindingValues.name","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-binding-values/name.html","searchKeys":["name","val name: String","dev.tesserakt.sparql.types.Expression.BindingValues.name"]},{"name":"val name: String","description":"dev.tesserakt.sparql.types.Expression.FuncCall.name","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-func-call/name.html","searchKeys":["name","val name: String","dev.tesserakt.sparql.types.Expression.FuncCall.name"]},{"name":"val o: TriplePattern.Object","description":"dev.tesserakt.sparql.types.TriplePattern.o","location":"sparql/core/dev.tesserakt.sparql.types/-triple-pattern/o.html","searchKeys":["o","val o: TriplePattern.Object","dev.tesserakt.sparql.types.TriplePattern.o"]},{"name":"val operator: Expression.Comparison.Operator","description":"dev.tesserakt.sparql.types.Expression.Comparison.operator","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-comparison/operator.html","searchKeys":["operator","val operator: Expression.Comparison.Operator","dev.tesserakt.sparql.types.Expression.Comparison.operator"]},{"name":"val operator: Expression.MathOp.Operator","description":"dev.tesserakt.sparql.types.Expression.MathOp.operator","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-math-op/operator.html","searchKeys":["operator","val operator: Expression.MathOp.Operator","dev.tesserakt.sparql.types.Expression.MathOp.operator"]},{"name":"val optional: List<Optional>","description":"dev.tesserakt.sparql.types.GraphPattern.optional","location":"sparql/core/dev.tesserakt.sparql.types/-graph-pattern/optional.html","searchKeys":["optional","val optional: List<Optional>","dev.tesserakt.sparql.types.GraphPattern.optional"]},{"name":"val ordering: Expression?","description":"dev.tesserakt.sparql.types.SelectQueryStructure.ordering","location":"sparql/core/dev.tesserakt.sparql.types/-select-query-structure/ordering.html","searchKeys":["ordering","val ordering: Expression?","dev.tesserakt.sparql.types.SelectQueryStructure.ordering"]},{"name":"val output: List<SelectQueryStructure.Output>?","description":"dev.tesserakt.sparql.types.SelectQueryStructure.output","location":"sparql/core/dev.tesserakt.sparql.types/-select-query-structure/output.html","searchKeys":["output","val output: List<SelectQueryStructure.Output>?","dev.tesserakt.sparql.types.SelectQueryStructure.output"]},{"name":"val p: TriplePattern.Predicate","description":"dev.tesserakt.sparql.types.TriplePattern.p","location":"sparql/core/dev.tesserakt.sparql.types/-triple-pattern/p.html","searchKeys":["p","val p: TriplePattern.Predicate","dev.tesserakt.sparql.types.TriplePattern.p"]},{"name":"val pattern: GraphPattern","description":"dev.tesserakt.sparql.types.Filter.Exists.pattern","location":"sparql/core/dev.tesserakt.sparql.types/-filter/-exists/pattern.html","searchKeys":["pattern","val pattern: GraphPattern","dev.tesserakt.sparql.types.Filter.Exists.pattern"]},{"name":"val pattern: GraphPattern","description":"dev.tesserakt.sparql.types.Filter.NotExists.pattern","location":"sparql/core/dev.tesserakt.sparql.types/-filter/-not-exists/pattern.html","searchKeys":["pattern","val pattern: GraphPattern","dev.tesserakt.sparql.types.Filter.NotExists.pattern"]},{"name":"val pattern: GraphPattern","description":"dev.tesserakt.sparql.types.GraphPatternSegment.pattern","location":"sparql/core/dev.tesserakt.sparql.types/-graph-pattern-segment/pattern.html","searchKeys":["pattern","val pattern: GraphPattern","dev.tesserakt.sparql.types.GraphPatternSegment.pattern"]},{"name":"val patterns: TriplePatternSet","description":"dev.tesserakt.sparql.types.GraphPattern.patterns","location":"sparql/core/dev.tesserakt.sparql.types/-graph-pattern/patterns.html","searchKeys":["patterns","val patterns: TriplePatternSet","dev.tesserakt.sparql.types.GraphPattern.patterns"]},{"name":"val query: SelectQueryStructure","description":"dev.tesserakt.sparql.types.SelectQuerySegment.query","location":"sparql/core/dev.tesserakt.sparql.types/-select-query-segment/query.html","searchKeys":["query","val query: SelectQueryStructure","dev.tesserakt.sparql.types.SelectQuerySegment.query"]},{"name":"val regex: String","description":"dev.tesserakt.sparql.types.Filter.Regex.regex","location":"sparql/core/dev.tesserakt.sparql.types/-filter/-regex/regex.html","searchKeys":["regex","val regex: String","dev.tesserakt.sparql.types.Filter.Regex.regex"]},{"name":"val rhs: Expression","description":"dev.tesserakt.sparql.types.Expression.Comparison.rhs","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-comparison/rhs.html","searchKeys":["rhs","val rhs: Expression","dev.tesserakt.sparql.types.Expression.Comparison.rhs"]},{"name":"val rhs: Expression","description":"dev.tesserakt.sparql.types.Expression.MathOp.rhs","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-math-op/rhs.html","searchKeys":["rhs","val rhs: Expression","dev.tesserakt.sparql.types.Expression.MathOp.rhs"]},{"name":"val s: TriplePattern.Subject","description":"dev.tesserakt.sparql.types.TriplePattern.s","location":"sparql/core/dev.tesserakt.sparql.types/-triple-pattern/s.html","searchKeys":["s","val s: TriplePattern.Subject","dev.tesserakt.sparql.types.TriplePattern.s"]},{"name":"val segment: Segment","description":"dev.tesserakt.sparql.types.Optional.segment","location":"sparql/core/dev.tesserakt.sparql.types/-optional/segment.html","searchKeys":["segment","val segment: Segment","dev.tesserakt.sparql.types.Optional.segment"]},{"name":"val segments: List<Segment>","description":"dev.tesserakt.sparql.types.Union.segments","location":"sparql/core/dev.tesserakt.sparql.types/-union/segments.html","searchKeys":["segments","val segments: List<Segment>","dev.tesserakt.sparql.types.Union.segments"]},{"name":"val sign: Char","description":"dev.tesserakt.sparql.types.Expression.MathOp.Operator.sign","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-math-op/-operator/sign.html","searchKeys":["sign","val sign: Char","dev.tesserakt.sparql.types.Expression.MathOp.Operator.sign"]},{"name":"val target: Binding","description":"dev.tesserakt.sparql.types.Aggregation.target","location":"sparql/core/dev.tesserakt.sparql.types/-aggregation/target.html","searchKeys":["target","val target: Binding","dev.tesserakt.sparql.types.Aggregation.target"]},{"name":"val target: Binding","description":"dev.tesserakt.sparql.types.BindingStatement.target","location":"sparql/core/dev.tesserakt.sparql.types/-binding-statement/target.html","searchKeys":["target","val target: Binding","dev.tesserakt.sparql.types.BindingStatement.target"]},{"name":"val target: String","description":"dev.tesserakt.sparql.types.Expression.BindingStatement.target","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-binding-statement/target.html","searchKeys":["target","val target: String","dev.tesserakt.sparql.types.Expression.BindingStatement.target"]},{"name":"val term: Quad.Term","description":"dev.tesserakt.sparql.types.TriplePattern.Exact.term","location":"sparql/core/dev.tesserakt.sparql.types/-triple-pattern/-exact/term.html","searchKeys":["term","val term: Quad.Term","dev.tesserakt.sparql.types.TriplePattern.Exact.term"]},{"name":"val terms: TriplePattern.SimpleAlts","description":"dev.tesserakt.sparql.types.TriplePattern.Negated.terms","location":"sparql/core/dev.tesserakt.sparql.types/-triple-pattern/-negated/terms.html","searchKeys":["terms","val terms: TriplePattern.SimpleAlts","dev.tesserakt.sparql.types.TriplePattern.Negated.terms"]},{"name":"val type: Expression.BindingAggregate.Type","description":"dev.tesserakt.sparql.types.Expression.BindingAggregate.type","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-binding-aggregate/type.html","searchKeys":["type","val type: Expression.BindingAggregate.Type","dev.tesserakt.sparql.types.Expression.BindingAggregate.type"]},{"name":"val unions: List<Union>","description":"dev.tesserakt.sparql.types.GraphPattern.unions","location":"sparql/core/dev.tesserakt.sparql.types/-graph-pattern/unions.html","searchKeys":["unions","val unions: List<Union>","dev.tesserakt.sparql.types.GraphPattern.unions"]},{"name":"val value: Expression","description":"dev.tesserakt.sparql.types.Expression.Negative.value","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-negative/value.html","searchKeys":["value","val value: Expression","dev.tesserakt.sparql.types.Expression.Negative.value"]},{"name":"val value: Number","description":"dev.tesserakt.sparql.types.Expression.NumericLiteralValue.value","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-numeric-literal-value/value.html","searchKeys":["value","val value: Number","dev.tesserakt.sparql.types.Expression.NumericLiteralValue.value"]},{"name":"val value: String","description":"dev.tesserakt.sparql.types.Expression.StringLiteralValue.value","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-string-literal-value/value.html","searchKeys":["value","val value: String","dev.tesserakt.sparql.types.Expression.StringLiteralValue.value"]},{"name":"value class Alts(val allowed: List<TriplePattern.UnboundPredicate>) : TriplePattern.UnboundPredicate","description":"dev.tesserakt.sparql.types.TriplePattern.Alts","location":"sparql/core/dev.tesserakt.sparql.types/-triple-pattern/-alts/index.html","searchKeys":["Alts","value class Alts(val allowed: List<TriplePattern.UnboundPredicate>) : TriplePattern.UnboundPredicate","dev.tesserakt.sparql.types.TriplePattern.Alts"]},{"name":"value class Binding(val name: String)","description":"dev.tesserakt.sparql.types.Binding","location":"sparql/core/dev.tesserakt.sparql.types/-binding/index.html","searchKeys":["Binding","value class Binding(val name: String)","dev.tesserakt.sparql.types.Binding"]},{"name":"value class BindingValues(val name: String) : Expression","description":"dev.tesserakt.sparql.types.Expression.BindingValues","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-binding-values/index.html","searchKeys":["BindingValues","value class BindingValues(val name: String) : Expression","dev.tesserakt.sparql.types.Expression.BindingValues"]},{"name":"value class Exact(val term: Quad.Term) : TriplePattern.Subject, TriplePattern.UnboundPredicate, TriplePattern.StatelessPredicate, TriplePattern.Object","description":"dev.tesserakt.sparql.types.TriplePattern.Exact","location":"sparql/core/dev.tesserakt.sparql.types/-triple-pattern/-exact/index.html","searchKeys":["Exact","value class Exact(val term: Quad.Term) : TriplePattern.Subject, TriplePattern.UnboundPredicate, TriplePattern.StatelessPredicate, TriplePattern.Object","dev.tesserakt.sparql.types.TriplePattern.Exact"]},{"name":"value class Exists(val pattern: GraphPattern) : Filter","description":"dev.tesserakt.sparql.types.Filter.Exists","location":"sparql/core/dev.tesserakt.sparql.types/-filter/-exists/index.html","searchKeys":["Exists","value class Exists(val pattern: GraphPattern) : Filter","dev.tesserakt.sparql.types.Filter.Exists"]},{"name":"value class GeneratedBinding(val id: Int) : TriplePattern.Binding","description":"dev.tesserakt.sparql.types.TriplePattern.GeneratedBinding","location":"sparql/core/dev.tesserakt.sparql.types/-triple-pattern/-generated-binding/index.html","searchKeys":["GeneratedBinding","value class GeneratedBinding(val id: Int) : TriplePattern.Binding","dev.tesserakt.sparql.types.TriplePattern.GeneratedBinding"]},{"name":"value class GraphPatternSegment(val pattern: GraphPattern) : Segment, QueryAtom","description":"dev.tesserakt.sparql.types.GraphPatternSegment","location":"sparql/core/dev.tesserakt.sparql.types/-graph-pattern-segment/index.html","searchKeys":["GraphPatternSegment","value class GraphPatternSegment(val pattern: GraphPattern) : Segment, QueryAtom","dev.tesserakt.sparql.types.GraphPatternSegment"]},{"name":"value class NamedBinding(val name: String) : TriplePattern.Binding","description":"dev.tesserakt.sparql.types.TriplePattern.NamedBinding","location":"sparql/core/dev.tesserakt.sparql.types/-triple-pattern/-named-binding/index.html","searchKeys":["NamedBinding","value class NamedBinding(val name: String) : TriplePattern.Binding","dev.tesserakt.sparql.types.TriplePattern.NamedBinding"]},{"name":"value class Negated(val terms: TriplePattern.SimpleAlts) : TriplePattern.UnboundPredicate, TriplePattern.StatelessPredicate","description":"dev.tesserakt.sparql.types.TriplePattern.Negated","location":"sparql/core/dev.tesserakt.sparql.types/-triple-pattern/-negated/index.html","searchKeys":["Negated","value class Negated(val terms: TriplePattern.SimpleAlts) : TriplePattern.UnboundPredicate, TriplePattern.StatelessPredicate","dev.tesserakt.sparql.types.TriplePattern.Negated"]},{"name":"value class Negative(val value: Expression) : Expression","description":"dev.tesserakt.sparql.types.Expression.Negative","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-negative/index.html","searchKeys":["Negative","value class Negative(val value: Expression) : Expression","dev.tesserakt.sparql.types.Expression.Negative"]},{"name":"value class NotExists(val pattern: GraphPattern) : Filter","description":"dev.tesserakt.sparql.types.Filter.NotExists","location":"sparql/core/dev.tesserakt.sparql.types/-filter/-not-exists/index.html","searchKeys":["NotExists","value class NotExists(val pattern: GraphPattern) : Filter","dev.tesserakt.sparql.types.Filter.NotExists"]},{"name":"value class NumericLiteralValue(val value: Number) : Expression","description":"dev.tesserakt.sparql.types.Expression.NumericLiteralValue","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-numeric-literal-value/index.html","searchKeys":["NumericLiteralValue","value class NumericLiteralValue(val value: Number) : Expression","dev.tesserakt.sparql.types.Expression.NumericLiteralValue"]},{"name":"value class OneOrMore(val element: TriplePattern.UnboundPredicate) : TriplePattern.RepeatingPredicate, TriplePattern.UnboundPredicate","description":"dev.tesserakt.sparql.types.TriplePattern.OneOrMore","location":"sparql/core/dev.tesserakt.sparql.types/-triple-pattern/-one-or-more/index.html","searchKeys":["OneOrMore","value class OneOrMore(val element: TriplePattern.UnboundPredicate) : TriplePattern.RepeatingPredicate, TriplePattern.UnboundPredicate","dev.tesserakt.sparql.types.TriplePattern.OneOrMore"]},{"name":"value class Optional(val segment: Segment) : QueryAtom","description":"dev.tesserakt.sparql.types.Optional","location":"sparql/core/dev.tesserakt.sparql.types/-optional/index.html","searchKeys":["Optional","value class Optional(val segment: Segment) : QueryAtom","dev.tesserakt.sparql.types.Optional"]},{"name":"value class Predicate(val expression: Expression.Comparison) : Filter","description":"dev.tesserakt.sparql.types.Filter.Predicate","location":"sparql/core/dev.tesserakt.sparql.types/-filter/-predicate/index.html","searchKeys":["Predicate","value class Predicate(val expression: Expression.Comparison) : Filter","dev.tesserakt.sparql.types.Filter.Predicate"]},{"name":"value class SelectQuerySegment(val query: SelectQueryStructure) : Segment, QueryAtom","description":"dev.tesserakt.sparql.types.SelectQuerySegment","location":"sparql/core/dev.tesserakt.sparql.types/-select-query-segment/index.html","searchKeys":["SelectQuerySegment","value class SelectQuerySegment(val query: SelectQueryStructure) : Segment, QueryAtom","dev.tesserakt.sparql.types.SelectQuerySegment"]},{"name":"value class Sequence(val chain: List<TriplePattern.Predicate>) : TriplePattern.Predicate","description":"dev.tesserakt.sparql.types.TriplePattern.Sequence","location":"sparql/core/dev.tesserakt.sparql.types/-triple-pattern/-sequence/index.html","searchKeys":["Sequence","value class Sequence(val chain: List<TriplePattern.Predicate>) : TriplePattern.Predicate","dev.tesserakt.sparql.types.TriplePattern.Sequence"]},{"name":"value class SimpleAlts(val allowed: List<TriplePattern.StatelessPredicate>) : TriplePattern.UnboundPredicate, TriplePattern.StatelessPredicate","description":"dev.tesserakt.sparql.types.TriplePattern.SimpleAlts","location":"sparql/core/dev.tesserakt.sparql.types/-triple-pattern/-simple-alts/index.html","searchKeys":["SimpleAlts","value class SimpleAlts(val allowed: List<TriplePattern.StatelessPredicate>) : TriplePattern.UnboundPredicate, TriplePattern.StatelessPredicate","dev.tesserakt.sparql.types.TriplePattern.SimpleAlts"]},{"name":"value class StringLiteralValue(val value: String) : Expression","description":"dev.tesserakt.sparql.types.Expression.StringLiteralValue","location":"sparql/core/dev.tesserakt.sparql.types/-expression/-string-literal-value/index.html","searchKeys":["StringLiteralValue","value class StringLiteralValue(val value: String) : Expression","dev.tesserakt.sparql.types.Expression.StringLiteralValue"]},{"name":"value class TriplePatternSet(items: List<TriplePattern>) : List<TriplePattern> , QueryAtom","description":"dev.tesserakt.sparql.types.TriplePatternSet","location":"sparql/core/dev.tesserakt.sparql.types/-triple-pattern-set/index.html","searchKeys":["TriplePatternSet","value class TriplePatternSet(items: List<TriplePattern>) : List<TriplePattern> , QueryAtom","dev.tesserakt.sparql.types.TriplePatternSet"]},{"name":"value class UnboundSequence(val chain: List<TriplePattern.UnboundPredicate>) : TriplePattern.UnboundPredicate","description":"dev.tesserakt.sparql.types.TriplePattern.UnboundSequence","location":"sparql/core/dev.tesserakt.sparql.types/-triple-pattern/-unbound-sequence/index.html","searchKeys":["UnboundSequence","value class UnboundSequence(val chain: List<TriplePattern.UnboundPredicate>) : TriplePattern.UnboundPredicate","dev.tesserakt.sparql.types.TriplePattern.UnboundSequence"]},{"name":"value class Union(val segments: List<Segment>) : List<Segment> , QueryAtom","description":"dev.tesserakt.sparql.types.Union","location":"sparql/core/dev.tesserakt.sparql.types/-union/index.html","searchKeys":["Union","value class Union(val segments: List<Segment>) : List<Segment> , QueryAtom","dev.tesserakt.sparql.types.Union"]},{"name":"value class ZeroOrMore(val element: TriplePattern.UnboundPredicate) : TriplePattern.RepeatingPredicate, TriplePattern.UnboundPredicate","description":"dev.tesserakt.sparql.types.TriplePattern.ZeroOrMore","location":"sparql/core/dev.tesserakt.sparql.types/-triple-pattern/-zero-or-more/index.html","searchKeys":["ZeroOrMore","value class ZeroOrMore(val element: TriplePattern.UnboundPredicate) : TriplePattern.RepeatingPredicate, TriplePattern.UnboundPredicate","dev.tesserakt.sparql.types.TriplePattern.ZeroOrMore"]},{"name":"BLACK","description":"dev.tesserakt.sparql.debug.Color.BLACK","location":"sparql/debugging/dev.tesserakt.sparql.debug/-color/-b-l-a-c-k/index.html","searchKeys":["BLACK","BLACK","dev.tesserakt.sparql.debug.Color.BLACK"]},{"name":"BLUE","description":"dev.tesserakt.sparql.debug.Color.BLUE","location":"sparql/debugging/dev.tesserakt.sparql.debug/-color/-b-l-u-e/index.html","searchKeys":["BLUE","BLUE","dev.tesserakt.sparql.debug.Color.BLUE"]},{"name":"BOLD","description":"dev.tesserakt.sparql.debug.Decoration.BOLD","location":"sparql/debugging/dev.tesserakt.sparql.debug/-decoration/-b-o-l-d/index.html","searchKeys":["BOLD","BOLD","dev.tesserakt.sparql.debug.Decoration.BOLD"]},{"name":"BRIGHT_BLACK","description":"dev.tesserakt.sparql.debug.Color.BRIGHT_BLACK","location":"sparql/debugging/dev.tesserakt.sparql.debug/-color/-b-r-i-g-h-t_-b-l-a-c-k/index.html","searchKeys":["BRIGHT_BLACK","BRIGHT_BLACK","dev.tesserakt.sparql.debug.Color.BRIGHT_BLACK"]},{"name":"BRIGHT_BLUE","description":"dev.tesserakt.sparql.debug.Color.BRIGHT_BLUE","location":"sparql/debugging/dev.tesserakt.sparql.debug/-color/-b-r-i-g-h-t_-b-l-u-e/index.html","searchKeys":["BRIGHT_BLUE","BRIGHT_BLUE","dev.tesserakt.sparql.debug.Color.BRIGHT_BLUE"]},{"name":"BRIGHT_CYAN","description":"dev.tesserakt.sparql.debug.Color.BRIGHT_CYAN","location":"sparql/debugging/dev.tesserakt.sparql.debug/-color/-b-r-i-g-h-t_-c-y-a-n/index.html","searchKeys":["BRIGHT_CYAN","BRIGHT_CYAN","dev.tesserakt.sparql.debug.Color.BRIGHT_CYAN"]},{"name":"BRIGHT_GREEN","description":"dev.tesserakt.sparql.debug.Color.BRIGHT_GREEN","location":"sparql/debugging/dev.tesserakt.sparql.debug/-color/-b-r-i-g-h-t_-g-r-e-e-n/index.html","searchKeys":["BRIGHT_GREEN","BRIGHT_GREEN","dev.tesserakt.sparql.debug.Color.BRIGHT_GREEN"]},{"name":"BRIGHT_MAGENTA","description":"dev.tesserakt.sparql.debug.Color.BRIGHT_MAGENTA","location":"sparql/debugging/dev.tesserakt.sparql.debug/-color/-b-r-i-g-h-t_-m-a-g-e-n-t-a/index.html","searchKeys":["BRIGHT_MAGENTA","BRIGHT_MAGENTA","dev.tesserakt.sparql.debug.Color.BRIGHT_MAGENTA"]},{"name":"BRIGHT_RED","description":"dev.tesserakt.sparql.debug.Color.BRIGHT_RED","location":"sparql/debugging/dev.tesserakt.sparql.debug/-color/-b-r-i-g-h-t_-r-e-d/index.html","searchKeys":["BRIGHT_RED","BRIGHT_RED","dev.tesserakt.sparql.debug.Color.BRIGHT_RED"]},{"name":"BRIGHT_WHITE","description":"dev.tesserakt.sparql.debug.Color.BRIGHT_WHITE","location":"sparql/debugging/dev.tesserakt.sparql.debug/-color/-b-r-i-g-h-t_-w-h-i-t-e/index.html","searchKeys":["BRIGHT_WHITE","BRIGHT_WHITE","dev.tesserakt.sparql.debug.Color.BRIGHT_WHITE"]},{"name":"BRIGHT_YELLOW","description":"dev.tesserakt.sparql.debug.Color.BRIGHT_YELLOW","location":"sparql/debugging/dev.tesserakt.sparql.debug/-color/-b-r-i-g-h-t_-y-e-l-l-o-w/index.html","searchKeys":["BRIGHT_YELLOW","BRIGHT_YELLOW","dev.tesserakt.sparql.debug.Color.BRIGHT_YELLOW"]},{"name":"CYAN","description":"dev.tesserakt.sparql.debug.Color.CYAN","location":"sparql/debugging/dev.tesserakt.sparql.debug/-color/-c-y-a-n/index.html","searchKeys":["CYAN","CYAN","dev.tesserakt.sparql.debug.Color.CYAN"]},{"name":"DEFAULT","description":"dev.tesserakt.sparql.debug.Color.DEFAULT","location":"sparql/debugging/dev.tesserakt.sparql.debug/-color/-d-e-f-a-u-l-t/index.html","searchKeys":["DEFAULT","DEFAULT","dev.tesserakt.sparql.debug.Color.DEFAULT"]},{"name":"GREEN","description":"dev.tesserakt.sparql.debug.Color.GREEN","location":"sparql/debugging/dev.tesserakt.sparql.debug/-color/-g-r-e-e-n/index.html","searchKeys":["GREEN","GREEN","dev.tesserakt.sparql.debug.Color.GREEN"]},{"name":"MAGENTA","description":"dev.tesserakt.sparql.debug.Color.MAGENTA","location":"sparql/debugging/dev.tesserakt.sparql.debug/-color/-m-a-g-e-n-t-a/index.html","searchKeys":["MAGENTA","MAGENTA","dev.tesserakt.sparql.debug.Color.MAGENTA"]},{"name":"NONE","description":"dev.tesserakt.sparql.debug.Decoration.NONE","location":"sparql/debugging/dev.tesserakt.sparql.debug/-decoration/-n-o-n-e/index.html","searchKeys":["NONE","NONE","dev.tesserakt.sparql.debug.Decoration.NONE"]},{"name":"RED","description":"dev.tesserakt.sparql.debug.Color.RED","location":"sparql/debugging/dev.tesserakt.sparql.debug/-color/-r-e-d/index.html","searchKeys":["RED","RED","dev.tesserakt.sparql.debug.Color.RED"]},{"name":"REVERSED","description":"dev.tesserakt.sparql.debug.Decoration.REVERSED","location":"sparql/debugging/dev.tesserakt.sparql.debug/-decoration/-r-e-v-e-r-s-e-d/index.html","searchKeys":["REVERSED","REVERSED","dev.tesserakt.sparql.debug.Decoration.REVERSED"]},{"name":"UNDERLINE","description":"dev.tesserakt.sparql.debug.Decoration.UNDERLINE","location":"sparql/debugging/dev.tesserakt.sparql.debug/-decoration/-u-n-d-e-r-l-i-n-e/index.html","searchKeys":["UNDERLINE","UNDERLINE","dev.tesserakt.sparql.debug.Decoration.UNDERLINE"]},{"name":"WHITE","description":"dev.tesserakt.sparql.debug.Color.WHITE","location":"sparql/debugging/dev.tesserakt.sparql.debug/-color/-w-h-i-t-e/index.html","searchKeys":["WHITE","WHITE","dev.tesserakt.sparql.debug.Color.WHITE"]},{"name":"YELLOW","description":"dev.tesserakt.sparql.debug.Color.YELLOW","location":"sparql/debugging/dev.tesserakt.sparql.debug/-color/-y-e-l-l-o-w/index.html","searchKeys":["YELLOW","YELLOW","dev.tesserakt.sparql.debug.Color.YELLOW"]},{"name":"abstract class QueryWriter<RT>","description":"dev.tesserakt.sparql.debug.QueryWriter","location":"sparql/debugging/dev.tesserakt.sparql.debug/-query-writer/index.html","searchKeys":["QueryWriter","abstract class QueryWriter<RT>","dev.tesserakt.sparql.debug.QueryWriter"]},{"name":"abstract fun write(element: QueryAtom): RT","description":"dev.tesserakt.sparql.debug.QueryWriter.write","location":"sparql/debugging/dev.tesserakt.sparql.debug/-query-writer/write.html","searchKeys":["write","abstract fun write(element: QueryAtom): RT","dev.tesserakt.sparql.debug.QueryWriter.write"]},{"name":"abstract val unicodeLength: Int","description":"dev.tesserakt.sparql.debug.StyleModifier.unicodeLength","location":"sparql/debugging/dev.tesserakt.sparql.debug/-style-modifier/unicode-length.html","searchKeys":["unicodeLength","abstract val unicodeLength: Int","dev.tesserakt.sparql.debug.StyleModifier.unicodeLength"]},{"name":"class ASTWriter(indentStyle: String = \"  \")","description":"dev.tesserakt.sparql.debug.ASTWriter","location":"sparql/debugging/dev.tesserakt.sparql.debug/-a-s-t-writer/index.html","searchKeys":["ASTWriter","class ASTWriter(indentStyle: String = \"  \")","dev.tesserakt.sparql.debug.ASTWriter"]},{"name":"class BindingsTable(_bindings: List<Bindings>) : Iterable<BindingsTable.Entry> ","description":"dev.tesserakt.sparql.debug.BindingsTable","location":"sparql/debugging/dev.tesserakt.sparql.debug/-bindings-table/index.html","searchKeys":["BindingsTable","class BindingsTable(_bindings: List<Bindings>) : Iterable<BindingsTable.Entry> ","dev.tesserakt.sparql.debug.BindingsTable"]},{"name":"class StylisedString","description":"dev.tesserakt.sparql.debug.StylisedString","location":"sparql/debugging/dev.tesserakt.sparql.debug/-stylised-string/index.html","searchKeys":["StylisedString","class StylisedString","dev.tesserakt.sparql.debug.StylisedString"]},{"name":"constructor()","description":"dev.tesserakt.sparql.debug.QueryWriter.QueryWriter","location":"sparql/debugging/dev.tesserakt.sparql.debug/-query-writer/-query-writer.html","searchKeys":["QueryWriter","constructor()","dev.tesserakt.sparql.debug.QueryWriter.QueryWriter"]},{"name":"constructor()","description":"dev.tesserakt.sparql.debug.StylisedString.StylisedString","location":"sparql/debugging/dev.tesserakt.sparql.debug/-stylised-string/-stylised-string.html","searchKeys":["StylisedString","constructor()","dev.tesserakt.sparql.debug.StylisedString.StylisedString"]},{"name":"constructor(_bindings: List<Bindings>)","description":"dev.tesserakt.sparql.debug.BindingsTable.BindingsTable","location":"sparql/debugging/dev.tesserakt.sparql.debug/-bindings-table/-bindings-table.html","searchKeys":["BindingsTable","constructor(_bindings: List<Bindings>)","dev.tesserakt.sparql.debug.BindingsTable.BindingsTable"]},{"name":"constructor(content: StringBuilder = StringBuilder(), indent: Int = 0)","description":"dev.tesserakt.sparql.debug.ASTWriter.State.State","location":"sparql/debugging/dev.tesserakt.sparql.debug/-a-s-t-writer/-state/-state.html","searchKeys":["State","constructor(content: StringBuilder = StringBuilder(), indent: Int = 0)","dev.tesserakt.sparql.debug.ASTWriter.State.State"]},{"name":"constructor(content: StringBuilder = StringBuilder(), indent: Int = 0)","description":"dev.tesserakt.sparql.debug.QueryWriter.Default.State.State","location":"sparql/debugging/dev.tesserakt.sparql.debug/-query-writer/-default/-state/-state.html","searchKeys":["State","constructor(content: StringBuilder = StringBuilder(), indent: Int = 0)","dev.tesserakt.sparql.debug.QueryWriter.Default.State.State"]},{"name":"constructor(content: StylisedString = StylisedString(), indent: Int = 0)","description":"dev.tesserakt.sparql.debug.StylisedWriter.State.State","location":"sparql/debugging/dev.tesserakt.sparql.debug/-stylised-writer/-state/-state.html","searchKeys":["State","constructor(content: StylisedString = StylisedString(), indent: Int = 0)","dev.tesserakt.sparql.debug.StylisedWriter.State.State"]},{"name":"constructor(indentStyle: String = \"  \")","description":"dev.tesserakt.sparql.debug.ASTWriter.ASTWriter","location":"sparql/debugging/dev.tesserakt.sparql.debug/-a-s-t-writer/-a-s-t-writer.html","searchKeys":["ASTWriter","constructor(indentStyle: String = \"  \")","dev.tesserakt.sparql.debug.ASTWriter.ASTWriter"]},{"name":"constructor(text: String, color: Color = Color.DEFAULT, vararg decoration: Decoration)","description":"dev.tesserakt.sparql.debug.StylisedString.StylisedString","location":"sparql/debugging/dev.tesserakt.sparql.debug/-stylised-string/-stylised-string.html","searchKeys":["StylisedString","constructor(text: String, color: Color = Color.DEFAULT, vararg decoration: Decoration)","dev.tesserakt.sparql.debug.StylisedString.StylisedString"]},{"name":"data class State(val content: StringBuilder = StringBuilder(), var indent: Int = 0)","description":"dev.tesserakt.sparql.debug.ASTWriter.State","location":"sparql/debugging/dev.tesserakt.sparql.debug/-a-s-t-writer/-state/index.html","searchKeys":["State","data class State(val content: StringBuilder = StringBuilder(), var indent: Int = 0)","dev.tesserakt.sparql.debug.ASTWriter.State"]},{"name":"data class State(val content: StringBuilder = StringBuilder(), var indent: Int = 0)","description":"dev.tesserakt.sparql.debug.QueryWriter.Default.State","location":"sparql/debugging/dev.tesserakt.sparql.debug/-query-writer/-default/-state/index.html","searchKeys":["State","data class State(val content: StringBuilder = StringBuilder(), var indent: Int = 0)","dev.tesserakt.sparql.debug.QueryWriter.Default.State"]},{"name":"data class State(val content: StylisedString = StylisedString(), var indent: Int = 0)","description":"dev.tesserakt.sparql.debug.StylisedWriter.State","location":"sparql/debugging/dev.tesserakt.sparql.debug/-stylised-writer/-state/index.html","searchKeys":["State","data class State(val content: StylisedString = StylisedString(), var indent: Int = 0)","dev.tesserakt.sparql.debug.StylisedWriter.State"]},{"name":"enum Color : Enum<Color> , StyleModifier","description":"dev.tesserakt.sparql.debug.Color","location":"sparql/debugging/dev.tesserakt.sparql.debug/-color/index.html","searchKeys":["Color","enum Color : Enum<Color> , StyleModifier","dev.tesserakt.sparql.debug.Color"]},{"name":"enum Decoration : Enum<Decoration> , StyleModifier","description":"dev.tesserakt.sparql.debug.Decoration","location":"sparql/debugging/dev.tesserakt.sparql.debug/-decoration/index.html","searchKeys":["Decoration","enum Decoration : Enum<Decoration> , StyleModifier","dev.tesserakt.sparql.debug.Decoration"]},{"name":"fun BindingsTable.toStylisedString(): StylisedString","description":"dev.tesserakt.sparql.debug.toStylisedString","location":"sparql/debugging/dev.tesserakt.sparql.debug/to-stylised-string.html","searchKeys":["toStylisedString","fun BindingsTable.toStylisedString(): StylisedString","dev.tesserakt.sparql.debug.toStylisedString"]},{"name":"fun Collection<Bindings>.tabulate(): BindingsTable","description":"dev.tesserakt.sparql.debug.BindingsTable.Companion.tabulate","location":"sparql/debugging/dev.tesserakt.sparql.debug/-bindings-table/-companion/tabulate.html","searchKeys":["tabulate","fun Collection<Bindings>.tabulate(): BindingsTable","dev.tesserakt.sparql.debug.BindingsTable.Companion.tabulate"]},{"name":"fun add(char: Char): StylisedString","description":"dev.tesserakt.sparql.debug.StylisedString.add","location":"sparql/debugging/dev.tesserakt.sparql.debug/-stylised-string/add.html","searchKeys":["add","fun add(char: Char): StylisedString","dev.tesserakt.sparql.debug.StylisedString.add"]},{"name":"fun add(stylisedString: StylisedString): StylisedString","description":"dev.tesserakt.sparql.debug.StylisedString.add","location":"sparql/debugging/dev.tesserakt.sparql.debug/-stylised-string/add.html","searchKeys":["add","fun add(stylisedString: StylisedString): StylisedString","dev.tesserakt.sparql.debug.StylisedString.add"]},{"name":"fun add(text: String): StylisedString","description":"dev.tesserakt.sparql.debug.StylisedString.add","location":"sparql/debugging/dev.tesserakt.sparql.debug/-stylised-string/add.html","searchKeys":["add","fun add(text: String): StylisedString","dev.tesserakt.sparql.debug.StylisedString.add"]},{"name":"fun add(text: String, color: Color, vararg decoration: Decoration): StylisedString","description":"dev.tesserakt.sparql.debug.StylisedString.add","location":"sparql/debugging/dev.tesserakt.sparql.debug/-stylised-string/add.html","searchKeys":["add","fun add(text: String, color: Color, vararg decoration: Decoration): StylisedString","dev.tesserakt.sparql.debug.StylisedString.add"]},{"name":"fun add(text: String, decoration: Decoration, vararg extra: Decoration): StylisedString","description":"dev.tesserakt.sparql.debug.StylisedString.add","location":"sparql/debugging/dev.tesserakt.sparql.debug/-stylised-string/add.html","searchKeys":["add","fun add(text: String, decoration: Decoration, vararg extra: Decoration): StylisedString","dev.tesserakt.sparql.debug.StylisedString.add"]},{"name":"fun clear()","description":"dev.tesserakt.sparql.debug.ASTWriter.State.clear","location":"sparql/debugging/dev.tesserakt.sparql.debug/-a-s-t-writer/-state/clear.html","searchKeys":["clear","fun clear()","dev.tesserakt.sparql.debug.ASTWriter.State.clear"]},{"name":"fun clear()","description":"dev.tesserakt.sparql.debug.QueryWriter.Default.State.clear","location":"sparql/debugging/dev.tesserakt.sparql.debug/-query-writer/-default/-state/clear.html","searchKeys":["clear","fun clear()","dev.tesserakt.sparql.debug.QueryWriter.Default.State.clear"]},{"name":"fun clear()","description":"dev.tesserakt.sparql.debug.StylisedString.clear","location":"sparql/debugging/dev.tesserakt.sparql.debug/-stylised-string/clear.html","searchKeys":["clear","fun clear()","dev.tesserakt.sparql.debug.StylisedString.clear"]},{"name":"fun clear()","description":"dev.tesserakt.sparql.debug.StylisedWriter.State.clear","location":"sparql/debugging/dev.tesserakt.sparql.debug/-stylised-writer/-state/clear.html","searchKeys":["clear","fun clear()","dev.tesserakt.sparql.debug.StylisedWriter.State.clear"]},{"name":"fun order(vararg name: String)","description":"dev.tesserakt.sparql.debug.BindingsTable.order","location":"sparql/debugging/dev.tesserakt.sparql.debug/-bindings-table/order.html","searchKeys":["order","fun order(vararg name: String)","dev.tesserakt.sparql.debug.BindingsTable.order"]},{"name":"fun take(n: Int): StylisedString","description":"dev.tesserakt.sparql.debug.StylisedString.take","location":"sparql/debugging/dev.tesserakt.sparql.debug/-stylised-string/take.html","searchKeys":["take","fun take(n: Int): StylisedString","dev.tesserakt.sparql.debug.StylisedString.take"]},{"name":"fun valueOf(value: String): Color","description":"dev.tesserakt.sparql.debug.Color.valueOf","location":"sparql/debugging/dev.tesserakt.sparql.debug/-color/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): Color","dev.tesserakt.sparql.debug.Color.valueOf"]},{"name":"fun valueOf(value: String): Decoration","description":"dev.tesserakt.sparql.debug.Decoration.valueOf","location":"sparql/debugging/dev.tesserakt.sparql.debug/-decoration/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): Decoration","dev.tesserakt.sparql.debug.Decoration.valueOf"]},{"name":"fun values(): Array<Color>","description":"dev.tesserakt.sparql.debug.Color.values","location":"sparql/debugging/dev.tesserakt.sparql.debug/-color/values.html","searchKeys":["values","fun values(): Array<Color>","dev.tesserakt.sparql.debug.Color.values"]},{"name":"fun values(): Array<Decoration>","description":"dev.tesserakt.sparql.debug.Decoration.values","location":"sparql/debugging/dev.tesserakt.sparql.debug/-decoration/values.html","searchKeys":["values","fun values(): Array<Decoration>","dev.tesserakt.sparql.debug.Decoration.values"]},{"name":"fun write(ast: QueryAtom): String","description":"dev.tesserakt.sparql.debug.ASTWriter.write","location":"sparql/debugging/dev.tesserakt.sparql.debug/-a-s-t-writer/write.html","searchKeys":["write","fun write(ast: QueryAtom): String","dev.tesserakt.sparql.debug.ASTWriter.write"]},{"name":"inline fun Quad.Term.toStylisedString(): StylisedString","description":"dev.tesserakt.sparql.debug.toStylisedString","location":"sparql/debugging/dev.tesserakt.sparql.debug/to-stylised-string.html","searchKeys":["toStylisedString","inline fun Quad.Term.toStylisedString(): StylisedString","dev.tesserakt.sparql.debug.toStylisedString"]},{"name":"inline fun Quad.toStylisedString(): StylisedString","description":"dev.tesserakt.sparql.debug.toStylisedString","location":"sparql/debugging/dev.tesserakt.sparql.debug/to-stylised-string.html","searchKeys":["toStylisedString","inline fun Quad.toStylisedString(): StylisedString","dev.tesserakt.sparql.debug.toStylisedString"]},{"name":"inline fun String.bold(): StylisedString","description":"dev.tesserakt.sparql.debug.bold","location":"sparql/debugging/dev.tesserakt.sparql.debug/bold.html","searchKeys":["bold","inline fun String.bold(): StylisedString","dev.tesserakt.sparql.debug.bold"]},{"name":"inline fun String.stylise(color: Color, vararg decoration: Decoration): StylisedString","description":"dev.tesserakt.sparql.debug.stylise","location":"sparql/debugging/dev.tesserakt.sparql.debug/stylise.html","searchKeys":["stylise","inline fun String.stylise(color: Color, vararg decoration: Decoration): StylisedString","dev.tesserakt.sparql.debug.stylise"]},{"name":"inline fun String.stylise(decoration: Decoration, vararg extra: Decoration): StylisedString","description":"dev.tesserakt.sparql.debug.stylise","location":"sparql/debugging/dev.tesserakt.sparql.debug/stylise.html","searchKeys":["stylise","inline fun String.stylise(decoration: Decoration, vararg extra: Decoration): StylisedString","dev.tesserakt.sparql.debug.stylise"]},{"name":"inline fun StylisedString.fit(exactLength: Int, overflow: String = \"...\", extend: String = \" \"): StylisedString","description":"dev.tesserakt.sparql.debug.fit","location":"sparql/debugging/dev.tesserakt.sparql.debug/fit.html","searchKeys":["fit","inline fun StylisedString.fit(exactLength: Int, overflow: String = \"...\", extend: String = \" \"): StylisedString","dev.tesserakt.sparql.debug.fit"]},{"name":"inline fun StylisedString.truncate(maxLength: Int, overflow: String = \"...\"): StylisedString","description":"dev.tesserakt.sparql.debug.truncate","location":"sparql/debugging/dev.tesserakt.sparql.debug/truncate.html","searchKeys":["truncate","inline fun StylisedString.truncate(maxLength: Int, overflow: String = \"...\"): StylisedString","dev.tesserakt.sparql.debug.truncate"]},{"name":"inline fun buildStylisedString(block: StylisedString.() -> Unit): StylisedString","description":"dev.tesserakt.sparql.debug.buildStylisedString","location":"sparql/debugging/dev.tesserakt.sparql.debug/build-stylised-string.html","searchKeys":["buildStylisedString","inline fun buildStylisedString(block: StylisedString.() -> Unit): StylisedString","dev.tesserakt.sparql.debug.buildStylisedString"]},{"name":"inner class Entry : Iterable<Quad.Term?> ","description":"dev.tesserakt.sparql.debug.BindingsTable.Entry","location":"sparql/debugging/dev.tesserakt.sparql.debug/-bindings-table/-entry/index.html","searchKeys":["Entry","inner class Entry : Iterable<Quad.Term?> ","dev.tesserakt.sparql.debug.BindingsTable.Entry"]},{"name":"object Companion","description":"dev.tesserakt.sparql.debug.BindingsTable.Companion","location":"sparql/debugging/dev.tesserakt.sparql.debug/-bindings-table/-companion/index.html","searchKeys":["Companion","object Companion","dev.tesserakt.sparql.debug.BindingsTable.Companion"]},{"name":"object Companion","description":"dev.tesserakt.sparql.debug.StylisedString.Companion","location":"sparql/debugging/dev.tesserakt.sparql.debug/-stylised-string/-companion/index.html","searchKeys":["Companion","object Companion","dev.tesserakt.sparql.debug.StylisedString.Companion"]},{"name":"object Default : QueryWriter<String> ","description":"dev.tesserakt.sparql.debug.QueryWriter.Default","location":"sparql/debugging/dev.tesserakt.sparql.debug/-query-writer/-default/index.html","searchKeys":["Default","object Default : QueryWriter<String> ","dev.tesserakt.sparql.debug.QueryWriter.Default"]},{"name":"object StylisedWriter : QueryWriter<String> ","description":"dev.tesserakt.sparql.debug.StylisedWriter","location":"sparql/debugging/dev.tesserakt.sparql.debug/-stylised-writer/index.html","searchKeys":["StylisedWriter","object StylisedWriter : QueryWriter<String> ","dev.tesserakt.sparql.debug.StylisedWriter"]},{"name":"open operator override fun iterator(): Iterator<BindingsTable.Entry>","description":"dev.tesserakt.sparql.debug.BindingsTable.iterator","location":"sparql/debugging/dev.tesserakt.sparql.debug/-bindings-table/iterator.html","searchKeys":["iterator","open operator override fun iterator(): Iterator<BindingsTable.Entry>","dev.tesserakt.sparql.debug.BindingsTable.iterator"]},{"name":"open operator override fun iterator(): Iterator<Quad.Term?>","description":"dev.tesserakt.sparql.debug.BindingsTable.Entry.iterator","location":"sparql/debugging/dev.tesserakt.sparql.debug/-bindings-table/-entry/iterator.html","searchKeys":["iterator","open operator override fun iterator(): Iterator<Quad.Term?>","dev.tesserakt.sparql.debug.BindingsTable.Entry.iterator"]},{"name":"open override fun toString(): String","description":"dev.tesserakt.sparql.debug.BindingsTable.toString","location":"sparql/debugging/dev.tesserakt.sparql.debug/-bindings-table/to-string.html","searchKeys":["toString","open override fun toString(): String","dev.tesserakt.sparql.debug.BindingsTable.toString"]},{"name":"open override fun toString(): String","description":"dev.tesserakt.sparql.debug.StylisedString.toString","location":"sparql/debugging/dev.tesserakt.sparql.debug/-stylised-string/to-string.html","searchKeys":["toString","open override fun toString(): String","dev.tesserakt.sparql.debug.StylisedString.toString"]},{"name":"open override fun write(element: QueryAtom): String","description":"dev.tesserakt.sparql.debug.QueryWriter.Default.write","location":"sparql/debugging/dev.tesserakt.sparql.debug/-query-writer/-default/write.html","searchKeys":["write","open override fun write(element: QueryAtom): String","dev.tesserakt.sparql.debug.QueryWriter.Default.write"]},{"name":"open override fun write(element: QueryAtom): String","description":"dev.tesserakt.sparql.debug.StylisedWriter.write","location":"sparql/debugging/dev.tesserakt.sparql.debug/-stylised-writer/write.html","searchKeys":["write","open override fun write(element: QueryAtom): String","dev.tesserakt.sparql.debug.StylisedWriter.write"]},{"name":"open override val unicodeLength: Int","description":"dev.tesserakt.sparql.debug.Color.unicodeLength","location":"sparql/debugging/dev.tesserakt.sparql.debug/-color/unicode-length.html","searchKeys":["unicodeLength","open override val unicodeLength: Int","dev.tesserakt.sparql.debug.Color.unicodeLength"]},{"name":"open override val unicodeLength: Int","description":"dev.tesserakt.sparql.debug.Decoration.unicodeLength","location":"sparql/debugging/dev.tesserakt.sparql.debug/-decoration/unicode-length.html","searchKeys":["unicodeLength","open override val unicodeLength: Int","dev.tesserakt.sparql.debug.Decoration.unicodeLength"]},{"name":"operator fun get(index: Int, name: String): Quad.Term?","description":"dev.tesserakt.sparql.debug.BindingsTable.get","location":"sparql/debugging/dev.tesserakt.sparql.debug/-bindings-table/get.html","searchKeys":["get","operator fun get(index: Int, name: String): Quad.Term?","dev.tesserakt.sparql.debug.BindingsTable.get"]},{"name":"operator fun get(name: String): Quad.Term?","description":"dev.tesserakt.sparql.debug.BindingsTable.Entry.get","location":"sparql/debugging/dev.tesserakt.sparql.debug/-bindings-table/-entry/get.html","searchKeys":["get","operator fun get(name: String): Quad.Term?","dev.tesserakt.sparql.debug.BindingsTable.Entry.get"]},{"name":"operator fun plus(char: Char): StylisedString","description":"dev.tesserakt.sparql.debug.StylisedString.plus","location":"sparql/debugging/dev.tesserakt.sparql.debug/-stylised-string/plus.html","searchKeys":["plus","operator fun plus(char: Char): StylisedString","dev.tesserakt.sparql.debug.StylisedString.plus"]},{"name":"operator fun plus(text: String): StylisedString","description":"dev.tesserakt.sparql.debug.StylisedString.plus","location":"sparql/debugging/dev.tesserakt.sparql.debug/-stylised-string/plus.html","searchKeys":["plus","operator fun plus(text: String): StylisedString","dev.tesserakt.sparql.debug.StylisedString.plus"]},{"name":"sealed interface StyleModifier","description":"dev.tesserakt.sparql.debug.StyleModifier","location":"sparql/debugging/dev.tesserakt.sparql.debug/-style-modifier/index.html","searchKeys":["StyleModifier","sealed interface StyleModifier","dev.tesserakt.sparql.debug.StyleModifier"]},{"name":"val bindings: List<Bindings>","description":"dev.tesserakt.sparql.debug.BindingsTable.bindings","location":"sparql/debugging/dev.tesserakt.sparql.debug/-bindings-table/bindings.html","searchKeys":["bindings","val bindings: List<Bindings>","dev.tesserakt.sparql.debug.BindingsTable.bindings"]},{"name":"val columns: List<String>","description":"dev.tesserakt.sparql.debug.BindingsTable.columns","location":"sparql/debugging/dev.tesserakt.sparql.debug/-bindings-table/columns.html","searchKeys":["columns","val columns: List<String>","dev.tesserakt.sparql.debug.BindingsTable.columns"]},{"name":"val content: StringBuilder","description":"dev.tesserakt.sparql.debug.ASTWriter.State.content","location":"sparql/debugging/dev.tesserakt.sparql.debug/-a-s-t-writer/-state/content.html","searchKeys":["content","val content: StringBuilder","dev.tesserakt.sparql.debug.ASTWriter.State.content"]},{"name":"val content: StringBuilder","description":"dev.tesserakt.sparql.debug.QueryWriter.Default.State.content","location":"sparql/debugging/dev.tesserakt.sparql.debug/-query-writer/-default/-state/content.html","searchKeys":["content","val content: StringBuilder","dev.tesserakt.sparql.debug.QueryWriter.Default.State.content"]},{"name":"val content: StylisedString","description":"dev.tesserakt.sparql.debug.StylisedWriter.State.content","location":"sparql/debugging/dev.tesserakt.sparql.debug/-stylised-writer/-state/content.html","searchKeys":["content","val content: StylisedString","dev.tesserakt.sparql.debug.StylisedWriter.State.content"]},{"name":"val entries: EnumEntries<Color>","description":"dev.tesserakt.sparql.debug.Color.entries","location":"sparql/debugging/dev.tesserakt.sparql.debug/-color/entries.html","searchKeys":["entries","val entries: EnumEntries<Color>","dev.tesserakt.sparql.debug.Color.entries"]},{"name":"val entries: EnumEntries<Decoration>","description":"dev.tesserakt.sparql.debug.Decoration.entries","location":"sparql/debugging/dev.tesserakt.sparql.debug/-decoration/entries.html","searchKeys":["entries","val entries: EnumEntries<Decoration>","dev.tesserakt.sparql.debug.Decoration.entries"]},{"name":"val indexWidth: Int","description":"dev.tesserakt.sparql.debug.BindingsTable.indexWidth","location":"sparql/debugging/dev.tesserakt.sparql.debug/-bindings-table/index-width.html","searchKeys":["indexWidth","val indexWidth: Int","dev.tesserakt.sparql.debug.BindingsTable.indexWidth"]},{"name":"val widths: List<Int>","description":"dev.tesserakt.sparql.debug.BindingsTable.widths","location":"sparql/debugging/dev.tesserakt.sparql.debug/-bindings-table/widths.html","searchKeys":["widths","val widths: List<Int>","dev.tesserakt.sparql.debug.BindingsTable.widths"]},{"name":"var indent: Int","description":"dev.tesserakt.sparql.debug.ASTWriter.State.indent","location":"sparql/debugging/dev.tesserakt.sparql.debug/-a-s-t-writer/-state/indent.html","searchKeys":["indent","var indent: Int","dev.tesserakt.sparql.debug.ASTWriter.State.indent"]},{"name":"var indent: Int","description":"dev.tesserakt.sparql.debug.QueryWriter.Default.State.indent","location":"sparql/debugging/dev.tesserakt.sparql.debug/-query-writer/-default/-state/indent.html","searchKeys":["indent","var indent: Int","dev.tesserakt.sparql.debug.QueryWriter.Default.State.indent"]},{"name":"var indent: Int","description":"dev.tesserakt.sparql.debug.StylisedWriter.State.indent","location":"sparql/debugging/dev.tesserakt.sparql.debug/-stylised-writer/-state/indent.html","searchKeys":["indent","var indent: Int","dev.tesserakt.sparql.debug.StylisedWriter.State.indent"]},{"name":"var length: Int","description":"dev.tesserakt.sparql.debug.StylisedString.length","location":"sparql/debugging/dev.tesserakt.sparql.debug/-stylised-string/length.html","searchKeys":["length","var length: Int","dev.tesserakt.sparql.debug.StylisedString.length"]},{"name":"abstract fun divide(snapshots: List<Set<Quad>>): Set<SnapshotCluster>","description":"dev.tesserakt.rdf.types.SnapshotClustering.divide","location":"rdf/snapshot-store/dev.tesserakt.rdf.types/-snapshot-clustering/divide.html","searchKeys":["divide","abstract fun divide(snapshots: List<Set<Quad>>): Set<SnapshotCluster>","dev.tesserakt.rdf.types.SnapshotClustering.divide"]},{"name":"abstract fun extractClusterContent(source: Set<Quad>): Set<Quad>","description":"dev.tesserakt.rdf.types.SnapshotCluster.extractClusterContent","location":"rdf/snapshot-store/dev.tesserakt.rdf.types/-snapshot-cluster/extract-cluster-content.html","searchKeys":["extractClusterContent","abstract fun extractClusterContent(source: Set<Quad>): Set<Quad>","dev.tesserakt.rdf.types.SnapshotCluster.extractClusterContent"]},{"name":"abstract val identifier: Quad.NamedTerm","description":"dev.tesserakt.rdf.types.SnapshotCluster.identifier","location":"rdf/snapshot-store/dev.tesserakt.rdf.types/-snapshot-cluster/identifier.html","searchKeys":["identifier","abstract val identifier: Quad.NamedTerm","dev.tesserakt.rdf.types.SnapshotCluster.identifier"]},{"name":"class Builder(start: Store = Store(), clustering: SnapshotClustering = NaiveSnapshotClustering)","description":"dev.tesserakt.rdf.types.SnapshotStore.Builder","location":"rdf/snapshot-store/dev.tesserakt.rdf.types/-snapshot-store/-builder/index.html","searchKeys":["Builder","class Builder(start: Store = Store(), clustering: SnapshotClustering = NaiveSnapshotClustering)","dev.tesserakt.rdf.types.SnapshotStore.Builder"]},{"name":"class SnapshotStore","description":"dev.tesserakt.rdf.types.SnapshotStore","location":"rdf/snapshot-store/dev.tesserakt.rdf.types/-snapshot-store/index.html","searchKeys":["SnapshotStore","class SnapshotStore","dev.tesserakt.rdf.types.SnapshotStore"]},{"name":"constructor(identifier: Quad.NamedTerm)","description":"dev.tesserakt.rdf.types.NaiveSnapshotClustering.SubjectCluster.SubjectCluster","location":"rdf/snapshot-store/dev.tesserakt.rdf.types/-naive-snapshot-clustering/-subject-cluster/-subject-cluster.html","searchKeys":["SubjectCluster","constructor(identifier: Quad.NamedTerm)","dev.tesserakt.rdf.types.NaiveSnapshotClustering.SubjectCluster.SubjectCluster"]},{"name":"constructor(insertions: Set<Quad>, deletions: Set<Quad>)","description":"dev.tesserakt.rdf.types.SnapshotStore.Diff.Diff","location":"rdf/snapshot-store/dev.tesserakt.rdf.types/-snapshot-store/-diff/-diff.html","searchKeys":["Diff","constructor(insertions: Set<Quad>, deletions: Set<Quad>)","dev.tesserakt.rdf.types.SnapshotStore.Diff.Diff"]},{"name":"constructor(start: Store = Store(), clustering: SnapshotClustering = NaiveSnapshotClustering)","description":"dev.tesserakt.rdf.types.SnapshotStore.Builder.Builder","location":"rdf/snapshot-store/dev.tesserakt.rdf.types/-snapshot-store/-builder/-builder.html","searchKeys":["Builder","constructor(start: Store = Store(), clustering: SnapshotClustering = NaiveSnapshotClustering)","dev.tesserakt.rdf.types.SnapshotStore.Builder.Builder"]},{"name":"constructor(store: Store)","description":"dev.tesserakt.rdf.types.SnapshotStore.SnapshotStore","location":"rdf/snapshot-store/dev.tesserakt.rdf.types/-snapshot-store/-snapshot-store.html","searchKeys":["SnapshotStore","constructor(store: Store)","dev.tesserakt.rdf.types.SnapshotStore.SnapshotStore"]},{"name":"data class Diff(val insertions: Set<Quad>, val deletions: Set<Quad>)","description":"dev.tesserakt.rdf.types.SnapshotStore.Diff","location":"rdf/snapshot-store/dev.tesserakt.rdf.types/-snapshot-store/-diff/index.html","searchKeys":["Diff","data class Diff(val insertions: Set<Quad>, val deletions: Set<Quad>)","dev.tesserakt.rdf.types.SnapshotStore.Diff"]},{"name":"fun addSnapshot(store: Store): SnapshotStore.Builder","description":"dev.tesserakt.rdf.types.SnapshotStore.Builder.addSnapshot","location":"rdf/snapshot-store/dev.tesserakt.rdf.types/-snapshot-store/-builder/add-snapshot.html","searchKeys":["addSnapshot","fun addSnapshot(store: Store): SnapshotStore.Builder","dev.tesserakt.rdf.types.SnapshotStore.Builder.addSnapshot"]},{"name":"fun between(first: Set<Quad>, second: Set<Quad>): SnapshotStore.Diff","description":"dev.tesserakt.rdf.types.SnapshotStore.Diff.Companion.between","location":"rdf/snapshot-store/dev.tesserakt.rdf.types/-snapshot-store/-diff/-companion/between.html","searchKeys":["between","fun between(first: Set<Quad>, second: Set<Quad>): SnapshotStore.Diff","dev.tesserakt.rdf.types.SnapshotStore.Diff.Companion.between"]},{"name":"fun build(identifier: Quad.NamedTerm): SnapshotStore","description":"dev.tesserakt.rdf.types.SnapshotStore.Builder.build","location":"rdf/snapshot-store/dev.tesserakt.rdf.types/-snapshot-store/-builder/build.html","searchKeys":["build","fun build(identifier: Quad.NamedTerm): SnapshotStore","dev.tesserakt.rdf.types.SnapshotStore.Builder.build"]},{"name":"fun toStore(target: Store = Store()): Store","description":"dev.tesserakt.rdf.types.SnapshotStore.toStore","location":"rdf/snapshot-store/dev.tesserakt.rdf.types/-snapshot-store/to-store.html","searchKeys":["toStore","fun toStore(target: Store = Store()): Store","dev.tesserakt.rdf.types.SnapshotStore.toStore"]},{"name":"interface SnapshotCluster","description":"dev.tesserakt.rdf.types.SnapshotCluster","location":"rdf/snapshot-store/dev.tesserakt.rdf.types/-snapshot-cluster/index.html","searchKeys":["SnapshotCluster","interface SnapshotCluster","dev.tesserakt.rdf.types.SnapshotCluster"]},{"name":"interface SnapshotClustering","description":"dev.tesserakt.rdf.types.SnapshotClustering","location":"rdf/snapshot-store/dev.tesserakt.rdf.types/-snapshot-clustering/index.html","searchKeys":["SnapshotClustering","interface SnapshotClustering","dev.tesserakt.rdf.types.SnapshotClustering"]},{"name":"object Companion","description":"dev.tesserakt.rdf.types.SnapshotStore.Diff.Companion","location":"rdf/snapshot-store/dev.tesserakt.rdf.types/-snapshot-store/-diff/-companion/index.html","searchKeys":["Companion","object Companion","dev.tesserakt.rdf.types.SnapshotStore.Diff.Companion"]},{"name":"object NaiveSnapshotClustering : SnapshotClustering","description":"dev.tesserakt.rdf.types.NaiveSnapshotClustering","location":"rdf/snapshot-store/dev.tesserakt.rdf.types/-naive-snapshot-clustering/index.html","searchKeys":["NaiveSnapshotClustering","object NaiveSnapshotClustering : SnapshotClustering","dev.tesserakt.rdf.types.NaiveSnapshotClustering"]},{"name":"open override fun divide(snapshots: List<Set<Quad>>): Set<NaiveSnapshotClustering.SubjectCluster>","description":"dev.tesserakt.rdf.types.NaiveSnapshotClustering.divide","location":"rdf/snapshot-store/dev.tesserakt.rdf.types/-naive-snapshot-clustering/divide.html","searchKeys":["divide","open override fun divide(snapshots: List<Set<Quad>>): Set<NaiveSnapshotClustering.SubjectCluster>","dev.tesserakt.rdf.types.NaiveSnapshotClustering.divide"]},{"name":"open override fun extractClusterContent(source: Set<Quad>): Set<Quad>","description":"dev.tesserakt.rdf.types.NaiveSnapshotClustering.SubjectCluster.extractClusterContent","location":"rdf/snapshot-store/dev.tesserakt.rdf.types/-naive-snapshot-clustering/-subject-cluster/extract-cluster-content.html","searchKeys":["extractClusterContent","open override fun extractClusterContent(source: Set<Quad>): Set<Quad>","dev.tesserakt.rdf.types.NaiveSnapshotClustering.SubjectCluster.extractClusterContent"]},{"name":"open override fun toString(): String","description":"dev.tesserakt.rdf.types.SnapshotStore.Diff.toString","location":"rdf/snapshot-store/dev.tesserakt.rdf.types/-snapshot-store/-diff/to-string.html","searchKeys":["toString","open override fun toString(): String","dev.tesserakt.rdf.types.SnapshotStore.Diff.toString"]},{"name":"open override val identifier: Quad.NamedTerm","description":"dev.tesserakt.rdf.types.NaiveSnapshotClustering.SubjectCluster.identifier","location":"rdf/snapshot-store/dev.tesserakt.rdf.types/-naive-snapshot-clustering/-subject-cluster/identifier.html","searchKeys":["identifier","open override val identifier: Quad.NamedTerm","dev.tesserakt.rdf.types.NaiveSnapshotClustering.SubjectCluster.identifier"]},{"name":"val deletions: Set<Quad>","description":"dev.tesserakt.rdf.types.SnapshotStore.Diff.deletions","location":"rdf/snapshot-store/dev.tesserakt.rdf.types/-snapshot-store/-diff/deletions.html","searchKeys":["deletions","val deletions: Set<Quad>","dev.tesserakt.rdf.types.SnapshotStore.Diff.deletions"]},{"name":"val diffs: Iterable<SnapshotStore.Diff>","description":"dev.tesserakt.rdf.types.SnapshotStore.diffs","location":"rdf/snapshot-store/dev.tesserakt.rdf.types/-snapshot-store/diffs.html","searchKeys":["diffs","val diffs: Iterable<SnapshotStore.Diff>","dev.tesserakt.rdf.types.SnapshotStore.diffs"]},{"name":"val identifier: Quad.NamedTerm","description":"dev.tesserakt.rdf.types.SnapshotStore.identifier","location":"rdf/snapshot-store/dev.tesserakt.rdf.types/-snapshot-store/identifier.html","searchKeys":["identifier","val identifier: Quad.NamedTerm","dev.tesserakt.rdf.types.SnapshotStore.identifier"]},{"name":"val insertions: Set<Quad>","description":"dev.tesserakt.rdf.types.SnapshotStore.Diff.insertions","location":"rdf/snapshot-store/dev.tesserakt.rdf.types/-snapshot-store/-diff/insertions.html","searchKeys":["insertions","val insertions: Set<Quad>","dev.tesserakt.rdf.types.SnapshotStore.Diff.insertions"]},{"name":"val snapshotCount: Int","description":"dev.tesserakt.rdf.types.SnapshotStore.snapshotCount","location":"rdf/snapshot-store/dev.tesserakt.rdf.types/-snapshot-store/snapshot-count.html","searchKeys":["snapshotCount","val snapshotCount: Int","dev.tesserakt.rdf.types.SnapshotStore.snapshotCount"]},{"name":"val snapshots: Iterable<Store>","description":"dev.tesserakt.rdf.types.SnapshotStore.snapshots","location":"rdf/snapshot-store/dev.tesserakt.rdf.types/-snapshot-store/snapshots.html","searchKeys":["snapshots","val snapshots: Iterable<Store>","dev.tesserakt.rdf.types.SnapshotStore.snapshots"]},{"name":"value class SubjectCluster(val identifier: Quad.NamedTerm) : SnapshotCluster","description":"dev.tesserakt.rdf.types.NaiveSnapshotClustering.SubjectCluster","location":"rdf/snapshot-store/dev.tesserakt.rdf.types/-naive-snapshot-clustering/-subject-cluster/index.html","searchKeys":["SubjectCluster","value class SubjectCluster(val identifier: Quad.NamedTerm) : SnapshotCluster","dev.tesserakt.rdf.types.NaiveSnapshotClustering.SubjectCluster"]},{"name":"abstract fun decode(source: Store, identifier: Quad.NamedTerm): StreamUnit","description":"dev.tesserakt.stream.ldes.StreamTransform.decode","location":"stream/ldes/dev.tesserakt.stream.ldes/-stream-transform/decode.html","searchKeys":["decode","abstract fun decode(source: Store, identifier: Quad.NamedTerm): StreamUnit","dev.tesserakt.stream.ldes.StreamTransform.decode"]},{"name":"abstract fun decode(source: Store, identifiers: Set<Quad.NamedTerm>): Store","description":"dev.tesserakt.stream.ldes.StreamTransform.decode","location":"stream/ldes/dev.tesserakt.stream.ldes/-stream-transform/decode.html","searchKeys":["decode","abstract fun decode(source: Store, identifiers: Set<Quad.NamedTerm>): Store","dev.tesserakt.stream.ldes.StreamTransform.decode"]},{"name":"abstract fun encode(target: Store, element: StreamUnit, hint: Quad.NamedTerm): Quad.NamedTerm","description":"dev.tesserakt.stream.ldes.StreamTransform.encode","location":"stream/ldes/dev.tesserakt.stream.ldes/-stream-transform/encode.html","searchKeys":["encode","abstract fun encode(target: Store, element: StreamUnit, hint: Quad.NamedTerm): Quad.NamedTerm","dev.tesserakt.stream.ldes.StreamTransform.encode"]},{"name":"class VersionedLinkedDataEventStream<StreamElement>(val identifier: Quad.NamedTerm, store: Store, comparator: Comparator<Quad.Literal> = DateComparator, transform: StreamTransform<StreamElement>) : Set<Quad> ","description":"dev.tesserakt.stream.ldes.VersionedLinkedDataEventStream","location":"stream/ldes/dev.tesserakt.stream.ldes/-versioned-linked-data-event-stream/index.html","searchKeys":["VersionedLinkedDataEventStream","class VersionedLinkedDataEventStream<StreamElement>(val identifier: Quad.NamedTerm, store: Store, comparator: Comparator<Quad.Literal> = DateComparator, transform: StreamTransform<StreamElement>) : Set<Quad> ","dev.tesserakt.stream.ldes.VersionedLinkedDataEventStream"]},{"name":"constructor(identifier: Quad.NamedTerm, base: Quad.NamedTerm, timestampValue: Quad.Literal)","description":"dev.tesserakt.stream.ldes.VersionedLinkedDataEventStream.Member.Member","location":"stream/ldes/dev.tesserakt.stream.ldes/-versioned-linked-data-event-stream/-member/-member.html","searchKeys":["Member","constructor(identifier: Quad.NamedTerm, base: Quad.NamedTerm, timestampValue: Quad.Literal)","dev.tesserakt.stream.ldes.VersionedLinkedDataEventStream.Member.Member"]},{"name":"constructor(identifier: Quad.NamedTerm, store: Store, comparator: Comparator<Quad.Literal> = DateComparator, transform: StreamTransform<StreamElement>)","description":"dev.tesserakt.stream.ldes.VersionedLinkedDataEventStream.VersionedLinkedDataEventStream","location":"stream/ldes/dev.tesserakt.stream.ldes/-versioned-linked-data-event-stream/-versioned-linked-data-event-stream.html","searchKeys":["VersionedLinkedDataEventStream","constructor(identifier: Quad.NamedTerm, store: Store, comparator: Comparator<Quad.Literal> = DateComparator, transform: StreamTransform<StreamElement>)","dev.tesserakt.stream.ldes.VersionedLinkedDataEventStream.VersionedLinkedDataEventStream"]},{"name":"data class Member(val identifier: Quad.NamedTerm, val base: Quad.NamedTerm, val timestampValue: Quad.Literal)","description":"dev.tesserakt.stream.ldes.VersionedLinkedDataEventStream.Member","location":"stream/ldes/dev.tesserakt.stream.ldes/-versioned-linked-data-event-stream/-member/index.html","searchKeys":["Member","data class Member(val identifier: Quad.NamedTerm, val base: Quad.NamedTerm, val timestampValue: Quad.Literal)","dev.tesserakt.stream.ldes.VersionedLinkedDataEventStream.Member"]},{"name":"fun <StreamUnit> from(store: Store, transform: StreamTransform<StreamUnit>, identifier: Quad.NamedTerm = store.single { it.p == RDF.type && it.o == LDES.EventStream }.s as Quad.NamedTerm, comparator: Comparator<Quad.Literal> = DateComparator): VersionedLinkedDataEventStream<StreamUnit>","description":"dev.tesserakt.stream.ldes.VersionedLinkedDataEventStream.Companion.from","location":"stream/ldes/dev.tesserakt.stream.ldes/-versioned-linked-data-event-stream/-companion/from.html","searchKeys":["from","fun <StreamUnit> from(store: Store, transform: StreamTransform<StreamUnit>, identifier: Quad.NamedTerm = store.single { it.p == RDF.type && it.o == LDES.EventStream }.s as Quad.NamedTerm, comparator: Comparator<Quad.Literal> = DateComparator): VersionedLinkedDataEventStream<StreamUnit>","dev.tesserakt.stream.ldes.VersionedLinkedDataEventStream.Companion.from"]},{"name":"fun <StreamUnit> initialise(identifier: Quad.NamedTerm, timestampPath: Quad.NamedTerm = DC.modified, versionOfPath: Quad.NamedTerm = DC.isVersionOf, transform: StreamTransform<StreamUnit>, comparator: Comparator<Quad.Literal> = DateComparator): VersionedLinkedDataEventStream<StreamUnit>","description":"dev.tesserakt.stream.ldes.VersionedLinkedDataEventStream.Companion.initialise","location":"stream/ldes/dev.tesserakt.stream.ldes/-versioned-linked-data-event-stream/-companion/initialise.html","searchKeys":["initialise","fun <StreamUnit> initialise(identifier: Quad.NamedTerm, timestampPath: Quad.NamedTerm = DC.modified, versionOfPath: Quad.NamedTerm = DC.isVersionOf, transform: StreamTransform<StreamUnit>, comparator: Comparator<Quad.Literal> = DateComparator): VersionedLinkedDataEventStream<StreamUnit>","dev.tesserakt.stream.ldes.VersionedLinkedDataEventStream.Companion.initialise"]},{"name":"fun add(baseVersion: Quad.NamedTerm, timestamp: Quad.Literal, data: StreamElement)","description":"dev.tesserakt.stream.ldes.VersionedLinkedDataEventStream.add","location":"stream/ldes/dev.tesserakt.stream.ldes/-versioned-linked-data-event-stream/add.html","searchKeys":["add","fun add(baseVersion: Quad.NamedTerm, timestamp: Quad.Literal, data: StreamElement)","dev.tesserakt.stream.ldes.VersionedLinkedDataEventStream.add"]},{"name":"fun read(base: Quad.NamedTerm, timestampValue: Quad.Literal, inclusive: Boolean = true): StreamElement?","description":"dev.tesserakt.stream.ldes.VersionedLinkedDataEventStream.read","location":"stream/ldes/dev.tesserakt.stream.ldes/-versioned-linked-data-event-stream/read.html","searchKeys":["read","fun read(base: Quad.NamedTerm, timestampValue: Quad.Literal, inclusive: Boolean = true): StreamElement?","dev.tesserakt.stream.ldes.VersionedLinkedDataEventStream.read"]},{"name":"fun read(until: Quad.Literal): Store","description":"dev.tesserakt.stream.ldes.VersionedLinkedDataEventStream.read","location":"stream/ldes/dev.tesserakt.stream.ldes/-versioned-linked-data-event-stream/read.html","searchKeys":["read","fun read(until: Quad.Literal): Store","dev.tesserakt.stream.ldes.VersionedLinkedDataEventStream.read"]},{"name":"interface StreamTransform<StreamUnit>","description":"dev.tesserakt.stream.ldes.StreamTransform","location":"stream/ldes/dev.tesserakt.stream.ldes/-stream-transform/index.html","searchKeys":["StreamTransform","interface StreamTransform<StreamUnit>","dev.tesserakt.stream.ldes.StreamTransform"]},{"name":"object Companion","description":"dev.tesserakt.stream.ldes.VersionedLinkedDataEventStream.Companion","location":"stream/ldes/dev.tesserakt.stream.ldes/-versioned-linked-data-event-stream/-companion/index.html","searchKeys":["Companion","object Companion","dev.tesserakt.stream.ldes.VersionedLinkedDataEventStream.Companion"]},{"name":"object DC : Ontology","description":"dev.tesserakt.stream.ldes.ontology.DC","location":"stream/ldes/dev.tesserakt.stream.ldes.ontology/-d-c/index.html","searchKeys":["DC","object DC : Ontology","dev.tesserakt.stream.ldes.ontology.DC"]},{"name":"object DateComparator : Comparator<Quad.Literal> ","description":"dev.tesserakt.stream.ldes.DateComparator","location":"stream/ldes/dev.tesserakt.stream.ldes/-date-comparator/index.html","searchKeys":["DateComparator","object DateComparator : Comparator<Quad.Literal> ","dev.tesserakt.stream.ldes.DateComparator"]},{"name":"object GraphBased : StreamTransform<Set<Quad>> ","description":"dev.tesserakt.stream.ldes.StreamTransform.GraphBased","location":"stream/ldes/dev.tesserakt.stream.ldes/-stream-transform/-graph-based/index.html","searchKeys":["GraphBased","object GraphBased : StreamTransform<Set<Quad>> ","dev.tesserakt.stream.ldes.StreamTransform.GraphBased"]},{"name":"object LDES : Ontology","description":"dev.tesserakt.stream.ldes.ontology.LDES","location":"stream/ldes/dev.tesserakt.stream.ldes.ontology/-l-d-e-s/index.html","searchKeys":["LDES","object LDES : Ontology","dev.tesserakt.stream.ldes.ontology.LDES"]},{"name":"object TREE : Ontology","description":"dev.tesserakt.stream.ldes.ontology.TREE","location":"stream/ldes/dev.tesserakt.stream.ldes.ontology/-t-r-e-e/index.html","searchKeys":["TREE","object TREE : Ontology","dev.tesserakt.stream.ldes.ontology.TREE"]},{"name":"open override fun compare(a: Quad.Literal, b: Quad.Literal): Int","description":"dev.tesserakt.stream.ldes.DateComparator.compare","location":"stream/ldes/dev.tesserakt.stream.ldes/-date-comparator/compare.html","searchKeys":["compare","open override fun compare(a: Quad.Literal, b: Quad.Literal): Int","dev.tesserakt.stream.ldes.DateComparator.compare"]},{"name":"open override fun decode(source: Store, identifier: Quad.NamedTerm): Set<Quad>","description":"dev.tesserakt.stream.ldes.StreamTransform.GraphBased.decode","location":"stream/ldes/dev.tesserakt.stream.ldes/-stream-transform/-graph-based/decode.html","searchKeys":["decode","open override fun decode(source: Store, identifier: Quad.NamedTerm): Set<Quad>","dev.tesserakt.stream.ldes.StreamTransform.GraphBased.decode"]},{"name":"open override fun decode(source: Store, identifiers: Set<Quad.NamedTerm>): Store","description":"dev.tesserakt.stream.ldes.StreamTransform.GraphBased.decode","location":"stream/ldes/dev.tesserakt.stream.ldes/-stream-transform/-graph-based/decode.html","searchKeys":["decode","open override fun decode(source: Store, identifiers: Set<Quad.NamedTerm>): Store","dev.tesserakt.stream.ldes.StreamTransform.GraphBased.decode"]},{"name":"open override fun encode(target: Store, element: Set<Quad>, hint: Quad.NamedTerm): Quad.NamedTerm","description":"dev.tesserakt.stream.ldes.StreamTransform.GraphBased.encode","location":"stream/ldes/dev.tesserakt.stream.ldes/-stream-transform/-graph-based/encode.html","searchKeys":["encode","open override fun encode(target: Store, element: Set<Quad>, hint: Quad.NamedTerm): Quad.NamedTerm","dev.tesserakt.stream.ldes.StreamTransform.GraphBased.encode"]},{"name":"open override val base_uri: String","description":"dev.tesserakt.stream.ldes.ontology.DC.base_uri","location":"stream/ldes/dev.tesserakt.stream.ldes.ontology/-d-c/base_uri.html","searchKeys":["base_uri","open override val base_uri: String","dev.tesserakt.stream.ldes.ontology.DC.base_uri"]},{"name":"open override val base_uri: String","description":"dev.tesserakt.stream.ldes.ontology.LDES.base_uri","location":"stream/ldes/dev.tesserakt.stream.ldes.ontology/-l-d-e-s/base_uri.html","searchKeys":["base_uri","open override val base_uri: String","dev.tesserakt.stream.ldes.ontology.LDES.base_uri"]},{"name":"open override val base_uri: String","description":"dev.tesserakt.stream.ldes.ontology.TREE.base_uri","location":"stream/ldes/dev.tesserakt.stream.ldes.ontology/-t-r-e-e/base_uri.html","searchKeys":["base_uri","open override val base_uri: String","dev.tesserakt.stream.ldes.ontology.TREE.base_uri"]},{"name":"open override val prefix: String","description":"dev.tesserakt.stream.ldes.ontology.DC.prefix","location":"stream/ldes/dev.tesserakt.stream.ldes.ontology/-d-c/prefix.html","searchKeys":["prefix","open override val prefix: String","dev.tesserakt.stream.ldes.ontology.DC.prefix"]},{"name":"open override val prefix: String","description":"dev.tesserakt.stream.ldes.ontology.LDES.prefix","location":"stream/ldes/dev.tesserakt.stream.ldes.ontology/-l-d-e-s/prefix.html","searchKeys":["prefix","open override val prefix: String","dev.tesserakt.stream.ldes.ontology.LDES.prefix"]},{"name":"open override val prefix: String","description":"dev.tesserakt.stream.ldes.ontology.TREE.prefix","location":"stream/ldes/dev.tesserakt.stream.ldes.ontology/-t-r-e-e/prefix.html","searchKeys":["prefix","open override val prefix: String","dev.tesserakt.stream.ldes.ontology.TREE.prefix"]},{"name":"val EventStream: Quad.NamedTerm","description":"dev.tesserakt.stream.ldes.ontology.LDES.EventStream","location":"stream/ldes/dev.tesserakt.stream.ldes.ontology/-l-d-e-s/-event-stream.html","searchKeys":["EventStream","val EventStream: Quad.NamedTerm","dev.tesserakt.stream.ldes.ontology.LDES.EventStream"]},{"name":"val base: Quad.NamedTerm","description":"dev.tesserakt.stream.ldes.VersionedLinkedDataEventStream.Member.base","location":"stream/ldes/dev.tesserakt.stream.ldes/-versioned-linked-data-event-stream/-member/base.html","searchKeys":["base","val base: Quad.NamedTerm","dev.tesserakt.stream.ldes.VersionedLinkedDataEventStream.Member.base"]},{"name":"val identifier: Quad.NamedTerm","description":"dev.tesserakt.stream.ldes.VersionedLinkedDataEventStream.Member.identifier","location":"stream/ldes/dev.tesserakt.stream.ldes/-versioned-linked-data-event-stream/-member/identifier.html","searchKeys":["identifier","val identifier: Quad.NamedTerm","dev.tesserakt.stream.ldes.VersionedLinkedDataEventStream.Member.identifier"]},{"name":"val identifier: Quad.NamedTerm","description":"dev.tesserakt.stream.ldes.VersionedLinkedDataEventStream.identifier","location":"stream/ldes/dev.tesserakt.stream.ldes/-versioned-linked-data-event-stream/identifier.html","searchKeys":["identifier","val identifier: Quad.NamedTerm","dev.tesserakt.stream.ldes.VersionedLinkedDataEventStream.identifier"]},{"name":"val isVersionOf: Quad.NamedTerm","description":"dev.tesserakt.stream.ldes.ontology.DC.isVersionOf","location":"stream/ldes/dev.tesserakt.stream.ldes.ontology/-d-c/is-version-of.html","searchKeys":["isVersionOf","val isVersionOf: Quad.NamedTerm","dev.tesserakt.stream.ldes.ontology.DC.isVersionOf"]},{"name":"val member: Quad.NamedTerm","description":"dev.tesserakt.stream.ldes.ontology.LDES.member","location":"stream/ldes/dev.tesserakt.stream.ldes.ontology/-l-d-e-s/member.html","searchKeys":["member","val member: Quad.NamedTerm","dev.tesserakt.stream.ldes.ontology.LDES.member"]},{"name":"val member: Quad.NamedTerm","description":"dev.tesserakt.stream.ldes.ontology.TREE.member","location":"stream/ldes/dev.tesserakt.stream.ldes.ontology/-t-r-e-e/member.html","searchKeys":["member","val member: Quad.NamedTerm","dev.tesserakt.stream.ldes.ontology.TREE.member"]},{"name":"val members: List<VersionedLinkedDataEventStream.Member>","description":"dev.tesserakt.stream.ldes.VersionedLinkedDataEventStream.members","location":"stream/ldes/dev.tesserakt.stream.ldes/-versioned-linked-data-event-stream/members.html","searchKeys":["members","val members: List<VersionedLinkedDataEventStream.Member>","dev.tesserakt.stream.ldes.VersionedLinkedDataEventStream.members"]},{"name":"val modified: Quad.NamedTerm","description":"dev.tesserakt.stream.ldes.ontology.DC.modified","location":"stream/ldes/dev.tesserakt.stream.ldes.ontology/-d-c/modified.html","searchKeys":["modified","val modified: Quad.NamedTerm","dev.tesserakt.stream.ldes.ontology.DC.modified"]},{"name":"val timestampPath: Quad.NamedTerm","description":"dev.tesserakt.stream.ldes.ontology.LDES.timestampPath","location":"stream/ldes/dev.tesserakt.stream.ldes.ontology/-l-d-e-s/timestamp-path.html","searchKeys":["timestampPath","val timestampPath: Quad.NamedTerm","dev.tesserakt.stream.ldes.ontology.LDES.timestampPath"]},{"name":"val timestampValue: Quad.Literal","description":"dev.tesserakt.stream.ldes.VersionedLinkedDataEventStream.Member.timestampValue","location":"stream/ldes/dev.tesserakt.stream.ldes/-versioned-linked-data-event-stream/-member/timestamp-value.html","searchKeys":["timestampValue","val timestampValue: Quad.Literal","dev.tesserakt.stream.ldes.VersionedLinkedDataEventStream.Member.timestampValue"]},{"name":"val timestamps: List<Quad.Literal>","description":"dev.tesserakt.stream.ldes.VersionedLinkedDataEventStream.timestamps","location":"stream/ldes/dev.tesserakt.stream.ldes/-versioned-linked-data-event-stream/timestamps.html","searchKeys":["timestamps","val timestamps: List<Quad.Literal>","dev.tesserakt.stream.ldes.VersionedLinkedDataEventStream.timestamps"]},{"name":"val versionOfPath: Quad.NamedTerm","description":"dev.tesserakt.stream.ldes.ontology.LDES.versionOfPath","location":"stream/ldes/dev.tesserakt.stream.ldes.ontology/-l-d-e-s/version-of-path.html","searchKeys":["versionOfPath","val versionOfPath: Quad.NamedTerm","dev.tesserakt.stream.ldes.ontology.LDES.versionOfPath"]},{"name":"class MemoryObserver(filepath: String) : Runnable","description":"dev.tesserakt.benchmarking.MemoryObserver","location":"testing/bench/sparql/dev.tesserakt.benchmarking/-memory-observer/index.html","searchKeys":["MemoryObserver","class MemoryObserver(filepath: String) : Runnable","dev.tesserakt.benchmarking.MemoryObserver"]},{"name":"class OutputObserver(filepath: String)","description":"dev.tesserakt.benchmarking.OutputObserver","location":"testing/bench/sparql/dev.tesserakt.benchmarking/-output-observer/index.html","searchKeys":["OutputObserver","class OutputObserver(filepath: String)","dev.tesserakt.benchmarking.OutputObserver"]},{"name":"class Runner(config: RunnerConfig)","description":"dev.tesserakt.benchmarking.Runner","location":"testing/bench/sparql/dev.tesserakt.benchmarking/-runner/index.html","searchKeys":["Runner","class Runner(config: RunnerConfig)","dev.tesserakt.benchmarking.Runner"]},{"name":"class TimeObserver(filepath: String)","description":"dev.tesserakt.benchmarking.TimeObserver","location":"testing/bench/sparql/dev.tesserakt.benchmarking/-time-observer/index.html","searchKeys":["TimeObserver","class TimeObserver(filepath: String)","dev.tesserakt.benchmarking.TimeObserver"]},{"name":"constructor(config: RunnerConfig)","description":"dev.tesserakt.benchmarking.Runner.Runner","location":"testing/bench/sparql/dev.tesserakt.benchmarking/-runner/-runner.html","searchKeys":["Runner","constructor(config: RunnerConfig)","dev.tesserakt.benchmarking.Runner.Runner"]},{"name":"constructor(filepath: String)","description":"dev.tesserakt.benchmarking.MemoryObserver.MemoryObserver","location":"testing/bench/sparql/dev.tesserakt.benchmarking/-memory-observer/-memory-observer.html","searchKeys":["MemoryObserver","constructor(filepath: String)","dev.tesserakt.benchmarking.MemoryObserver.MemoryObserver"]},{"name":"constructor(filepath: String)","description":"dev.tesserakt.benchmarking.OutputObserver.OutputObserver","location":"testing/bench/sparql/dev.tesserakt.benchmarking/-output-observer/-output-observer.html","searchKeys":["OutputObserver","constructor(filepath: String)","dev.tesserakt.benchmarking.OutputObserver.OutputObserver"]},{"name":"constructor(filepath: String)","description":"dev.tesserakt.benchmarking.TimeObserver.TimeObserver","location":"testing/bench/sparql/dev.tesserakt.benchmarking/-time-observer/-time-observer.html","searchKeys":["TimeObserver","constructor(filepath: String)","dev.tesserakt.benchmarking.TimeObserver.TimeObserver"]},{"name":"constructor(inputFilePath: String, outputDirPath: String, evaluatorName: String)","description":"dev.tesserakt.benchmarking.RunnerConfig.RunnerConfig","location":"testing/bench/sparql/dev.tesserakt.benchmarking/-runner-config/-runner-config.html","searchKeys":["RunnerConfig","constructor(inputFilePath: String, outputDirPath: String, evaluatorName: String)","dev.tesserakt.benchmarking.RunnerConfig.RunnerConfig"]},{"name":"constructor(queryIndex: Int, deltaIndex: Int, runIndex: Int)","description":"dev.tesserakt.benchmarking.RunId.RunId","location":"testing/bench/sparql/dev.tesserakt.benchmarking/-run-id/-run-id.html","searchKeys":["RunId","constructor(queryIndex: Int, deltaIndex: Int, runIndex: Int)","dev.tesserakt.benchmarking.RunId.RunId"]},{"name":"data class RunId(val queryIndex: Int, val deltaIndex: Int, val runIndex: Int)","description":"dev.tesserakt.benchmarking.RunId","location":"testing/bench/sparql/dev.tesserakt.benchmarking/-run-id/index.html","searchKeys":["RunId","data class RunId(val queryIndex: Int, val deltaIndex: Int, val runIndex: Int)","dev.tesserakt.benchmarking.RunId"]},{"name":"data class RunnerConfig(val inputFilePath: String, val outputDirPath: String, val evaluatorName: String)","description":"dev.tesserakt.benchmarking.RunnerConfig","location":"testing/bench/sparql/dev.tesserakt.benchmarking/-runner-config/index.html","searchKeys":["RunnerConfig","data class RunnerConfig(val inputFilePath: String, val outputDirPath: String, val evaluatorName: String)","dev.tesserakt.benchmarking.RunnerConfig"]},{"name":"expect class OutputWriter(config: RunnerConfig) : AutoCloseable","description":"dev.tesserakt.benchmarking.OutputWriter","location":"testing/bench/sparql/dev.tesserakt.benchmarking/-output-writer/index.html","searchKeys":["OutputWriter","expect class OutputWriter(config: RunnerConfig) : AutoCloseable","dev.tesserakt.benchmarking.OutputWriter"]},{"name":"expect class Writer(filepath: String)","description":"dev.tesserakt.benchmarking.Writer","location":"testing/bench/sparql/dev.tesserakt.benchmarking/-writer/index.html","searchKeys":["Writer","expect class Writer(filepath: String)","dev.tesserakt.benchmarking.Writer"]},{"name":"expect constructor(config: RunnerConfig)","description":"dev.tesserakt.benchmarking.OutputWriter.OutputWriter","location":"testing/bench/sparql/dev.tesserakt.benchmarking/-output-writer/-output-writer.html","searchKeys":["OutputWriter","expect constructor(config: RunnerConfig)","dev.tesserakt.benchmarking.OutputWriter.OutputWriter"]},{"name":"expect constructor(filepath: String)","description":"dev.tesserakt.benchmarking.Writer.Writer","location":"testing/bench/sparql/dev.tesserakt.benchmarking/-writer/-writer.html","searchKeys":["Writer","expect constructor(filepath: String)","dev.tesserakt.benchmarking.Writer.Writer"]},{"name":"expect fun String.isFolder(): Boolean","description":"dev.tesserakt.benchmarking.isFolder","location":"testing/bench/sparql/dev.tesserakt.benchmarking/is-folder.html","searchKeys":["isFolder","expect fun String.isFolder(): Boolean","dev.tesserakt.benchmarking.isFolder"]},{"name":"expect fun String.listFiles(): List<String>","description":"dev.tesserakt.benchmarking.listFiles","location":"testing/bench/sparql/dev.tesserakt.benchmarking/list-files.html","searchKeys":["listFiles","expect fun String.listFiles(): List<String>","dev.tesserakt.benchmarking.listFiles"]},{"name":"expect fun close()","description":"dev.tesserakt.benchmarking.Writer.close","location":"testing/bench/sparql/dev.tesserakt.benchmarking/-writer/close.html","searchKeys":["close","expect fun close()","dev.tesserakt.benchmarking.Writer.close"]},{"name":"expect fun create()","description":"dev.tesserakt.benchmarking.OutputWriter.create","location":"testing/bench/sparql/dev.tesserakt.benchmarking/-output-writer/create.html","searchKeys":["create","expect fun create()","dev.tesserakt.benchmarking.OutputWriter.create"]},{"name":"expect fun currentEpochMs(): Long","description":"dev.tesserakt.benchmarking.currentEpochMs","location":"testing/bench/sparql/dev.tesserakt.benchmarking/current-epoch-ms.html","searchKeys":["currentEpochMs","expect fun currentEpochMs(): Long","dev.tesserakt.benchmarking.currentEpochMs"]},{"name":"expect fun markEnd(id: String)","description":"dev.tesserakt.benchmarking.OutputWriter.markEnd","location":"testing/bench/sparql/dev.tesserakt.benchmarking/-output-writer/mark-end.html","searchKeys":["markEnd","expect fun markEnd(id: String)","dev.tesserakt.benchmarking.OutputWriter.markEnd"]},{"name":"expect fun markOutputs(id: String, output: Evaluator.Output)","description":"dev.tesserakt.benchmarking.OutputWriter.markOutputs","location":"testing/bench/sparql/dev.tesserakt.benchmarking/-output-writer/mark-outputs.html","searchKeys":["markOutputs","expect fun markOutputs(id: String, output: Evaluator.Output)","dev.tesserakt.benchmarking.OutputWriter.markOutputs"]},{"name":"expect fun markStart(id: String)","description":"dev.tesserakt.benchmarking.OutputWriter.markStart","location":"testing/bench/sparql/dev.tesserakt.benchmarking/-output-writer/mark-start.html","searchKeys":["markStart","expect fun markStart(id: String)","dev.tesserakt.benchmarking.OutputWriter.markStart"]},{"name":"expect fun reset()","description":"dev.tesserakt.benchmarking.OutputWriter.reset","location":"testing/bench/sparql/dev.tesserakt.benchmarking/-output-writer/reset.html","searchKeys":["reset","expect fun reset()","dev.tesserakt.benchmarking.OutputWriter.reset"]},{"name":"expect fun write(text: String)","description":"dev.tesserakt.benchmarking.Writer.write","location":"testing/bench/sparql/dev.tesserakt.benchmarking/-writer/write.html","searchKeys":["write","expect fun write(text: String)","dev.tesserakt.benchmarking.Writer.write"]},{"name":"expect open override fun close()","description":"dev.tesserakt.benchmarking.OutputWriter.close","location":"testing/bench/sparql/dev.tesserakt.benchmarking/-output-writer/close.html","searchKeys":["close","expect open override fun close()","dev.tesserakt.benchmarking.OutputWriter.close"]},{"name":"expect val SELF_IMPL: String","description":"dev.tesserakt.benchmarking.SELF_IMPL","location":"testing/bench/sparql/dev.tesserakt.benchmarking/-s-e-l-f_-i-m-p-l.html","searchKeys":["SELF_IMPL","expect val SELF_IMPL: String","dev.tesserakt.benchmarking.SELF_IMPL"]},{"name":"expect val references: Map<String, (String) -> Reference>","description":"dev.tesserakt.benchmarking.references","location":"testing/bench/sparql/dev.tesserakt.benchmarking/references.html","searchKeys":["references","expect val references: Map<String, (String) -> Reference>","dev.tesserakt.benchmarking.references"]},{"name":"fun createEvaluator(query: String): Evaluator","description":"dev.tesserakt.benchmarking.RunnerConfig.createEvaluator","location":"testing/bench/sparql/dev.tesserakt.benchmarking/-runner-config/create-evaluator.html","searchKeys":["createEvaluator","fun createEvaluator(query: String): Evaluator","dev.tesserakt.benchmarking.RunnerConfig.createEvaluator"]},{"name":"fun createRunner(): Runner","description":"dev.tesserakt.benchmarking.RunnerConfig.createRunner","location":"testing/bench/sparql/dev.tesserakt.benchmarking/-runner-config/create-runner.html","searchKeys":["createRunner","fun createRunner(): Runner","dev.tesserakt.benchmarking.RunnerConfig.createRunner"]},{"name":"fun end(id: String)","description":"dev.tesserakt.benchmarking.TimeObserver.end","location":"testing/bench/sparql/dev.tesserakt.benchmarking/-time-observer/end.html","searchKeys":["end","fun end(id: String)","dev.tesserakt.benchmarking.TimeObserver.end"]},{"name":"fun fromCommandLine(args: Array<String>): List<RunnerConfig>","description":"dev.tesserakt.benchmarking.RunnerConfig.Companion.fromCommandLine","location":"testing/bench/sparql/dev.tesserakt.benchmarking/-runner-config/-companion/from-command-line.html","searchKeys":["fromCommandLine","fun fromCommandLine(args: Array<String>): List<RunnerConfig>","dev.tesserakt.benchmarking.RunnerConfig.Companion.fromCommandLine"]},{"name":"fun id(): String","description":"dev.tesserakt.benchmarking.RunId.id","location":"testing/bench/sparql/dev.tesserakt.benchmarking/-run-id/id.html","searchKeys":["id","fun id(): String","dev.tesserakt.benchmarking.RunId.id"]},{"name":"fun markResult(id: String, output: Evaluator.Output)","description":"dev.tesserakt.benchmarking.OutputObserver.markResult","location":"testing/bench/sparql/dev.tesserakt.benchmarking/-output-observer/mark-result.html","searchKeys":["markResult","fun markResult(id: String, output: Evaluator.Output)","dev.tesserakt.benchmarking.OutputObserver.markResult"]},{"name":"fun reset()","description":"dev.tesserakt.benchmarking.MemoryObserver.reset","location":"testing/bench/sparql/dev.tesserakt.benchmarking/-memory-observer/reset.html","searchKeys":["reset","fun reset()","dev.tesserakt.benchmarking.MemoryObserver.reset"]},{"name":"fun run(command: String): String","description":"dev.tesserakt.benchmarking.CommandExecutor.run","location":"testing/bench/sparql/dev.tesserakt.benchmarking/-command-executor/run.html","searchKeys":["run","fun run(command: String): String","dev.tesserakt.benchmarking.CommandExecutor.run"]},{"name":"fun start()","description":"dev.tesserakt.benchmarking.MemoryObserver.start","location":"testing/bench/sparql/dev.tesserakt.benchmarking/-memory-observer/start.html","searchKeys":["start","fun start()","dev.tesserakt.benchmarking.MemoryObserver.start"]},{"name":"fun start(id: String)","description":"dev.tesserakt.benchmarking.TimeObserver.start","location":"testing/bench/sparql/dev.tesserakt.benchmarking/-time-observer/start.html","searchKeys":["start","fun start(id: String)","dev.tesserakt.benchmarking.TimeObserver.start"]},{"name":"fun stop()","description":"dev.tesserakt.benchmarking.MemoryObserver.stop","location":"testing/bench/sparql/dev.tesserakt.benchmarking/-memory-observer/stop.html","searchKeys":["stop","fun stop()","dev.tesserakt.benchmarking.MemoryObserver.stop"]},{"name":"fun stop()","description":"dev.tesserakt.benchmarking.OutputObserver.stop","location":"testing/bench/sparql/dev.tesserakt.benchmarking/-output-observer/stop.html","searchKeys":["stop","fun stop()","dev.tesserakt.benchmarking.OutputObserver.stop"]},{"name":"fun stop()","description":"dev.tesserakt.benchmarking.TimeObserver.stop","location":"testing/bench/sparql/dev.tesserakt.benchmarking/-time-observer/stop.html","searchKeys":["stop","fun stop()","dev.tesserakt.benchmarking.TimeObserver.stop"]},{"name":"object CommandExecutor","description":"dev.tesserakt.benchmarking.CommandExecutor","location":"testing/bench/sparql/dev.tesserakt.benchmarking/-command-executor/index.html","searchKeys":["CommandExecutor","object CommandExecutor","dev.tesserakt.benchmarking.CommandExecutor"]},{"name":"object Companion","description":"dev.tesserakt.benchmarking.RunnerConfig.Companion","location":"testing/bench/sparql/dev.tesserakt.benchmarking/-runner-config/-companion/index.html","searchKeys":["Companion","object Companion","dev.tesserakt.benchmarking.RunnerConfig.Companion"]},{"name":"open override fun run()","description":"dev.tesserakt.benchmarking.MemoryObserver.run","location":"testing/bench/sparql/dev.tesserakt.benchmarking/-memory-observer/run.html","searchKeys":["run","open override fun run()","dev.tesserakt.benchmarking.MemoryObserver.run"]},{"name":"open override fun toString(): String","description":"dev.tesserakt.benchmarking.RunId.toString","location":"testing/bench/sparql/dev.tesserakt.benchmarking/-run-id/to-string.html","searchKeys":["toString","open override fun toString(): String","dev.tesserakt.benchmarking.RunId.toString"]},{"name":"open override fun toString(): String","description":"dev.tesserakt.benchmarking.RunnerConfig.toString","location":"testing/bench/sparql/dev.tesserakt.benchmarking/-runner-config/to-string.html","searchKeys":["toString","open override fun toString(): String","dev.tesserakt.benchmarking.RunnerConfig.toString"]},{"name":"suspend fun main(args: Array<String>)","description":"main","location":"testing/bench/sparql/[root]/[js]main.html","searchKeys":["main","suspend fun main(args: Array<String>)","main"]},{"name":"suspend fun main(args: Array<String>)","description":"main","location":"testing/bench/sparql/[root]/[jvm]main.html","searchKeys":["main","suspend fun main(args: Array<String>)","main"]},{"name":"suspend fun run()","description":"dev.tesserakt.benchmarking.Runner.run","location":"testing/bench/sparql/dev.tesserakt.benchmarking/-runner/run.html","searchKeys":["run","suspend fun run()","dev.tesserakt.benchmarking.Runner.run"]},{"name":"val deltaIndex: Int","description":"dev.tesserakt.benchmarking.RunId.deltaIndex","location":"testing/bench/sparql/dev.tesserakt.benchmarking/-run-id/delta-index.html","searchKeys":["deltaIndex","val deltaIndex: Int","dev.tesserakt.benchmarking.RunId.deltaIndex"]},{"name":"val evaluatorName: String","description":"dev.tesserakt.benchmarking.RunnerConfig.evaluatorName","location":"testing/bench/sparql/dev.tesserakt.benchmarking/-runner-config/evaluator-name.html","searchKeys":["evaluatorName","val evaluatorName: String","dev.tesserakt.benchmarking.RunnerConfig.evaluatorName"]},{"name":"val inputFilePath: String","description":"dev.tesserakt.benchmarking.RunnerConfig.inputFilePath","location":"testing/bench/sparql/dev.tesserakt.benchmarking/-runner-config/input-file-path.html","searchKeys":["inputFilePath","val inputFilePath: String","dev.tesserakt.benchmarking.RunnerConfig.inputFilePath"]},{"name":"val outputDirPath: String","description":"dev.tesserakt.benchmarking.RunnerConfig.outputDirPath","location":"testing/bench/sparql/dev.tesserakt.benchmarking/-runner-config/output-dir-path.html","searchKeys":["outputDirPath","val outputDirPath: String","dev.tesserakt.benchmarking.RunnerConfig.outputDirPath"]},{"name":"val queryIndex: Int","description":"dev.tesserakt.benchmarking.RunId.queryIndex","location":"testing/bench/sparql/dev.tesserakt.benchmarking/-run-id/query-index.html","searchKeys":["queryIndex","val queryIndex: Int","dev.tesserakt.benchmarking.RunId.queryIndex"]},{"name":"val runIndex: Int","description":"dev.tesserakt.benchmarking.RunId.runIndex","location":"testing/bench/sparql/dev.tesserakt.benchmarking/-run-id/run-index.html","searchKeys":["runIndex","val runIndex: Int","dev.tesserakt.benchmarking.RunId.runIndex"]},{"name":"abstract class QueryExecutionTest(val queryString: String, val store: Store) : Test","description":"sparql.types.QueryExecutionTest","location":"sparql/validator/sparql.types/-query-execution-test/index.html","searchKeys":["QueryExecutionTest","abstract class QueryExecutionTest(val queryString: String, val store: Store) : Test","sparql.types.QueryExecutionTest"]},{"name":"actual fun readFile(filepath: String): Result<String>","description":"sparql.readFile","location":"sparql/validator/sparql/read-file.html","searchKeys":["readFile","actual fun readFile(filepath: String): Result<String>","sparql.readFile"]},{"name":"class Builder(query: Query<Bindings>, store: Store, deltas: List<DataDelta>)","description":"sparql.types.RandomUpdateTest.Result.Builder","location":"sparql/validator/sparql.types/-random-update-test/-result/-builder/index.html","searchKeys":["Builder","class Builder(query: Query<Bindings>, store: Store, deltas: List<DataDelta>)","sparql.types.RandomUpdateTest.Result.Builder"]},{"name":"class Builder(store: Store)","description":"sparql.types.IncrementalUpdateTest.Result.Builder","location":"sparql/validator/sparql.types/-incremental-update-test/-result/-builder/index.html","searchKeys":["Builder","class Builder(store: Store)","sparql.types.IncrementalUpdateTest.Result.Builder"]},{"name":"class IncrementalUpdateTest(query: String, val store: Store) : QueryExecutionTest","description":"sparql.types.IncrementalUpdateTest","location":"sparql/validator/sparql.types/-incremental-update-test/index.html","searchKeys":["IncrementalUpdateTest","class IncrementalUpdateTest(query: String, val store: Store) : QueryExecutionTest","sparql.types.IncrementalUpdateTest"]},{"name":"class OutputComparisonTest(query: String, val store: Store) : QueryExecutionTest","description":"sparql.types.OutputComparisonTest","location":"sparql/validator/sparql.types/-output-comparison-test/index.html","searchKeys":["OutputComparisonTest","class OutputComparisonTest(query: String, val store: Store) : QueryExecutionTest","sparql.types.OutputComparisonTest"]},{"name":"class RandomUpdateTest(query: String, val store: Store, val seed: Int = 1, val iterations: Int = store.size * 200) : QueryExecutionTest","description":"sparql.types.RandomUpdateTest","location":"sparql/validator/sparql.types/-random-update-test/index.html","searchKeys":["RandomUpdateTest","class RandomUpdateTest(query: String, val store: Store, val seed: Int = 1, val iterations: Int = store.size * 200) : QueryExecutionTest","sparql.types.RandomUpdateTest"]},{"name":"class TestBuilder(environment: TestBuilderEnv, store: Store)","description":"sparql.types.TestBuilder","location":"sparql/validator/sparql.types/-test-builder/index.html","searchKeys":["TestBuilder","class TestBuilder(environment: TestBuilderEnv, store: Store)","sparql.types.TestBuilder"]},{"name":"class TestBuilderEnv","description":"sparql.types.TestBuilderEnv","location":"sparql/validator/sparql.types/-test-builder-env/index.html","searchKeys":["TestBuilderEnv","class TestBuilderEnv","sparql.types.TestBuilderEnv"]},{"name":"constructor()","description":"comunica.ComunicaBinding.ComunicaBinding","location":"sparql/validator/comunica/-comunica-binding/-comunica-binding.html","searchKeys":["ComunicaBinding","constructor()","comunica.ComunicaBinding.ComunicaBinding"]},{"name":"constructor()","description":"comunica.ComunicaBindingStream.ComunicaBindingStream","location":"sparql/validator/comunica/-comunica-binding-stream/-comunica-binding-stream.html","searchKeys":["ComunicaBindingStream","constructor()","comunica.ComunicaBindingStream.ComunicaBindingStream"]},{"name":"constructor()","description":"comunica.ComunicaQueryEngine.ComunicaQueryEngine","location":"sparql/validator/comunica/-comunica-query-engine/-comunica-query-engine.html","searchKeys":["ComunicaQueryEngine","constructor()","comunica.ComunicaQueryEngine.ComunicaQueryEngine"]},{"name":"constructor()","description":"sparql.types.TestBuilderEnv.TestBuilderEnv","location":"sparql/validator/sparql.types/-test-builder-env/-test-builder-env.html","searchKeys":["TestBuilderEnv","constructor()","sparql.types.TestBuilderEnv.TestBuilderEnv"]},{"name":"constructor(environment: TestBuilderEnv, store: Store)","description":"sparql.types.TestBuilder.TestBuilder","location":"sparql/validator/sparql.types/-test-builder/-test-builder.html","searchKeys":["TestBuilder","constructor(environment: TestBuilderEnv, store: Store)","sparql.types.TestBuilder.TestBuilder"]},{"name":"constructor(query: Query<Bindings>, store: Store, deltas: List<DataDelta>)","description":"sparql.types.RandomUpdateTest.Result.Builder.Builder","location":"sparql/validator/sparql.types/-random-update-test/-result/-builder/-builder.html","searchKeys":["Builder","constructor(query: Query<Bindings>, store: Store, deltas: List<DataDelta>)","sparql.types.RandomUpdateTest.Result.Builder.Builder"]},{"name":"constructor(query: String, store: Store)","description":"sparql.types.IncrementalUpdateTest.IncrementalUpdateTest","location":"sparql/validator/sparql.types/-incremental-update-test/-incremental-update-test.html","searchKeys":["IncrementalUpdateTest","constructor(query: String, store: Store)","sparql.types.IncrementalUpdateTest.IncrementalUpdateTest"]},{"name":"constructor(query: String, store: Store)","description":"sparql.types.OutputComparisonTest.OutputComparisonTest","location":"sparql/validator/sparql.types/-output-comparison-test/-output-comparison-test.html","searchKeys":["OutputComparisonTest","constructor(query: String, store: Store)","sparql.types.OutputComparisonTest.OutputComparisonTest"]},{"name":"constructor(query: String, store: Store)","description":"sparql.types.QueryExecutionTestValues.QueryExecutionTestValues","location":"sparql/validator/sparql.types/-query-execution-test-values/-query-execution-test-values.html","searchKeys":["QueryExecutionTestValues","constructor(query: String, store: Store)","sparql.types.QueryExecutionTestValues.QueryExecutionTestValues"]},{"name":"constructor(query: String, store: Store, seed: Int = 1, iterations: Int = store.size * 200)","description":"sparql.types.RandomUpdateTest.RandomUpdateTest","location":"sparql/validator/sparql.types/-random-update-test/-random-update-test.html","searchKeys":["RandomUpdateTest","constructor(query: String, store: Store, seed: Int = 1, iterations: Int = store.size * 200)","sparql.types.RandomUpdateTest.RandomUpdateTest"]},{"name":"constructor(queryString: String, store: Store)","description":"sparql.types.QueryExecutionTest.QueryExecutionTest","location":"sparql/validator/sparql.types/-query-execution-test/-query-execution-test.html","searchKeys":["QueryExecutionTest","constructor(queryString: String, store: Store)","sparql.types.QueryExecutionTest.QueryExecutionTest"]},{"name":"constructor(received: List<Bindings>, expected: List<Bindings>, leftOver: List<Bindings>, missing: List<Bindings>, elapsedTime: Duration, referenceTime: Duration, debugInformation: String)","description":"sparql.types.OutputComparisonTest.Result.Result","location":"sparql/validator/sparql.types/-output-comparison-test/-result/-result.html","searchKeys":["Result","constructor(received: List<Bindings>, expected: List<Bindings>, leftOver: List<Bindings>, missing: List<Bindings>, elapsedTime: Duration, referenceTime: Duration, debugInformation: String)","sparql.types.OutputComparisonTest.Result.Result"]},{"name":"constructor(store: Store)","description":"sparql.types.IncrementalUpdateTest.Result.Builder.Builder","location":"sparql/validator/sparql.types/-incremental-update-test/-result/-builder/-builder.html","searchKeys":["Builder","constructor(store: Store)","sparql.types.IncrementalUpdateTest.Result.Builder.Builder"]},{"name":"constructor(store: Store, outputs: List<OutputComparisonTest.Result>)","description":"sparql.types.IncrementalUpdateTest.Result.Result","location":"sparql/validator/sparql.types/-incremental-update-test/-result/-result.html","searchKeys":["Result","constructor(store: Store, outputs: List<OutputComparisonTest.Result>)","sparql.types.IncrementalUpdateTest.Result.Result"]},{"name":"constructor(store: Store, query: Query<Bindings>, outputs: List<OutputComparisonTest.Result>, deltas: List<DataDelta>)","description":"sparql.types.RandomUpdateTest.Result.Result","location":"sparql/validator/sparql.types/-random-update-test/-result/-result.html","searchKeys":["Result","constructor(store: Store, query: Query<Bindings>, outputs: List<OutputComparisonTest.Result>, deltas: List<DataDelta>)","sparql.types.RandomUpdateTest.Result.Result"]},{"name":"data class QueryExecutionTestValues(val query: String, val store: Store)","description":"sparql.types.QueryExecutionTestValues","location":"sparql/validator/sparql.types/-query-execution-test-values/index.html","searchKeys":["QueryExecutionTestValues","data class QueryExecutionTestValues(val query: String, val store: Store)","sparql.types.QueryExecutionTestValues"]},{"name":"data class Result(val received: List<Bindings>, val expected: List<Bindings>, val leftOver: List<Bindings>, val missing: List<Bindings>, val elapsedTime: Duration, val referenceTime: Duration, val debugInformation: String) : Test.Result","description":"sparql.types.OutputComparisonTest.Result","location":"sparql/validator/sparql.types/-output-comparison-test/-result/index.html","searchKeys":["Result","data class Result(val received: List<Bindings>, val expected: List<Bindings>, val leftOver: List<Bindings>, val missing: List<Bindings>, val elapsedTime: Duration, val referenceTime: Duration, val debugInformation: String) : Test.Result","sparql.types.OutputComparisonTest.Result"]},{"name":"data class Result(val store: Store, val outputs: List<OutputComparisonTest.Result>) : Test.Result","description":"sparql.types.IncrementalUpdateTest.Result","location":"sparql/validator/sparql.types/-incremental-update-test/-result/index.html","searchKeys":["Result","data class Result(val store: Store, val outputs: List<OutputComparisonTest.Result>) : Test.Result","sparql.types.IncrementalUpdateTest.Result"]},{"name":"data class Result(val store: Store, val query: Query<Bindings>, val outputs: List<OutputComparisonTest.Result>, val deltas: List<DataDelta>) : Test.Result","description":"sparql.types.RandomUpdateTest.Result","location":"sparql/validator/sparql.types/-random-update-test/-result/index.html","searchKeys":["Result","data class Result(val store: Store, val query: Query<Bindings>, val outputs: List<OutputComparisonTest.Result>, val deltas: List<DataDelta>) : Test.Result","sparql.types.RandomUpdateTest.Result"]},{"name":"expect class ExternalQueryExecution(query: String, data: Collection<Quad>)","description":"sparql.ExternalQueryExecution","location":"sparql/validator/sparql/-external-query-execution/index.html","searchKeys":["ExternalQueryExecution","expect class ExternalQueryExecution(query: String, data: Collection<Quad>)","sparql.ExternalQueryExecution"]},{"name":"expect constructor(query: String, data: Collection<Quad>)","description":"sparql.ExternalQueryExecution.ExternalQueryExecution","location":"sparql/validator/sparql/-external-query-execution/-external-query-execution.html","searchKeys":["ExternalQueryExecution","expect constructor(query: String, data: Collection<Quad>)","sparql.ExternalQueryExecution.ExternalQueryExecution"]},{"name":"expect fun awaitBenchmarkStart()","description":"sparql.tests.awaitBenchmarkStart","location":"sparql/validator/sparql.tests/await-benchmark-start.html","searchKeys":["awaitBenchmarkStart","expect fun awaitBenchmarkStart()","sparql.tests.awaitBenchmarkStart"]},{"name":"expect fun report(): String","description":"sparql.ExternalQueryExecution.report","location":"sparql/validator/sparql/-external-query-execution/report.html","searchKeys":["report","expect fun report(): String","sparql.ExternalQueryExecution.report"]},{"name":"expect suspend fun execute(): List<Bindings>","description":"sparql.ExternalQueryExecution.execute","location":"sparql/validator/sparql/-external-query-execution/execute.html","searchKeys":["execute","expect suspend fun execute(): List<Bindings>","sparql.ExternalQueryExecution.execute"]},{"name":"external class ComunicaBinding","description":"comunica.ComunicaBinding","location":"sparql/validator/comunica/-comunica-binding/index.html","searchKeys":["ComunicaBinding","external class ComunicaBinding","comunica.ComunicaBinding"]},{"name":"external class ComunicaBindingStream","description":"comunica.ComunicaBindingStream","location":"sparql/validator/comunica/-comunica-binding-stream/index.html","searchKeys":["ComunicaBindingStream","external class ComunicaBindingStream","comunica.ComunicaBindingStream"]},{"name":"external class ComunicaQueryEngine","description":"comunica.ComunicaQueryEngine","location":"sparql/validator/comunica/-comunica-query-engine/index.html","searchKeys":["ComunicaQueryEngine","external class ComunicaQueryEngine","comunica.ComunicaQueryEngine"]},{"name":"external val process: dynamic","description":"process","location":"sparql/validator/[root]/process.html","searchKeys":["process","external val process: dynamic","process"]},{"name":"fun GraphPattern.has(callback: (pattern: TriplePattern) -> Boolean): Boolean","description":"sparql.tests.DefaultTestFiltering.has","location":"sparql/validator/sparql.tests/-default-test-filtering/has.html","searchKeys":["has","fun GraphPattern.has(callback: (pattern: TriplePattern) -> Boolean): Boolean","sparql.tests.DefaultTestFiltering.has"]},{"name":"fun add(self: Pair<Duration, List<Bindings>>, reference: Pair<Duration, List<Bindings>>, debugInformation: String)","description":"sparql.types.IncrementalUpdateTest.Result.Builder.add","location":"sparql/validator/sparql.types/-incremental-update-test/-result/-builder/add.html","searchKeys":["add","fun add(self: Pair<Duration, List<Bindings>>, reference: Pair<Duration, List<Bindings>>, debugInformation: String)","sparql.types.IncrementalUpdateTest.Result.Builder.add"]},{"name":"fun add(self: Pair<Duration, List<Bindings>>, reference: Pair<Duration, List<Bindings>>, debugInformation: String)","description":"sparql.types.RandomUpdateTest.Result.Builder.add","location":"sparql/validator/sparql.types/-random-update-test/-result/-builder/add.html","searchKeys":["add","fun add(self: Pair<Duration, List<Bindings>>, reference: Pair<Duration, List<Bindings>>, debugInformation: String)","sparql.types.RandomUpdateTest.Result.Builder.add"]},{"name":"fun bindingComparisonOf(a: Iterable<Bindings>, b: Iterable<Bindings>): Comparison<Bindings>","description":"bindingComparisonOf","location":"sparql/validator/[root]/binding-comparison-of.html","searchKeys":["bindingComparisonOf","fun bindingComparisonOf(a: Iterable<Bindings>, b: Iterable<Bindings>): Comparison<Bindings>","bindingComparisonOf"]},{"name":"fun build(): IncrementalUpdateTest.Result","description":"sparql.types.IncrementalUpdateTest.Result.Builder.build","location":"sparql/validator/sparql.types/-incremental-update-test/-result/-builder/build.html","searchKeys":["build","fun build(): IncrementalUpdateTest.Result","sparql.types.IncrementalUpdateTest.Result.Builder.build"]},{"name":"fun build(): RandomUpdateTest.Result","description":"sparql.types.RandomUpdateTest.Result.Builder.build","location":"sparql/validator/sparql.types/-random-update-test/-result/-builder/build.html","searchKeys":["build","fun build(): RandomUpdateTest.Result","sparql.types.RandomUpdateTest.Result.Builder.build"]},{"name":"fun builtinTests(): TestBuilderEnv","description":"sparql.tests.builtinTests","location":"sparql/validator/sparql.tests/builtin-tests.html","searchKeys":["builtinTests","fun builtinTests(): TestBuilderEnv","sparql.tests.builtinTests"]},{"name":"fun compare(received: List<Bindings>, expected: List<Bindings>, elapsedTime: Duration, referenceTime: Duration, debugInformation: String): OutputComparisonTest.Result","description":"sparql.types.compare","location":"sparql/validator/sparql.types/compare.html","searchKeys":["compare","fun compare(received: List<Bindings>, expected: List<Bindings>, elapsedTime: Duration, referenceTime: Duration, debugInformation: String): OutputComparisonTest.Result","sparql.types.compare"]},{"name":"fun compareIncrementalBasicGraphPatternOutput(datasetFilepath: String, queryFilepath: String): TestBuilderEnv","description":"sparql.tests.compareIncrementalBasicGraphPatternOutput","location":"sparql/validator/sparql.tests/compare-incremental-basic-graph-pattern-output.html","searchKeys":["compareIncrementalBasicGraphPatternOutput","fun compareIncrementalBasicGraphPatternOutput(datasetFilepath: String, queryFilepath: String): TestBuilderEnv","sparql.tests.compareIncrementalBasicGraphPatternOutput"]},{"name":"fun compareIncrementalChainSelectOutput(size: Int = 500, depth: Int = 7, entropy: Float = 3.0f, seed: Int = Random.nextInt()): TestBuilderEnv","description":"sparql.tests.compareIncrementalChainSelectOutput","location":"sparql/validator/sparql.tests/compare-incremental-chain-select-output.html","searchKeys":["compareIncrementalChainSelectOutput","fun compareIncrementalChainSelectOutput(size: Int = 500, depth: Int = 7, entropy: Float = 3.0f, seed: Int = Random.nextInt()): TestBuilderEnv","sparql.tests.compareIncrementalChainSelectOutput"]},{"name":"fun compareIncrementalStarSelectOutput(size: Int = 200, depth: Int = 5, entropy: Float = 3.0f, seed: Int = Random.nextInt()): TestBuilderEnv","description":"sparql.tests.compareIncrementalStarSelectOutput","location":"sparql/validator/sparql.tests/compare-incremental-star-select-output.html","searchKeys":["compareIncrementalStarSelectOutput","fun compareIncrementalStarSelectOutput(size: Int = 200, depth: Int = 5, entropy: Float = 3.0f, seed: Int = Random.nextInt()): TestBuilderEnv","sparql.tests.compareIncrementalStarSelectOutput"]},{"name":"fun from(received: List<Bindings>, expected: List<Bindings>, elapsedTime: Duration, referenceTime: Duration, debugInformation: String): OutputComparisonTest.Result","description":"sparql.types.OutputComparisonTest.Result.Companion.from","location":"sparql/validator/sparql.types/-output-comparison-test/-result/-companion/from.html","searchKeys":["from","fun from(received: List<Bindings>, expected: List<Bindings>, elapsedTime: Duration, referenceTime: Duration, debugInformation: String): OutputComparisonTest.Result","sparql.types.OutputComparisonTest.Result.Companion.from"]},{"name":"fun get(name: String): N3Term?","description":"comunica.ComunicaBinding.get","location":"sparql/validator/comunica/-comunica-binding/get.html","searchKeys":["get","fun get(name: String): N3Term?","comunica.ComunicaBinding.get"]},{"name":"fun isNotEmpty(): Boolean","description":"sparql.types.OutputComparisonTest.Result.isNotEmpty","location":"sparql/validator/sparql.types/-output-comparison-test/-result/is-not-empty.html","searchKeys":["isNotEmpty","fun isNotEmpty(): Boolean","sparql.types.OutputComparisonTest.Result.isNotEmpty"]},{"name":"fun query(query: String, options: dynamic): Promise<ComunicaBindingStream>","description":"comunica.ComunicaQueryEngine.query","location":"sparql/validator/comunica/-comunica-query-engine/query.html","searchKeys":["query","fun query(query: String, options: dynamic): Promise<ComunicaBindingStream>","comunica.ComunicaQueryEngine.query"]},{"name":"fun test(mapper: (QueryExecutionTestValues) -> Test): TestEnvironment","description":"sparql.types.TestBuilderEnv.test","location":"sparql/validator/sparql.types/-test-builder-env/test.html","searchKeys":["test","fun test(mapper: (QueryExecutionTestValues) -> Test): TestEnvironment","sparql.types.TestBuilderEnv.test"]},{"name":"fun toArray(): Promise<Array<ComunicaBinding>>","description":"comunica.ComunicaBindingStream.toArray","location":"sparql/validator/comunica/-comunica-binding-stream/to-array.html","searchKeys":["toArray","fun toArray(): Promise<Array<ComunicaBinding>>","comunica.ComunicaBindingStream.toArray"]},{"name":"fun toIncrementalUpdateTest(): IncrementalUpdateTest","description":"sparql.types.QueryExecutionTestValues.toIncrementalUpdateTest","location":"sparql/validator/sparql.types/-query-execution-test-values/to-incremental-update-test.html","searchKeys":["toIncrementalUpdateTest","fun toIncrementalUpdateTest(): IncrementalUpdateTest","sparql.types.QueryExecutionTestValues.toIncrementalUpdateTest"]},{"name":"fun toOutputComparisonTest(): OutputComparisonTest","description":"sparql.types.QueryExecutionTestValues.toOutputComparisonTest","location":"sparql/validator/sparql.types/-query-execution-test-values/to-output-comparison-test.html","searchKeys":["toOutputComparisonTest","fun toOutputComparisonTest(): OutputComparisonTest","sparql.types.QueryExecutionTestValues.toOutputComparisonTest"]},{"name":"fun toPrettyString(): String","description":"comunica.ComunicaBinding.toPrettyString","location":"sparql/validator/comunica/-comunica-binding/to-pretty-string.html","searchKeys":["toPrettyString","fun toPrettyString(): String","comunica.ComunicaBinding.toPrettyString"]},{"name":"fun toRandomUpdateTest(): RandomUpdateTest","description":"sparql.types.QueryExecutionTestValues.toRandomUpdateTest","location":"sparql/validator/sparql.types/-query-execution-test-values/to-random-update-test.html","searchKeys":["toRandomUpdateTest","fun toRandomUpdateTest(): RandomUpdateTest","sparql.types.QueryExecutionTestValues.toRandomUpdateTest"]},{"name":"fun using(store: Store): TestBuilder","description":"sparql.types.TestBuilderEnv.using","location":"sparql/validator/sparql.types/-test-builder-env/using.html","searchKeys":["using","fun using(store: Store): TestBuilder","sparql.types.TestBuilderEnv.using"]},{"name":"infix fun test(query: String)","description":"sparql.types.TestBuilder.test","location":"sparql/validator/sparql.types/-test-builder/test.html","searchKeys":["test","infix fun test(query: String)","sparql.types.TestBuilder.test"]},{"name":"inline fun tests(block: TestBuilderEnv.() -> Unit): TestBuilderEnv","description":"sparql.types.tests","location":"sparql/validator/sparql.types/tests.html","searchKeys":["tests","inline fun tests(block: TestBuilderEnv.() -> Unit): TestBuilderEnv","sparql.types.tests"]},{"name":"object Companion","description":"sparql.types.OutputComparisonTest.Result.Companion","location":"sparql/validator/sparql.types/-output-comparison-test/-result/-companion/index.html","searchKeys":["Companion","object Companion","sparql.types.OutputComparisonTest.Result.Companion"]},{"name":"object DefaultTestFiltering : TestFilter","description":"sparql.tests.DefaultTestFiltering","location":"sparql/validator/sparql.tests/-default-test-filtering/index.html","searchKeys":["DefaultTestFiltering","object DefaultTestFiltering : TestFilter","sparql.tests.DefaultTestFiltering"]},{"name":"object FOAF : Ontology","description":"sparql.tests.FOAF","location":"sparql/validator/sparql.tests/-f-o-a-f/index.html","searchKeys":["FOAF","object FOAF : Ontology","sparql.tests.FOAF"]},{"name":"open override fun exceptionOrNull(): Throwable?","description":"sparql.types.IncrementalUpdateTest.Result.exceptionOrNull","location":"sparql/validator/sparql.types/-incremental-update-test/-result/exception-or-null.html","searchKeys":["exceptionOrNull","open override fun exceptionOrNull(): Throwable?","sparql.types.IncrementalUpdateTest.Result.exceptionOrNull"]},{"name":"open override fun exceptionOrNull(): Throwable?","description":"sparql.types.OutputComparisonTest.Result.exceptionOrNull","location":"sparql/validator/sparql.types/-output-comparison-test/-result/exception-or-null.html","searchKeys":["exceptionOrNull","open override fun exceptionOrNull(): Throwable?","sparql.types.OutputComparisonTest.Result.exceptionOrNull"]},{"name":"open override fun exceptionOrNull(): Throwable?","description":"sparql.types.RandomUpdateTest.Result.exceptionOrNull","location":"sparql/validator/sparql.types/-random-update-test/-result/exception-or-null.html","searchKeys":["exceptionOrNull","open override fun exceptionOrNull(): Throwable?","sparql.types.RandomUpdateTest.Result.exceptionOrNull"]},{"name":"open override fun isSuccess(): Boolean","description":"sparql.types.IncrementalUpdateTest.Result.isSuccess","location":"sparql/validator/sparql.types/-incremental-update-test/-result/is-success.html","searchKeys":["isSuccess","open override fun isSuccess(): Boolean","sparql.types.IncrementalUpdateTest.Result.isSuccess"]},{"name":"open override fun isSuccess(): Boolean","description":"sparql.types.OutputComparisonTest.Result.isSuccess","location":"sparql/validator/sparql.types/-output-comparison-test/-result/is-success.html","searchKeys":["isSuccess","open override fun isSuccess(): Boolean","sparql.types.OutputComparisonTest.Result.isSuccess"]},{"name":"open override fun isSuccess(): Boolean","description":"sparql.types.RandomUpdateTest.Result.isSuccess","location":"sparql/validator/sparql.types/-random-update-test/-result/is-success.html","searchKeys":["isSuccess","open override fun isSuccess(): Boolean","sparql.types.RandomUpdateTest.Result.isSuccess"]},{"name":"open override fun shouldSkip(test: Test): Boolean","description":"sparql.tests.DefaultTestFiltering.shouldSkip","location":"sparql/validator/sparql.tests/-default-test-filtering/should-skip.html","searchKeys":["shouldSkip","open override fun shouldSkip(test: Test): Boolean","sparql.tests.DefaultTestFiltering.shouldSkip"]},{"name":"open override fun toString(): String","description":"sparql.types.IncrementalUpdateTest.Result.toString","location":"sparql/validator/sparql.types/-incremental-update-test/-result/to-string.html","searchKeys":["toString","open override fun toString(): String","sparql.types.IncrementalUpdateTest.Result.toString"]},{"name":"open override fun toString(): String","description":"sparql.types.IncrementalUpdateTest.toString","location":"sparql/validator/sparql.types/-incremental-update-test/to-string.html","searchKeys":["toString","open override fun toString(): String","sparql.types.IncrementalUpdateTest.toString"]},{"name":"open override fun toString(): String","description":"sparql.types.OutputComparisonTest.Result.toString","location":"sparql/validator/sparql.types/-output-comparison-test/-result/to-string.html","searchKeys":["toString","open override fun toString(): String","sparql.types.OutputComparisonTest.Result.toString"]},{"name":"open override fun toString(): String","description":"sparql.types.OutputComparisonTest.toString","location":"sparql/validator/sparql.types/-output-comparison-test/to-string.html","searchKeys":["toString","open override fun toString(): String","sparql.types.OutputComparisonTest.toString"]},{"name":"open override fun toString(): String","description":"sparql.types.RandomUpdateTest.Result.toString","location":"sparql/validator/sparql.types/-random-update-test/-result/to-string.html","searchKeys":["toString","open override fun toString(): String","sparql.types.RandomUpdateTest.Result.toString"]},{"name":"open override fun toString(): String","description":"sparql.types.RandomUpdateTest.toString","location":"sparql/validator/sparql.types/-random-update-test/to-string.html","searchKeys":["toString","open override fun toString(): String","sparql.types.RandomUpdateTest.toString"]},{"name":"open override val base_uri: String","description":"sparql.tests.FOAF.base_uri","location":"sparql/validator/sparql.tests/-f-o-a-f/base_uri.html","searchKeys":["base_uri","open override val base_uri: String","sparql.tests.FOAF.base_uri"]},{"name":"open override val prefix: String","description":"sparql.tests.FOAF.prefix","location":"sparql/validator/sparql.tests/-f-o-a-f/prefix.html","searchKeys":["prefix","open override val prefix: String","sparql.tests.FOAF.prefix"]},{"name":"open suspend override fun test(): Test.Result","description":"sparql.types.IncrementalUpdateTest.test","location":"sparql/validator/sparql.types/-incremental-update-test/test.html","searchKeys":["test","open suspend override fun test(): Test.Result","sparql.types.IncrementalUpdateTest.test"]},{"name":"open suspend override fun test(): Test.Result","description":"sparql.types.OutputComparisonTest.test","location":"sparql/validator/sparql.types/-output-comparison-test/test.html","searchKeys":["test","open suspend override fun test(): Test.Result","sparql.types.OutputComparisonTest.test"]},{"name":"open suspend override fun test(): Test.Result","description":"sparql.types.RandomUpdateTest.test","location":"sparql/validator/sparql.types/-random-update-test/test.html","searchKeys":["test","open suspend override fun test(): Test.Result","sparql.types.RandomUpdateTest.test"]},{"name":"suspend fun N3Store.comunicaSelectQuery(query: String): List<Bindings>","description":"comunica.comunicaSelectQuery","location":"sparql/validator/comunica/comunica-select-query.html","searchKeys":["comunicaSelectQuery","suspend fun N3Store.comunicaSelectQuery(query: String): List<Bindings>","comunica.comunicaSelectQuery"]},{"name":"suspend fun Store.comunicaSelectQuery(query: String): List<Bindings>","description":"comunica.comunicaSelectQuery","location":"sparql/validator/comunica/comunica-select-query.html","searchKeys":["comunicaSelectQuery","suspend fun Store.comunicaSelectQuery(query: String): List<Bindings>","comunica.comunicaSelectQuery"]},{"name":"suspend fun compareIncrementalStoreReplay(benchmarkFilepath: String)","description":"sparql.tests.compareIncrementalStoreReplay","location":"sparql/validator/sparql.tests/compare-incremental-store-replay.html","searchKeys":["compareIncrementalStoreReplay","suspend fun compareIncrementalStoreReplay(benchmarkFilepath: String)","sparql.tests.compareIncrementalStoreReplay"]},{"name":"suspend fun main(args: Array<String>)","description":"main","location":"sparql/validator/[root]/[js]main.html","searchKeys":["main","suspend fun main(args: Array<String>)","main"]},{"name":"suspend fun main(args: Array<String>)","description":"main","location":"sparql/validator/[root]/[jvm]main.html","searchKeys":["main","suspend fun main(args: Array<String>)","main"]},{"name":"suspend fun run(args: Array<String>)","description":"run","location":"sparql/validator/[root]/run.html","searchKeys":["run","suspend fun run(args: Array<String>)","run"]},{"name":"val Person: Quad.NamedTerm","description":"sparql.tests.FOAF.Person","location":"sparql/validator/sparql.tests/-f-o-a-f/-person.html","searchKeys":["Person","val Person: Quad.NamedTerm","sparql.tests.FOAF.Person"]},{"name":"val age: Quad.NamedTerm","description":"sparql.tests.FOAF.age","location":"sparql/validator/sparql.tests/-f-o-a-f/age.html","searchKeys":["age","val age: Quad.NamedTerm","sparql.tests.FOAF.age"]},{"name":"val based_near: Quad.NamedTerm","description":"sparql.tests.FOAF.based_near","location":"sparql/validator/sparql.tests/-f-o-a-f/based_near.html","searchKeys":["based_near","val based_near: Quad.NamedTerm","sparql.tests.FOAF.based_near"]},{"name":"val debugInformation: String","description":"sparql.types.OutputComparisonTest.Result.debugInformation","location":"sparql/validator/sparql.types/-output-comparison-test/-result/debug-information.html","searchKeys":["debugInformation","val debugInformation: String","sparql.types.OutputComparisonTest.Result.debugInformation"]},{"name":"val deltas: List<DataDelta>","description":"sparql.types.RandomUpdateTest.Result.deltas","location":"sparql/validator/sparql.types/-random-update-test/-result/deltas.html","searchKeys":["deltas","val deltas: List<DataDelta>","sparql.types.RandomUpdateTest.Result.deltas"]},{"name":"val elapsedTime: Duration","description":"sparql.types.OutputComparisonTest.Result.elapsedTime","location":"sparql/validator/sparql.types/-output-comparison-test/-result/elapsed-time.html","searchKeys":["elapsedTime","val elapsedTime: Duration","sparql.types.OutputComparisonTest.Result.elapsedTime"]},{"name":"val expected: List<Bindings>","description":"sparql.types.OutputComparisonTest.Result.expected","location":"sparql/validator/sparql.types/-output-comparison-test/-result/expected.html","searchKeys":["expected","val expected: List<Bindings>","sparql.types.OutputComparisonTest.Result.expected"]},{"name":"val iterations: Int","description":"sparql.types.RandomUpdateTest.iterations","location":"sparql/validator/sparql.types/-random-update-test/iterations.html","searchKeys":["iterations","val iterations: Int","sparql.types.RandomUpdateTest.iterations"]},{"name":"val knows: Quad.NamedTerm","description":"sparql.tests.FOAF.knows","location":"sparql/validator/sparql.tests/-f-o-a-f/knows.html","searchKeys":["knows","val knows: Quad.NamedTerm","sparql.tests.FOAF.knows"]},{"name":"val leftOver: List<Bindings>","description":"sparql.types.OutputComparisonTest.Result.leftOver","location":"sparql/validator/sparql.types/-output-comparison-test/-result/left-over.html","searchKeys":["leftOver","val leftOver: List<Bindings>","sparql.types.OutputComparisonTest.Result.leftOver"]},{"name":"val missing: List<Bindings>","description":"sparql.types.OutputComparisonTest.Result.missing","location":"sparql/validator/sparql.types/-output-comparison-test/-result/missing.html","searchKeys":["missing","val missing: List<Bindings>","sparql.types.OutputComparisonTest.Result.missing"]},{"name":"val outputs: List<OutputComparisonTest.Result>","description":"sparql.types.IncrementalUpdateTest.Result.outputs","location":"sparql/validator/sparql.types/-incremental-update-test/-result/outputs.html","searchKeys":["outputs","val outputs: List<OutputComparisonTest.Result>","sparql.types.IncrementalUpdateTest.Result.outputs"]},{"name":"val outputs: List<OutputComparisonTest.Result>","description":"sparql.types.RandomUpdateTest.Result.outputs","location":"sparql/validator/sparql.types/-random-update-test/-result/outputs.html","searchKeys":["outputs","val outputs: List<OutputComparisonTest.Result>","sparql.types.RandomUpdateTest.Result.outputs"]},{"name":"val query: Query<Bindings>","description":"sparql.types.QueryExecutionTest.query","location":"sparql/validator/sparql.types/-query-execution-test/query.html","searchKeys":["query","val query: Query<Bindings>","sparql.types.QueryExecutionTest.query"]},{"name":"val query: Query<Bindings>","description":"sparql.types.RandomUpdateTest.Result.query","location":"sparql/validator/sparql.types/-random-update-test/-result/query.html","searchKeys":["query","val query: Query<Bindings>","sparql.types.RandomUpdateTest.Result.query"]},{"name":"val query: String","description":"sparql.types.QueryExecutionTestValues.query","location":"sparql/validator/sparql.types/-query-execution-test-values/query.html","searchKeys":["query","val query: String","sparql.types.QueryExecutionTestValues.query"]},{"name":"val queryString: String","description":"sparql.types.QueryExecutionTest.queryString","location":"sparql/validator/sparql.types/-query-execution-test/query-string.html","searchKeys":["queryString","val queryString: String","sparql.types.QueryExecutionTest.queryString"]},{"name":"val received: List<Bindings>","description":"sparql.types.OutputComparisonTest.Result.received","location":"sparql/validator/sparql.types/-output-comparison-test/-result/received.html","searchKeys":["received","val received: List<Bindings>","sparql.types.OutputComparisonTest.Result.received"]},{"name":"val referenceTime: Duration","description":"sparql.types.OutputComparisonTest.Result.referenceTime","location":"sparql/validator/sparql.types/-output-comparison-test/-result/reference-time.html","searchKeys":["referenceTime","val referenceTime: Duration","sparql.types.OutputComparisonTest.Result.referenceTime"]},{"name":"val seed: Int = 1","description":"sparql.types.RandomUpdateTest.seed","location":"sparql/validator/sparql.types/-random-update-test/seed.html","searchKeys":["seed","val seed: Int = 1","sparql.types.RandomUpdateTest.seed"]},{"name":"val store: Store","description":"sparql.types.IncrementalUpdateTest.Result.store","location":"sparql/validator/sparql.types/-incremental-update-test/-result/store.html","searchKeys":["store","val store: Store","sparql.types.IncrementalUpdateTest.Result.store"]},{"name":"val store: Store","description":"sparql.types.QueryExecutionTest.store","location":"sparql/validator/sparql.types/-query-execution-test/store.html","searchKeys":["store","val store: Store","sparql.types.QueryExecutionTest.store"]},{"name":"val store: Store","description":"sparql.types.QueryExecutionTestValues.store","location":"sparql/validator/sparql.types/-query-execution-test-values/store.html","searchKeys":["store","val store: Store","sparql.types.QueryExecutionTestValues.store"]},{"name":"val store: Store","description":"sparql.types.RandomUpdateTest.Result.store","location":"sparql/validator/sparql.types/-random-update-test/-result/store.html","searchKeys":["store","val store: Store","sparql.types.RandomUpdateTest.Result.store"]},{"name":"val structure: QueryStructure","description":"sparql.types.QueryExecutionTest.structure","location":"sparql/validator/sparql.types/-query-execution-test/structure.html","searchKeys":["structure","val structure: QueryStructure","sparql.types.QueryExecutionTest.structure"]},{"name":"val tests: MutableList<QueryExecutionTestValues>","description":"sparql.types.TestBuilderEnv.tests","location":"sparql/validator/sparql.types/-test-builder-env/tests.html","searchKeys":["tests","val tests: MutableList<QueryExecutionTestValues>","sparql.types.TestBuilderEnv.tests"]},{"name":"var filter: TestFilter","description":"sparql.types.TestBuilderEnv.filter","location":"sparql/validator/sparql.types/-test-builder-env/filter.html","searchKeys":["filter","var filter: TestFilter","sparql.types.TestBuilderEnv.filter"]},{"name":"abstract class Reference : Evaluator","description":"dev.tesserakt.benchmarking.Reference","location":"testing/bench/sparql/core/dev.tesserakt.benchmarking/-reference/index.html","searchKeys":["Reference","abstract class Reference : Evaluator","dev.tesserakt.benchmarking.Reference"]},{"name":"abstract fun finish(): Evaluator.Output","description":"dev.tesserakt.benchmarking.Evaluator.finish","location":"testing/bench/sparql/core/dev.tesserakt.benchmarking/-evaluator/finish.html","searchKeys":["finish","abstract fun finish(): Evaluator.Output","dev.tesserakt.benchmarking.Evaluator.finish"]},{"name":"abstract fun prepare(diff: SnapshotStore.Diff)","description":"dev.tesserakt.benchmarking.Evaluator.prepare","location":"testing/bench/sparql/core/dev.tesserakt.benchmarking/-evaluator/prepare.html","searchKeys":["prepare","abstract fun prepare(diff: SnapshotStore.Diff)","dev.tesserakt.benchmarking.Evaluator.prepare"]},{"name":"abstract suspend fun eval()","description":"dev.tesserakt.benchmarking.Evaluator.eval","location":"testing/bench/sparql/core/dev.tesserakt.benchmarking/-evaluator/eval.html","searchKeys":["eval","abstract suspend fun eval()","dev.tesserakt.benchmarking.Evaluator.eval"]},{"name":"class Self(query: Query<Bindings>) : Evaluator","description":"dev.tesserakt.benchmarking.Self","location":"testing/bench/sparql/core/dev.tesserakt.benchmarking/-self/index.html","searchKeys":["Self","class Self(query: Query<Bindings>) : Evaluator","dev.tesserakt.benchmarking.Self"]},{"name":"constructor()","description":"dev.tesserakt.benchmarking.Reference.Reference","location":"testing/bench/sparql/core/dev.tesserakt.benchmarking/-reference/-reference.html","searchKeys":["Reference","constructor()","dev.tesserakt.benchmarking.Reference.Reference"]},{"name":"constructor(added: Int, removed: Int, checksum: Int)","description":"dev.tesserakt.benchmarking.Evaluator.Output.Output","location":"testing/bench/sparql/core/dev.tesserakt.benchmarking/-evaluator/-output/-output.html","searchKeys":["Output","constructor(added: Int, removed: Int, checksum: Int)","dev.tesserakt.benchmarking.Evaluator.Output.Output"]},{"name":"constructor(query: Query<Bindings>)","description":"dev.tesserakt.benchmarking.Self.Self","location":"testing/bench/sparql/core/dev.tesserakt.benchmarking/-self/-self.html","searchKeys":["Self","constructor(query: Query<Bindings>)","dev.tesserakt.benchmarking.Self.Self"]},{"name":"constructor(query: String)","description":"dev.tesserakt.benchmarking.Self.Self","location":"testing/bench/sparql/core/dev.tesserakt.benchmarking/-self/-self.html","searchKeys":["Self","constructor(query: String)","dev.tesserakt.benchmarking.Self.Self"]},{"name":"data class Output(val added: Int, val removed: Int, val checksum: Int)","description":"dev.tesserakt.benchmarking.Evaluator.Output","location":"testing/bench/sparql/core/dev.tesserakt.benchmarking/-evaluator/-output/index.html","searchKeys":["Output","data class Output(val added: Int, val removed: Int, val checksum: Int)","dev.tesserakt.benchmarking.Evaluator.Output"]},{"name":"fun compare(a: List<Any>, b: List<Any>, checksum: Int): Evaluator.Output","description":"dev.tesserakt.benchmarking.compare","location":"testing/bench/sparql/core/dev.tesserakt.benchmarking/compare.html","searchKeys":["compare","fun compare(a: List<Any>, b: List<Any>, checksum: Int): Evaluator.Output","dev.tesserakt.benchmarking.compare"]},{"name":"open override fun close()","description":"dev.tesserakt.benchmarking.Evaluator.close","location":"testing/bench/sparql/core/dev.tesserakt.benchmarking/-evaluator/close.html","searchKeys":["close","open override fun close()","dev.tesserakt.benchmarking.Evaluator.close"]},{"name":"open override fun finish(): Evaluator.Output","description":"dev.tesserakt.benchmarking.Self.finish","location":"testing/bench/sparql/core/dev.tesserakt.benchmarking/-self/finish.html","searchKeys":["finish","open override fun finish(): Evaluator.Output","dev.tesserakt.benchmarking.Self.finish"]},{"name":"open override fun prepare(diff: SnapshotStore.Diff)","description":"dev.tesserakt.benchmarking.Self.prepare","location":"testing/bench/sparql/core/dev.tesserakt.benchmarking/-self/prepare.html","searchKeys":["prepare","open override fun prepare(diff: SnapshotStore.Diff)","dev.tesserakt.benchmarking.Self.prepare"]},{"name":"open suspend override fun eval()","description":"dev.tesserakt.benchmarking.Self.eval","location":"testing/bench/sparql/core/dev.tesserakt.benchmarking/-self/eval.html","searchKeys":["eval","open suspend override fun eval()","dev.tesserakt.benchmarking.Self.eval"]},{"name":"sealed class Evaluator : AutoCloseable","description":"dev.tesserakt.benchmarking.Evaluator","location":"testing/bench/sparql/core/dev.tesserakt.benchmarking/-evaluator/index.html","searchKeys":["Evaluator","sealed class Evaluator : AutoCloseable","dev.tesserakt.benchmarking.Evaluator"]},{"name":"val added: Int","description":"dev.tesserakt.benchmarking.Evaluator.Output.added","location":"testing/bench/sparql/core/dev.tesserakt.benchmarking/-evaluator/-output/added.html","searchKeys":["added","val added: Int","dev.tesserakt.benchmarking.Evaluator.Output.added"]},{"name":"val checksum: Int","description":"dev.tesserakt.benchmarking.Evaluator.Output.checksum","location":"testing/bench/sparql/core/dev.tesserakt.benchmarking/-evaluator/-output/checksum.html","searchKeys":["checksum","val checksum: Int","dev.tesserakt.benchmarking.Evaluator.Output.checksum"]},{"name":"val removed: Int","description":"dev.tesserakt.benchmarking.Evaluator.Output.removed","location":"testing/bench/sparql/core/dev.tesserakt.benchmarking/-evaluator/-output/removed.html","searchKeys":["removed","val removed: Int","dev.tesserakt.benchmarking.Evaluator.Output.removed"]},{"name":"class MappingBenchmark","description":"dev.tesserakt.MappingBenchmark","location":"testing/bench/microbench/dev.tesserakt/-mapping-benchmark/index.html","searchKeys":["MappingBenchmark","class MappingBenchmark","dev.tesserakt.MappingBenchmark"]},{"name":"const val SIZE: Int","description":"dev.tesserakt.SIZE","location":"testing/bench/microbench/dev.tesserakt/-s-i-z-e.html","searchKeys":["SIZE","const val SIZE: Int","dev.tesserakt.SIZE"]},{"name":"const val VARIANCE: Int = 50","description":"dev.tesserakt.VARIANCE","location":"testing/bench/microbench/dev.tesserakt/-v-a-r-i-a-n-c-e.html","searchKeys":["VARIANCE","const val VARIANCE: Int = 50","dev.tesserakt.VARIANCE"]},{"name":"constructor()","description":"dev.tesserakt.MappingBenchmark.MappingBenchmark","location":"testing/bench/microbench/dev.tesserakt/-mapping-benchmark/-mapping-benchmark.html","searchKeys":["MappingBenchmark","constructor()","dev.tesserakt.MappingBenchmark.MappingBenchmark"]},{"name":"fun createMappings()","description":"dev.tesserakt.MappingBenchmark.createMappings","location":"testing/bench/microbench/dev.tesserakt/-mapping-benchmark/create-mappings.html","searchKeys":["createMappings","fun createMappings()","dev.tesserakt.MappingBenchmark.createMappings"]},{"name":"fun joinNew(): List<Mapping>","description":"dev.tesserakt.MappingBenchmark.joinNew","location":"testing/bench/microbench/dev.tesserakt/-mapping-benchmark/join-new.html","searchKeys":["joinNew","fun joinNew(): List<Mapping>","dev.tesserakt.MappingBenchmark.joinNew"]},{"name":"fun joinRegular(): List<MapMapping>","description":"dev.tesserakt.MappingBenchmark.joinRegular","location":"testing/bench/microbench/dev.tesserakt/-mapping-benchmark/join-regular.html","searchKeys":["joinRegular","fun joinRegular(): List<MapMapping>","dev.tesserakt.MappingBenchmark.joinRegular"]},{"name":"typealias MapMapping = Map<String, Quad.Term>","description":"dev.tesserakt.MapMapping","location":"testing/bench/microbench/dev.tesserakt/-map-mapping/index.html","searchKeys":["MapMapping","typealias MapMapping = Map<String, Quad.Term>","dev.tesserakt.MapMapping"]},{"name":"val BINDINGS: List<Pair<String, List<Quad.Term>>>","description":"dev.tesserakt.BINDINGS","location":"testing/bench/microbench/dev.tesserakt/-b-i-n-d-i-n-g-s.html","searchKeys":["BINDINGS","val BINDINGS: List<Pair<String, List<Quad.Term>>>","dev.tesserakt.BINDINGS"]},{"name":"abstract fun create(stack: PrettyFormatter.Stack): String","description":"dev.tesserakt.rdf.turtle.serialization.PrettyFormatter.Indent.create","location":"serialization/turtle/dev.tesserakt.rdf.turtle.serialization/-pretty-formatter/-indent/create.html","searchKeys":["create","abstract fun create(stack: PrettyFormatter.Stack): String","dev.tesserakt.rdf.turtle.serialization.PrettyFormatter.Indent.create"]},{"name":"annotation class TurtleSerializerDsl","description":"dev.tesserakt.rdf.turtle.serialization.TurtleSerializerDsl","location":"serialization/turtle/dev.tesserakt.rdf.turtle.serialization/-turtle-serializer-dsl/index.html","searchKeys":["TurtleSerializerDsl","annotation class TurtleSerializerDsl","dev.tesserakt.rdf.turtle.serialization.TurtleSerializerDsl"]},{"name":"class Stack","description":"dev.tesserakt.rdf.turtle.serialization.PrettyFormatter.Stack","location":"serialization/turtle/dev.tesserakt.rdf.turtle.serialization/-pretty-formatter/-stack/index.html","searchKeys":["Stack","class Stack","dev.tesserakt.rdf.turtle.serialization.PrettyFormatter.Stack"]},{"name":"class TurtleConfig(var formatter: Formatter = DEFAULT_FORMATTER)","description":"dev.tesserakt.rdf.turtle.serialization.TurtleConfig","location":"serialization/turtle/dev.tesserakt.rdf.turtle.serialization/-turtle-config/index.html","searchKeys":["TurtleConfig","class TurtleConfig(var formatter: Formatter = DEFAULT_FORMATTER)","dev.tesserakt.rdf.turtle.serialization.TurtleConfig"]},{"name":"class TurtleSerializer(config: TurtleConfig) : Serializer","description":"dev.tesserakt.rdf.turtle.serialization.TurtleSerializer","location":"serialization/turtle/dev.tesserakt.rdf.turtle.serialization/-turtle-serializer/index.html","searchKeys":["TurtleSerializer","class TurtleSerializer(config: TurtleConfig) : Serializer","dev.tesserakt.rdf.turtle.serialization.TurtleSerializer"]},{"name":"constructor()","description":"dev.tesserakt.rdf.turtle.serialization.PrettyFormatter.Stack.Stack","location":"serialization/turtle/dev.tesserakt.rdf.turtle.serialization/-pretty-formatter/-stack/-stack.html","searchKeys":["Stack","constructor()","dev.tesserakt.rdf.turtle.serialization.PrettyFormatter.Stack.Stack"]},{"name":"constructor(config: TurtleConfig)","description":"dev.tesserakt.rdf.turtle.serialization.TurtleSerializer.TurtleSerializer","location":"serialization/turtle/dev.tesserakt.rdf.turtle.serialization/-turtle-serializer/-turtle-serializer.html","searchKeys":["TurtleSerializer","constructor(config: TurtleConfig)","dev.tesserakt.rdf.turtle.serialization.TurtleSerializer.TurtleSerializer"]},{"name":"constructor(formatter: Formatter = DEFAULT_FORMATTER)","description":"dev.tesserakt.rdf.turtle.serialization.TurtleConfig.TurtleConfig","location":"serialization/turtle/dev.tesserakt.rdf.turtle.serialization/-turtle-config/-turtle-config.html","searchKeys":["TurtleConfig","constructor(formatter: Formatter = DEFAULT_FORMATTER)","dev.tesserakt.rdf.turtle.serialization.TurtleConfig.TurtleConfig"]},{"name":"constructor(pattern: String)","description":"dev.tesserakt.rdf.turtle.serialization.PrettyFormatter.DynamicIndent.DynamicIndent","location":"serialization/turtle/dev.tesserakt.rdf.turtle.serialization/-pretty-formatter/-dynamic-indent/-dynamic-indent.html","searchKeys":["DynamicIndent","constructor(pattern: String)","dev.tesserakt.rdf.turtle.serialization.PrettyFormatter.DynamicIndent.DynamicIndent"]},{"name":"constructor(pattern: String)","description":"dev.tesserakt.rdf.turtle.serialization.PrettyFormatter.FixedStepIndent.FixedStepIndent","location":"serialization/turtle/dev.tesserakt.rdf.turtle.serialization/-pretty-formatter/-fixed-step-indent/-fixed-step-indent.html","searchKeys":["FixedStepIndent","constructor(pattern: String)","dev.tesserakt.rdf.turtle.serialization.PrettyFormatter.FixedStepIndent.FixedStepIndent"]},{"name":"constructor(prefixes: Prefixes = NoPrefixes, indent: PrettyFormatter.Indent = FixedStepIndent(INDENT_PATTERN))","description":"dev.tesserakt.rdf.turtle.serialization.TurtleConfig.PrettyFormatterConf.PrettyFormatterConf","location":"serialization/turtle/dev.tesserakt.rdf.turtle.serialization/-turtle-config/-pretty-formatter-conf/-pretty-formatter-conf.html","searchKeys":["PrettyFormatterConf","constructor(prefixes: Prefixes = NoPrefixes, indent: PrettyFormatter.Indent = FixedStepIndent(INDENT_PATTERN))","dev.tesserakt.rdf.turtle.serialization.TurtleConfig.PrettyFormatterConf.PrettyFormatterConf"]},{"name":"constructor(prefixes: Prefixes, indent: PrettyFormatter.Indent = if (prefixes.isEmpty()) FixedStepIndent(INDENT_PATTERN) else DynamicIndent(INDENT_PATTERN))","description":"dev.tesserakt.rdf.turtle.serialization.PrettyFormatter.PrettyFormatter","location":"serialization/turtle/dev.tesserakt.rdf.turtle.serialization/-pretty-formatter/-pretty-formatter.html","searchKeys":["PrettyFormatter","constructor(prefixes: Prefixes, indent: PrettyFormatter.Indent = if (prefixes.isEmpty()) FixedStepIndent(INDENT_PATTERN) else DynamicIndent(INDENT_PATTERN))","dev.tesserakt.rdf.turtle.serialization.PrettyFormatter.PrettyFormatter"]},{"name":"data class PrettyFormatter(val prefixes: Prefixes, val indent: PrettyFormatter.Indent = if (prefixes.isEmpty()) FixedStepIndent(INDENT_PATTERN) else DynamicIndent(INDENT_PATTERN)) : Formatter","description":"dev.tesserakt.rdf.turtle.serialization.PrettyFormatter","location":"serialization/turtle/dev.tesserakt.rdf.turtle.serialization/-pretty-formatter/index.html","searchKeys":["PrettyFormatter","data class PrettyFormatter(val prefixes: Prefixes, val indent: PrettyFormatter.Indent = if (prefixes.isEmpty()) FixedStepIndent(INDENT_PATTERN) else DynamicIndent(INDENT_PATTERN)) : Formatter","dev.tesserakt.rdf.turtle.serialization.PrettyFormatter"]},{"name":"data class PrettyFormatterConf(prefixes: Prefixes = NoPrefixes, indent: PrettyFormatter.Indent = FixedStepIndent(INDENT_PATTERN))","description":"dev.tesserakt.rdf.turtle.serialization.TurtleConfig.PrettyFormatterConf","location":"serialization/turtle/dev.tesserakt.rdf.turtle.serialization/-turtle-config/-pretty-formatter-conf/index.html","searchKeys":["PrettyFormatterConf","data class PrettyFormatterConf(prefixes: Prefixes = NoPrefixes, indent: PrettyFormatter.Indent = FixedStepIndent(INDENT_PATTERN))","dev.tesserakt.rdf.turtle.serialization.TurtleConfig.PrettyFormatterConf"]},{"name":"data object SimpleFormatter : Formatter","description":"dev.tesserakt.rdf.turtle.serialization.SimpleFormatter","location":"serialization/turtle/dev.tesserakt.rdf.turtle.serialization/-simple-formatter/index.html","searchKeys":["SimpleFormatter","data object SimpleFormatter : Formatter","dev.tesserakt.rdf.turtle.serialization.SimpleFormatter"]},{"name":"fun String.parseTurtleString(): Iterator<Quad>","description":"dev.tesserakt.rdf.turtle.serialization.TurtleSerializer.Companion.parseTurtleString","location":"serialization/turtle/dev.tesserakt.rdf.turtle.serialization/-turtle-serializer/-companion/parse-turtle-string.html","searchKeys":["parseTurtleString","fun String.parseTurtleString(): Iterator<Quad>","dev.tesserakt.rdf.turtle.serialization.TurtleSerializer.Companion.parseTurtleString"]},{"name":"fun TurtleConfig.PrettyFormatterConf.withDynamicIndent(pattern: String = INDENT_PATTERN)","description":"dev.tesserakt.rdf.turtle.serialization.withDynamicIndent","location":"serialization/turtle/dev.tesserakt.rdf.turtle.serialization/with-dynamic-indent.html","searchKeys":["withDynamicIndent","fun TurtleConfig.PrettyFormatterConf.withDynamicIndent(pattern: String = INDENT_PATTERN)","dev.tesserakt.rdf.turtle.serialization.withDynamicIndent"]},{"name":"fun TurtleConfig.PrettyFormatterConf.withFixedIndent(pattern: String = INDENT_PATTERN)","description":"dev.tesserakt.rdf.turtle.serialization.withFixedIndent","location":"serialization/turtle/dev.tesserakt.rdf.turtle.serialization/with-fixed-indent.html","searchKeys":["withFixedIndent","fun TurtleConfig.PrettyFormatterConf.withFixedIndent(pattern: String = INDENT_PATTERN)","dev.tesserakt.rdf.turtle.serialization.withFixedIndent"]},{"name":"fun TurtleConfig.PrettyFormatterConf.withPrefixes(value: Iterable<Pair<String, String>>)","description":"dev.tesserakt.rdf.turtle.serialization.withPrefixes","location":"serialization/turtle/dev.tesserakt.rdf.turtle.serialization/with-prefixes.html","searchKeys":["withPrefixes","fun TurtleConfig.PrettyFormatterConf.withPrefixes(value: Iterable<Pair<String, String>>)","dev.tesserakt.rdf.turtle.serialization.withPrefixes"]},{"name":"fun TurtleConfig.PrettyFormatterConf.withPrefixes(value: Map<String, String>)","description":"dev.tesserakt.rdf.turtle.serialization.withPrefixes","location":"serialization/turtle/dev.tesserakt.rdf.turtle.serialization/with-prefixes.html","searchKeys":["withPrefixes","fun TurtleConfig.PrettyFormatterConf.withPrefixes(value: Map<String, String>)","dev.tesserakt.rdf.turtle.serialization.withPrefixes"]},{"name":"fun TurtleConfig.PrettyFormatterConf.withPrefixes(value: Prefixes)","description":"dev.tesserakt.rdf.turtle.serialization.withPrefixes","location":"serialization/turtle/dev.tesserakt.rdf.turtle.serialization/with-prefixes.html","searchKeys":["withPrefixes","fun TurtleConfig.PrettyFormatterConf.withPrefixes(value: Prefixes)","dev.tesserakt.rdf.turtle.serialization.withPrefixes"]},{"name":"fun TurtleConfig.PrettyFormatterConf.withPrefixes(vararg ontology: Ontology)","description":"dev.tesserakt.rdf.turtle.serialization.withPrefixes","location":"serialization/turtle/dev.tesserakt.rdf.turtle.serialization/with-prefixes.html","searchKeys":["withPrefixes","fun TurtleConfig.PrettyFormatterConf.withPrefixes(vararg ontology: Ontology)","dev.tesserakt.rdf.turtle.serialization.withPrefixes"]},{"name":"fun build(): PrettyFormatter","description":"dev.tesserakt.rdf.turtle.serialization.TurtleConfig.PrettyFormatterConf.build","location":"serialization/turtle/dev.tesserakt.rdf.turtle.serialization/-turtle-config/-pretty-formatter-conf/build.html","searchKeys":["build","fun build(): PrettyFormatter","dev.tesserakt.rdf.turtle.serialization.TurtleConfig.PrettyFormatterConf.build"]},{"name":"fun interface Indent","description":"dev.tesserakt.rdf.turtle.serialization.PrettyFormatter.Indent","location":"serialization/turtle/dev.tesserakt.rdf.turtle.serialization/-pretty-formatter/-indent/index.html","searchKeys":["Indent","fun interface Indent","dev.tesserakt.rdf.turtle.serialization.PrettyFormatter.Indent"]},{"name":"fun turtle(builder: TurtleConfig.() -> Unit): TurtleSerializer","description":"dev.tesserakt.rdf.turtle.serialization.turtle","location":"serialization/turtle/dev.tesserakt.rdf.turtle.serialization/turtle.html","searchKeys":["turtle","fun turtle(builder: TurtleConfig.() -> Unit): TurtleSerializer","dev.tesserakt.rdf.turtle.serialization.turtle"]},{"name":"inline fun TurtleConfig.PrettyFormatterConf.withPrefixes(block: MutableMap<String, String>.() -> Unit)","description":"dev.tesserakt.rdf.turtle.serialization.withPrefixes","location":"serialization/turtle/dev.tesserakt.rdf.turtle.serialization/with-prefixes.html","searchKeys":["withPrefixes","inline fun TurtleConfig.PrettyFormatterConf.withPrefixes(block: MutableMap<String, String>.() -> Unit)","dev.tesserakt.rdf.turtle.serialization.withPrefixes"]},{"name":"inline fun TurtleConfig.usePrettyFormatting(block: TurtleConfig.PrettyFormatterConf.() -> Unit = {})","description":"dev.tesserakt.rdf.turtle.serialization.usePrettyFormatting","location":"serialization/turtle/dev.tesserakt.rdf.turtle.serialization/use-pretty-formatting.html","searchKeys":["usePrettyFormatting","inline fun TurtleConfig.usePrettyFormatting(block: TurtleConfig.PrettyFormatterConf.() -> Unit = {})","dev.tesserakt.rdf.turtle.serialization.usePrettyFormatting"]},{"name":"inline fun TurtleConfig.useSimpleFormatting()","description":"dev.tesserakt.rdf.turtle.serialization.useSimpleFormatting","location":"serialization/turtle/dev.tesserakt.rdf.turtle.serialization/use-simple-formatting.html","searchKeys":["useSimpleFormatting","inline fun TurtleConfig.useSimpleFormatting()","dev.tesserakt.rdf.turtle.serialization.useSimpleFormatting"]},{"name":"object Companion","description":"dev.tesserakt.rdf.turtle.serialization.TurtleConfig.Companion","location":"serialization/turtle/dev.tesserakt.rdf.turtle.serialization/-turtle-config/-companion/index.html","searchKeys":["Companion","object Companion","dev.tesserakt.rdf.turtle.serialization.TurtleConfig.Companion"]},{"name":"object Companion : Serializer","description":"dev.tesserakt.rdf.turtle.serialization.TurtleSerializer.Companion","location":"serialization/turtle/dev.tesserakt.rdf.turtle.serialization/-turtle-serializer/-companion/index.html","searchKeys":["Companion","object Companion : Serializer","dev.tesserakt.rdf.turtle.serialization.TurtleSerializer.Companion"]},{"name":"open override fun create(stack: PrettyFormatter.Stack): String","description":"dev.tesserakt.rdf.turtle.serialization.PrettyFormatter.DynamicIndent.create","location":"serialization/turtle/dev.tesserakt.rdf.turtle.serialization/-pretty-formatter/-dynamic-indent/create.html","searchKeys":["create","open override fun create(stack: PrettyFormatter.Stack): String","dev.tesserakt.rdf.turtle.serialization.PrettyFormatter.DynamicIndent.create"]},{"name":"open override fun create(stack: PrettyFormatter.Stack): String","description":"dev.tesserakt.rdf.turtle.serialization.PrettyFormatter.FixedStepIndent.create","location":"serialization/turtle/dev.tesserakt.rdf.turtle.serialization/-pretty-formatter/-fixed-step-indent/create.html","searchKeys":["create","open override fun create(stack: PrettyFormatter.Stack): String","dev.tesserakt.rdf.turtle.serialization.PrettyFormatter.FixedStepIndent.create"]},{"name":"open override fun deserialize(input: DataSource): Iterator<Quad>","description":"dev.tesserakt.rdf.turtle.serialization.TurtleSerializer.Companion.deserialize","location":"serialization/turtle/dev.tesserakt.rdf.turtle.serialization/-turtle-serializer/-companion/deserialize.html","searchKeys":["deserialize","open override fun deserialize(input: DataSource): Iterator<Quad>","dev.tesserakt.rdf.turtle.serialization.TurtleSerializer.Companion.deserialize"]},{"name":"open override fun deserialize(input: DataSource): Iterator<Quad>","description":"dev.tesserakt.rdf.turtle.serialization.TurtleSerializer.deserialize","location":"serialization/turtle/dev.tesserakt.rdf.turtle.serialization/-turtle-serializer/deserialize.html","searchKeys":["deserialize","open override fun deserialize(input: DataSource): Iterator<Quad>","dev.tesserakt.rdf.turtle.serialization.TurtleSerializer.deserialize"]},{"name":"open override fun serialize(data: Collection<Quad>): Iterator<String>","description":"dev.tesserakt.rdf.turtle.serialization.TurtleSerializer.Companion.serialize","location":"serialization/turtle/dev.tesserakt.rdf.turtle.serialization/-turtle-serializer/-companion/serialize.html","searchKeys":["serialize","open override fun serialize(data: Collection<Quad>): Iterator<String>","dev.tesserakt.rdf.turtle.serialization.TurtleSerializer.Companion.serialize"]},{"name":"open override fun serialize(data: Collection<Quad>): Iterator<String>","description":"dev.tesserakt.rdf.turtle.serialization.TurtleSerializer.serialize","location":"serialization/turtle/dev.tesserakt.rdf.turtle.serialization/-turtle-serializer/serialize.html","searchKeys":["serialize","open override fun serialize(data: Collection<Quad>): Iterator<String>","dev.tesserakt.rdf.turtle.serialization.TurtleSerializer.serialize"]},{"name":"open override fun serialize(data: Iterator<Quad>): Iterator<String>","description":"dev.tesserakt.rdf.turtle.serialization.TurtleSerializer.Companion.serialize","location":"serialization/turtle/dev.tesserakt.rdf.turtle.serialization/-turtle-serializer/-companion/serialize.html","searchKeys":["serialize","open override fun serialize(data: Iterator<Quad>): Iterator<String>","dev.tesserakt.rdf.turtle.serialization.TurtleSerializer.Companion.serialize"]},{"name":"open override fun serialize(data: Iterator<Quad>): Iterator<String>","description":"dev.tesserakt.rdf.turtle.serialization.TurtleSerializer.serialize","location":"serialization/turtle/dev.tesserakt.rdf.turtle.serialization/-turtle-serializer/serialize.html","searchKeys":["serialize","open override fun serialize(data: Iterator<Quad>): Iterator<String>","dev.tesserakt.rdf.turtle.serialization.TurtleSerializer.serialize"]},{"name":"open override fun toString(): String","description":"dev.tesserakt.rdf.turtle.serialization.PrettyFormatter.Stack.toString","location":"serialization/turtle/dev.tesserakt.rdf.turtle.serialization/-pretty-formatter/-stack/to-string.html","searchKeys":["toString","open override fun toString(): String","dev.tesserakt.rdf.turtle.serialization.PrettyFormatter.Stack.toString"]},{"name":"sealed class Formatter","description":"dev.tesserakt.rdf.turtle.serialization.Formatter","location":"serialization/turtle/dev.tesserakt.rdf.turtle.serialization/-formatter/index.html","searchKeys":["Formatter","sealed class Formatter","dev.tesserakt.rdf.turtle.serialization.Formatter"]},{"name":"val NoPrefixes: Prefixes","description":"dev.tesserakt.rdf.turtle.serialization.TurtleConfig.Companion.NoPrefixes","location":"serialization/turtle/dev.tesserakt.rdf.turtle.serialization/-turtle-config/-companion/-no-prefixes.html","searchKeys":["NoPrefixes","val NoPrefixes: Prefixes","dev.tesserakt.rdf.turtle.serialization.TurtleConfig.Companion.NoPrefixes"]},{"name":"val depth: Int","description":"dev.tesserakt.rdf.turtle.serialization.PrettyFormatter.Stack.depth","location":"serialization/turtle/dev.tesserakt.rdf.turtle.serialization/-pretty-formatter/-stack/depth.html","searchKeys":["depth","val depth: Int","dev.tesserakt.rdf.turtle.serialization.PrettyFormatter.Stack.depth"]},{"name":"val indent: PrettyFormatter.Indent","description":"dev.tesserakt.rdf.turtle.serialization.PrettyFormatter.indent","location":"serialization/turtle/dev.tesserakt.rdf.turtle.serialization/-pretty-formatter/indent.html","searchKeys":["indent","val indent: PrettyFormatter.Indent","dev.tesserakt.rdf.turtle.serialization.PrettyFormatter.indent"]},{"name":"val prefixes: Prefixes","description":"dev.tesserakt.rdf.turtle.serialization.PrettyFormatter.prefixes","location":"serialization/turtle/dev.tesserakt.rdf.turtle.serialization/-pretty-formatter/prefixes.html","searchKeys":["prefixes","val prefixes: Prefixes","dev.tesserakt.rdf.turtle.serialization.PrettyFormatter.prefixes"]},{"name":"value class DynamicIndent(pattern: String) : PrettyFormatter.Indent","description":"dev.tesserakt.rdf.turtle.serialization.PrettyFormatter.DynamicIndent","location":"serialization/turtle/dev.tesserakt.rdf.turtle.serialization/-pretty-formatter/-dynamic-indent/index.html","searchKeys":["DynamicIndent","value class DynamicIndent(pattern: String) : PrettyFormatter.Indent","dev.tesserakt.rdf.turtle.serialization.PrettyFormatter.DynamicIndent"]},{"name":"value class FixedStepIndent(pattern: String) : PrettyFormatter.Indent","description":"dev.tesserakt.rdf.turtle.serialization.PrettyFormatter.FixedStepIndent","location":"serialization/turtle/dev.tesserakt.rdf.turtle.serialization/-pretty-formatter/-fixed-step-indent/index.html","searchKeys":["FixedStepIndent","value class FixedStepIndent(pattern: String) : PrettyFormatter.Indent","dev.tesserakt.rdf.turtle.serialization.PrettyFormatter.FixedStepIndent"]},{"name":"var formatter: Formatter","description":"dev.tesserakt.rdf.turtle.serialization.TurtleConfig.formatter","location":"serialization/turtle/dev.tesserakt.rdf.turtle.serialization/-turtle-config/formatter.html","searchKeys":["formatter","var formatter: Formatter","dev.tesserakt.rdf.turtle.serialization.TurtleConfig.formatter"]},{"name":"expect fun printerrln(message: String)","description":"dev.tesserakt.util.printerrln","location":"utils/dev.tesserakt.util/printerrln.html","searchKeys":["printerrln","expect fun printerrln(message: String)","dev.tesserakt.util.printerrln"]},{"name":"expect inline fun <K, V> MutableMap<K, V>.replace(key: K, crossinline transform: (V?) -> V)","description":"dev.tesserakt.util.replace","location":"utils/dev.tesserakt.util/replace.html","searchKeys":["replace","expect inline fun <K, V> MutableMap<K, V>.replace(key: K, crossinline transform: (V?) -> V)","dev.tesserakt.util.replace"]},{"name":"expect inline fun <T> MutableList<T>.removeFirstElement(): T","description":"dev.tesserakt.util.removeFirstElement","location":"utils/dev.tesserakt.util/remove-first-element.html","searchKeys":["removeFirstElement","expect inline fun <T> MutableList<T>.removeFirstElement(): T","dev.tesserakt.util.removeFirstElement"]},{"name":"expect inline fun <T> MutableList<T>.removeLastElement(): T","description":"dev.tesserakt.util.removeLastElement","location":"utils/dev.tesserakt.util/remove-last-element.html","searchKeys":["removeLastElement","expect inline fun <T> MutableList<T>.removeLastElement(): T","dev.tesserakt.util.removeLastElement"]},{"name":"infix inline fun IntRange.shifted(shift: Int): IntRange","description":"dev.tesserakt.util.shifted","location":"utils/dev.tesserakt.util/shifted.html","searchKeys":["shifted","infix inline fun IntRange.shifted(shift: Int): IntRange","dev.tesserakt.util.shifted"]},{"name":"inline fun <I, O> Collection<I>.mapToArray(transform: (I) -> O): Array<O>","description":"dev.tesserakt.util.mapToArray","location":"utils/dev.tesserakt.util/map-to-array.html","searchKeys":["mapToArray","inline fun <I, O> Collection<I>.mapToArray(transform: (I) -> O): Array<O>","dev.tesserakt.util.mapToArray"]},{"name":"inline fun <K : Any, V : Any> Collection<Map<K, V>>.expandCompatibleWith(reference: Map<K, V>): List<Map<K, V>>","description":"dev.tesserakt.util.expandCompatibleWith","location":"utils/dev.tesserakt.util/expand-compatible-with.html","searchKeys":["expandCompatibleWith","inline fun <K : Any, V : Any> Collection<Map<K, V>>.expandCompatibleWith(reference: Map<K, V>): List<Map<K, V>>","dev.tesserakt.util.expandCompatibleWith"]},{"name":"inline fun <K : Any, V : Any> Collection<Map<K, V>>.filterCompatibleWith(reference: Map<K, V>): ArrayList<Map<K, V>>","description":"dev.tesserakt.util.filterCompatibleWith","location":"utils/dev.tesserakt.util/filter-compatible-with.html","searchKeys":["filterCompatibleWith","inline fun <K : Any, V : Any> Collection<Map<K, V>>.filterCompatibleWith(reference: Map<K, V>): ArrayList<Map<K, V>>","dev.tesserakt.util.filterCompatibleWith"]},{"name":"inline fun <K : Any, V : Any> Map<K, V>.compatibleWith(reference: Map<K, V>): Boolean","description":"dev.tesserakt.util.compatibleWith","location":"utils/dev.tesserakt.util/compatible-with.html","searchKeys":["compatibleWith","inline fun <K : Any, V : Any> Map<K, V>.compatibleWith(reference: Map<K, V>): Boolean","dev.tesserakt.util.compatibleWith"]},{"name":"inline fun <K, V : Any> Iterable<K>.associateWithNotNull(transform: (K) -> V?): Map<K, V>","description":"dev.tesserakt.util.associateWithNotNull","location":"utils/dev.tesserakt.util/associate-with-not-null.html","searchKeys":["associateWithNotNull","inline fun <K, V : Any> Iterable<K>.associateWithNotNull(transform: (K) -> V?): Map<K, V>","dev.tesserakt.util.associateWithNotNull"]},{"name":"inline fun <K, V> Iterable<Map<K, V>>.merge(): Map<K, V>","description":"dev.tesserakt.util.merge","location":"utils/dev.tesserakt.util/merge.html","searchKeys":["merge","inline fun <K, V> Iterable<Map<K, V>>.merge(): Map<K, V>","dev.tesserakt.util.merge"]},{"name":"inline fun <T : Any> T?.isNullOr(condition: (T) -> Boolean): Boolean","description":"dev.tesserakt.util.isNullOr","location":"utils/dev.tesserakt.util/is-null-or.html","searchKeys":["isNullOr","inline fun <T : Any> T?.isNullOr(condition: (T) -> Boolean): Boolean","dev.tesserakt.util.isNullOr"]},{"name":"inline fun <T : Any> T?.jsExpect(): T","description":"dev.tesserakt.util.jsExpect","location":"utils/dev.tesserakt.util/js-expect.html","searchKeys":["jsExpect","inline fun <T : Any> T?.jsExpect(): T","dev.tesserakt.util.jsExpect"]},{"name":"inline fun <T, K, V> Array<T>.associateIndexedNotNull(mapper: (Int, T) -> Pair<K, V>?): Map<K, V>","description":"dev.tesserakt.util.associateIndexedNotNull","location":"utils/dev.tesserakt.util/associate-indexed-not-null.html","searchKeys":["associateIndexedNotNull","inline fun <T, K, V> Array<T>.associateIndexedNotNull(mapper: (Int, T) -> Pair<K, V>?): Map<K, V>","dev.tesserakt.util.associateIndexedNotNull"]},{"name":"inline fun <T, K, V> Iterable<T>.associateIndexed(mapper: (Int, T) -> Pair<K, V>): Map<K, V>","description":"dev.tesserakt.util.associateIndexed","location":"utils/dev.tesserakt.util/associate-indexed.html","searchKeys":["associateIndexed","inline fun <T, K, V> Iterable<T>.associateIndexed(mapper: (Int, T) -> Pair<K, V>): Map<K, V>","dev.tesserakt.util.associateIndexed"]},{"name":"inline fun <T, K, V> Iterable<T>.associateIndexedNotNull(mapper: (Int, T) -> Pair<K, V>?): Map<K, V>","description":"dev.tesserakt.util.associateIndexedNotNull","location":"utils/dev.tesserakt.util/associate-indexed-not-null.html","searchKeys":["associateIndexedNotNull","inline fun <T, K, V> Iterable<T>.associateIndexedNotNull(mapper: (Int, T) -> Pair<K, V>?): Map<K, V>","dev.tesserakt.util.associateIndexedNotNull"]},{"name":"inline fun <T> Any.jsCastOrBail(): T","description":"dev.tesserakt.util.jsCastOrBail","location":"utils/dev.tesserakt.util/js-cast-or-bail.html","searchKeys":["jsCastOrBail","inline fun <T> Any.jsCastOrBail(): T","dev.tesserakt.util.jsCastOrBail"]},{"name":"inline fun <T> Collection<T>.addFront(vararg element: T): List<T>","description":"dev.tesserakt.util.addFront","location":"utils/dev.tesserakt.util/add-front.html","searchKeys":["addFront","inline fun <T> Collection<T>.addFront(vararg element: T): List<T>","dev.tesserakt.util.addFront"]},{"name":"inline fun <T> List<T>.unorderedDrop(elements: Iterable<T>): List<T>","description":"dev.tesserakt.util.unorderedDrop","location":"utils/dev.tesserakt.util/unordered-drop.html","searchKeys":["unorderedDrop","inline fun <T> List<T>.unorderedDrop(elements: Iterable<T>): List<T>","dev.tesserakt.util.unorderedDrop"]},{"name":"inline fun <T> MutableList<T>.modify(block: (T) -> T): MutableList<T>","description":"dev.tesserakt.util.modify","location":"utils/dev.tesserakt.util/modify.html","searchKeys":["modify","inline fun <T> MutableList<T>.modify(block: (T) -> T): MutableList<T>","dev.tesserakt.util.modify"]},{"name":"inline fun <T> MutableList<T>.unorderedDropAt(index: Int)","description":"dev.tesserakt.util.unorderedDropAt","location":"utils/dev.tesserakt.util/unordered-drop-at.html","searchKeys":["unorderedDropAt","inline fun <T> MutableList<T>.unorderedDropAt(index: Int)","dev.tesserakt.util.unorderedDropAt"]},{"name":"inline fun <T> MutableList<T>.weightedSort(weights: List<Int>)","description":"dev.tesserakt.util.weightedSort","location":"utils/dev.tesserakt.util/weighted-sort.html","searchKeys":["weightedSort","inline fun <T> MutableList<T>.weightedSort(weights: List<Int>)","dev.tesserakt.util.weightedSort"]},{"name":"inline fun Any?.toString(exactLength: Int, overflow: String = \"...\", extend: String = \" \"): String","description":"dev.tesserakt.util.toString","location":"utils/dev.tesserakt.util/to-string.html","searchKeys":["toString","inline fun Any?.toString(exactLength: Int, overflow: String = \"...\", extend: String = \" \"): String","dev.tesserakt.util.toString"]},{"name":"inline fun Any?.toTruncatedString(maxLength: Int, overflow: String = \"...\"): String","description":"dev.tesserakt.util.toTruncatedString","location":"utils/dev.tesserakt.util/to-truncated-string.html","searchKeys":["toTruncatedString","inline fun Any?.toTruncatedString(maxLength: Int, overflow: String = \"...\"): String","dev.tesserakt.util.toTruncatedString"]},{"name":"inline fun String.fit(exactLength: Int, overflow: String = \"...\", extend: String = \" \"): String","description":"dev.tesserakt.util.fit","location":"utils/dev.tesserakt.util/fit.html","searchKeys":["fit","inline fun String.fit(exactLength: Int, overflow: String = \"...\", extend: String = \" \"): String","dev.tesserakt.util.fit"]},{"name":"inline fun String.truncate(maxLength: Int, overflow: String = \"...\"): String","description":"dev.tesserakt.util.truncate","location":"utils/dev.tesserakt.util/truncate.html","searchKeys":["truncate","inline fun String.truncate(maxLength: Int, overflow: String = \"...\"): String","dev.tesserakt.util.truncate"]},{"name":"abstract fun exceptionOrNull(): Throwable?","description":"dev.tesserakt.testing.Test.Result.exceptionOrNull","location":"testing/tooling/environment/dev.tesserakt.testing/-test/-result/exception-or-null.html","searchKeys":["exceptionOrNull","abstract fun exceptionOrNull(): Throwable?","dev.tesserakt.testing.Test.Result.exceptionOrNull"]},{"name":"abstract fun isSuccess(): Boolean","description":"dev.tesserakt.testing.Test.Result.isSuccess","location":"testing/tooling/environment/dev.tesserakt.testing/-test/-result/is-success.html","searchKeys":["isSuccess","abstract fun isSuccess(): Boolean","dev.tesserakt.testing.Test.Result.isSuccess"]},{"name":"abstract fun shouldSkip(test: Test): Boolean","description":"dev.tesserakt.testing.TestFilter.shouldSkip","location":"testing/tooling/environment/dev.tesserakt.testing/-test-filter/should-skip.html","searchKeys":["shouldSkip","abstract fun shouldSkip(test: Test): Boolean","dev.tesserakt.testing.TestFilter.shouldSkip"]},{"name":"abstract suspend fun test(): Test.Result","description":"dev.tesserakt.testing.Test.test","location":"testing/tooling/environment/dev.tesserakt.testing/-test/test.html","searchKeys":["test","abstract suspend fun test(): Test.Result","dev.tesserakt.testing.Test.test"]},{"name":"class TestEnvironment","description":"dev.tesserakt.testing.TestEnvironment","location":"testing/tooling/environment/dev.tesserakt.testing/-test-environment/index.html","searchKeys":["TestEnvironment","class TestEnvironment","dev.tesserakt.testing.TestEnvironment"]},{"name":"constructor()","description":"dev.tesserakt.testing.TestEnvironment.TestEnvironment","location":"testing/tooling/environment/dev.tesserakt.testing/-test-environment/-test-environment.html","searchKeys":["TestEnvironment","constructor()","dev.tesserakt.testing.TestEnvironment.TestEnvironment"]},{"name":"constructor(cause: Throwable)","description":"dev.tesserakt.testing.Test.Result.Failure.Failure","location":"testing/tooling/environment/dev.tesserakt.testing/-test/-result/-failure/-failure.html","searchKeys":["Failure","constructor(cause: Throwable)","dev.tesserakt.testing.Test.Result.Failure.Failure"]},{"name":"constructor(missing: List<T>, leftOver: List<T>)","description":"dev.tesserakt.testing.Comparison.Comparison","location":"testing/tooling/environment/dev.tesserakt.testing/-comparison/-comparison.html","searchKeys":["Comparison","constructor(missing: List<T>, leftOver: List<T>)","dev.tesserakt.testing.Comparison.Comparison"]},{"name":"constructor(results: List<Pair<Test, Test.Result>>, summary: String = results.summary())","description":"dev.tesserakt.testing.TestEnvironment.Results.Results","location":"testing/tooling/environment/dev.tesserakt.testing/-test-environment/-results/-results.html","searchKeys":["Results","constructor(results: List<Pair<Test, Test.Result>>, summary: String = results.summary())","dev.tesserakt.testing.TestEnvironment.Results.Results"]},{"name":"data class Comparison<T>(val missing: List<T>, val leftOver: List<T>)","description":"dev.tesserakt.testing.Comparison","location":"testing/tooling/environment/dev.tesserakt.testing/-comparison/index.html","searchKeys":["Comparison","data class Comparison<T>(val missing: List<T>, val leftOver: List<T>)","dev.tesserakt.testing.Comparison"]},{"name":"data class Results(val results: List<Pair<Test, Test.Result>>, val summary: String = results.summary())","description":"dev.tesserakt.testing.TestEnvironment.Results","location":"testing/tooling/environment/dev.tesserakt.testing/-test-environment/-results/index.html","searchKeys":["Results","data class Results(val results: List<Pair<Test, Test.Result>>, val summary: String = results.summary())","dev.tesserakt.testing.TestEnvironment.Results"]},{"name":"data object Skipped : Test.Result","description":"dev.tesserakt.testing.Test.Result.Skipped","location":"testing/tooling/environment/dev.tesserakt.testing/-test/-result/-skipped/index.html","searchKeys":["Skipped","data object Skipped : Test.Result","dev.tesserakt.testing.Test.Result.Skipped"]},{"name":"fun <R : Test.Result> Result<R>.unbox(): Test.Result","description":"dev.tesserakt.testing.Test.Result.Companion.unbox","location":"testing/tooling/environment/dev.tesserakt.testing/-test/-result/-companion/unbox.html","searchKeys":["unbox","fun <R : Test.Result> Result<R>.unbox(): Test.Result","dev.tesserakt.testing.Test.Result.Companion.unbox"]},{"name":"fun <T> comparisonOf(a: Iterable<T>, b: Iterable<T>): Comparison<T>","description":"dev.tesserakt.testing.comparisonOf","location":"testing/tooling/environment/dev.tesserakt.testing/comparison-of.html","searchKeys":["comparisonOf","fun <T> comparisonOf(a: Iterable<T>, b: Iterable<T>): Comparison<T>","dev.tesserakt.testing.comparisonOf"]},{"name":"fun add(test: Test)","description":"dev.tesserakt.testing.TestEnvironment.add","location":"testing/tooling/environment/dev.tesserakt.testing/-test-environment/add.html","searchKeys":["add","fun add(test: Test)","dev.tesserakt.testing.TestEnvironment.add"]},{"name":"fun interface Test","description":"dev.tesserakt.testing.Test","location":"testing/tooling/environment/dev.tesserakt.testing/-test/index.html","searchKeys":["Test","fun interface Test","dev.tesserakt.testing.Test"]},{"name":"fun interface TestFilter","description":"dev.tesserakt.testing.TestFilter","location":"testing/tooling/environment/dev.tesserakt.testing/-test-filter/index.html","searchKeys":["TestFilter","fun interface TestFilter","dev.tesserakt.testing.TestFilter"]},{"name":"fun isIdentical(): Boolean","description":"dev.tesserakt.testing.Comparison.isIdentical","location":"testing/tooling/environment/dev.tesserakt.testing/-comparison/is-identical.html","searchKeys":["isIdentical","fun isIdentical(): Boolean","dev.tesserakt.testing.Comparison.isIdentical"]},{"name":"fun isSuccess(): Boolean","description":"dev.tesserakt.testing.TestEnvironment.Results.isSuccess","location":"testing/tooling/environment/dev.tesserakt.testing/-test-environment/-results/is-success.html","searchKeys":["isSuccess","fun isSuccess(): Boolean","dev.tesserakt.testing.TestEnvironment.Results.isSuccess"]},{"name":"fun report()","description":"dev.tesserakt.testing.TestEnvironment.Results.report","location":"testing/tooling/environment/dev.tesserakt.testing/-test-environment/-results/report.html","searchKeys":["report","fun report()","dev.tesserakt.testing.TestEnvironment.Results.report"]},{"name":"inline fun <R> map(transform: (T) -> R): Comparison<R>","description":"dev.tesserakt.testing.Comparison.map","location":"testing/tooling/environment/dev.tesserakt.testing/-comparison/map.html","searchKeys":["map","inline fun <R> map(transform: (T) -> R): Comparison<R>","dev.tesserakt.testing.Comparison.map"]},{"name":"inline fun runTest(block: () -> Test.Result): Test.Result","description":"dev.tesserakt.testing.runTest","location":"testing/tooling/environment/dev.tesserakt.testing/run-test.html","searchKeys":["runTest","inline fun runTest(block: () -> Test.Result): Test.Result","dev.tesserakt.testing.runTest"]},{"name":"inline fun testEnv(block: TestEnvironment.() -> Unit): TestEnvironment","description":"dev.tesserakt.testing.testEnv","location":"testing/tooling/environment/dev.tesserakt.testing/test-env.html","searchKeys":["testEnv","inline fun testEnv(block: TestEnvironment.() -> Unit): TestEnvironment","dev.tesserakt.testing.testEnv"]},{"name":"interface Result","description":"dev.tesserakt.testing.Test.Result","location":"testing/tooling/environment/dev.tesserakt.testing/-test/-result/index.html","searchKeys":["Result","interface Result","dev.tesserakt.testing.Test.Result"]},{"name":"object Companion","description":"dev.tesserakt.testing.Test.Result.Companion","location":"testing/tooling/environment/dev.tesserakt.testing/-test/-result/-companion/index.html","searchKeys":["Companion","object Companion","dev.tesserakt.testing.Test.Result.Companion"]},{"name":"object Companion","description":"dev.tesserakt.testing.TestEnvironment.Results.Companion","location":"testing/tooling/environment/dev.tesserakt.testing/-test-environment/-results/-companion/index.html","searchKeys":["Companion","object Companion","dev.tesserakt.testing.TestEnvironment.Results.Companion"]},{"name":"object Default : TestFilter","description":"dev.tesserakt.testing.TestFilter.Default","location":"testing/tooling/environment/dev.tesserakt.testing/-test-filter/-default/index.html","searchKeys":["Default","object Default : TestFilter","dev.tesserakt.testing.TestFilter.Default"]},{"name":"open override fun exceptionOrNull(): Throwable","description":"dev.tesserakt.testing.Test.Result.Failure.exceptionOrNull","location":"testing/tooling/environment/dev.tesserakt.testing/-test/-result/-failure/exception-or-null.html","searchKeys":["exceptionOrNull","open override fun exceptionOrNull(): Throwable","dev.tesserakt.testing.Test.Result.Failure.exceptionOrNull"]},{"name":"open override fun exceptionOrNull(): Throwable?","description":"dev.tesserakt.testing.Test.Result.Skipped.exceptionOrNull","location":"testing/tooling/environment/dev.tesserakt.testing/-test/-result/-skipped/exception-or-null.html","searchKeys":["exceptionOrNull","open override fun exceptionOrNull(): Throwable?","dev.tesserakt.testing.Test.Result.Skipped.exceptionOrNull"]},{"name":"open override fun isSuccess(): Boolean","description":"dev.tesserakt.testing.Test.Result.Failure.isSuccess","location":"testing/tooling/environment/dev.tesserakt.testing/-test/-result/-failure/is-success.html","searchKeys":["isSuccess","open override fun isSuccess(): Boolean","dev.tesserakt.testing.Test.Result.Failure.isSuccess"]},{"name":"open override fun isSuccess(): Boolean","description":"dev.tesserakt.testing.Test.Result.Skipped.isSuccess","location":"testing/tooling/environment/dev.tesserakt.testing/-test/-result/-skipped/is-success.html","searchKeys":["isSuccess","open override fun isSuccess(): Boolean","dev.tesserakt.testing.Test.Result.Skipped.isSuccess"]},{"name":"open override fun shouldSkip(test: Test): Boolean","description":"dev.tesserakt.testing.TestFilter.Default.shouldSkip","location":"testing/tooling/environment/dev.tesserakt.testing/-test-filter/-default/should-skip.html","searchKeys":["shouldSkip","open override fun shouldSkip(test: Test): Boolean","dev.tesserakt.testing.TestFilter.Default.shouldSkip"]},{"name":"open override fun toString(): String","description":"dev.tesserakt.testing.Comparison.toString","location":"testing/tooling/environment/dev.tesserakt.testing/-comparison/to-string.html","searchKeys":["toString","open override fun toString(): String","dev.tesserakt.testing.Comparison.toString"]},{"name":"suspend fun run(count: Int = 1): TestEnvironment.Results","description":"dev.tesserakt.testing.TestEnvironment.run","location":"testing/tooling/environment/dev.tesserakt.testing/-test-environment/run.html","searchKeys":["run","suspend fun run(count: Int = 1): TestEnvironment.Results","dev.tesserakt.testing.TestEnvironment.run"]},{"name":"val ExactMatch: Comparison<Nothing>","description":"dev.tesserakt.testing.ExactMatch","location":"testing/tooling/environment/dev.tesserakt.testing/-exact-match.html","searchKeys":["ExactMatch","val ExactMatch: Comparison<Nothing>","dev.tesserakt.testing.ExactMatch"]},{"name":"val leftOver: List<T>","description":"dev.tesserakt.testing.Comparison.leftOver","location":"testing/tooling/environment/dev.tesserakt.testing/-comparison/left-over.html","searchKeys":["leftOver","val leftOver: List<T>","dev.tesserakt.testing.Comparison.leftOver"]},{"name":"val missing: List<T>","description":"dev.tesserakt.testing.Comparison.missing","location":"testing/tooling/environment/dev.tesserakt.testing/-comparison/missing.html","searchKeys":["missing","val missing: List<T>","dev.tesserakt.testing.Comparison.missing"]},{"name":"val results: List<Pair<Test, Test.Result>>","description":"dev.tesserakt.testing.TestEnvironment.Results.results","location":"testing/tooling/environment/dev.tesserakt.testing/-test-environment/-results/results.html","searchKeys":["results","val results: List<Pair<Test, Test.Result>>","dev.tesserakt.testing.TestEnvironment.Results.results"]},{"name":"val summary: String","description":"dev.tesserakt.testing.TestEnvironment.Results.summary","location":"testing/tooling/environment/dev.tesserakt.testing/-test-environment/-results/summary.html","searchKeys":["summary","val summary: String","dev.tesserakt.testing.TestEnvironment.Results.summary"]},{"name":"value class Failure(cause: Throwable) : Test.Result","description":"dev.tesserakt.testing.Test.Result.Failure","location":"testing/tooling/environment/dev.tesserakt.testing/-test/-result/-failure/index.html","searchKeys":["Failure","value class Failure(cause: Throwable) : Test.Result","dev.tesserakt.testing.Test.Result.Failure"]},{"name":"var filter: TestFilter","description":"dev.tesserakt.testing.TestEnvironment.filter","location":"testing/tooling/environment/dev.tesserakt.testing/-test-environment/filter.html","searchKeys":["filter","var filter: TestFilter","dev.tesserakt.testing.TestEnvironment.filter"]},{"name":"class DiffJs","description":"ReplayBenchmarkReplayer.DiffJs","location":"testing/tooling/replay-benchmark/[root]/-replay-benchmark-replayer/-diff-js/index.html","searchKeys":["DiffJs","class DiffJs","ReplayBenchmarkReplayer.DiffJs"]},{"name":"class ReplayBenchmark(identifier: Quad.NamedTerm, val store: SnapshotStore, val queries: List<String>)","description":"dev.tesserakt.sparql.benchmark.replay.ReplayBenchmark","location":"testing/tooling/replay-benchmark/dev.tesserakt.sparql.benchmark.replay/-replay-benchmark/index.html","searchKeys":["ReplayBenchmark","class ReplayBenchmark(identifier: Quad.NamedTerm, val store: SnapshotStore, val queries: List<String>)","dev.tesserakt.sparql.benchmark.replay.ReplayBenchmark"]},{"name":"class ReplayBenchmarkBuilder(name: N3NamedNode, start: N3Store)","description":"ReplayBenchmarkBuilder","location":"testing/tooling/replay-benchmark/[root]/-replay-benchmark-builder/index.html","searchKeys":["ReplayBenchmarkBuilder","class ReplayBenchmarkBuilder(name: N3NamedNode, start: N3Store)","ReplayBenchmarkBuilder"]},{"name":"class ReplayBenchmarkReplayer","description":"ReplayBenchmarkReplayer","location":"testing/tooling/replay-benchmark/[root]/-replay-benchmark-replayer/index.html","searchKeys":["ReplayBenchmarkReplayer","class ReplayBenchmarkReplayer","ReplayBenchmarkReplayer"]},{"name":"constructor(identifier: Quad.NamedTerm, store: SnapshotStore, queries: List<String>)","description":"dev.tesserakt.sparql.benchmark.replay.ReplayBenchmark.ReplayBenchmark","location":"testing/tooling/replay-benchmark/dev.tesserakt.sparql.benchmark.replay/-replay-benchmark/-replay-benchmark.html","searchKeys":["ReplayBenchmark","constructor(identifier: Quad.NamedTerm, store: SnapshotStore, queries: List<String>)","dev.tesserakt.sparql.benchmark.replay.ReplayBenchmark.ReplayBenchmark"]},{"name":"constructor(name: N3NamedNode, start: N3Store)","description":"ReplayBenchmarkBuilder.ReplayBenchmarkBuilder","location":"testing/tooling/replay-benchmark/[root]/-replay-benchmark-builder/-replay-benchmark-builder.html","searchKeys":["ReplayBenchmarkBuilder","constructor(name: N3NamedNode, start: N3Store)","ReplayBenchmarkBuilder.ReplayBenchmarkBuilder"]},{"name":"fun addQuery(query: String): ReplayBenchmarkBuilder","description":"ReplayBenchmarkBuilder.addQuery","location":"testing/tooling/replay-benchmark/[root]/-replay-benchmark-builder/add-query.html","searchKeys":["addQuery","fun addQuery(query: String): ReplayBenchmarkBuilder","ReplayBenchmarkBuilder.addQuery"]},{"name":"fun addSnapshot(store: N3Store): ReplayBenchmarkBuilder","description":"ReplayBenchmarkBuilder.addSnapshot","location":"testing/tooling/replay-benchmark/[root]/-replay-benchmark-builder/add-snapshot.html","searchKeys":["addSnapshot","fun addSnapshot(store: N3Store): ReplayBenchmarkBuilder","ReplayBenchmarkBuilder.addSnapshot"]},{"name":"fun build(): N3Store","description":"ReplayBenchmarkBuilder.build","location":"testing/tooling/replay-benchmark/[root]/-replay-benchmark-builder/build.html","searchKeys":["build","fun build(): N3Store","ReplayBenchmarkBuilder.build"]},{"name":"fun buildToFile(path: String = \"./\", prefixes: dynamic)","description":"ReplayBenchmarkBuilder.buildToFile","location":"testing/tooling/replay-benchmark/[root]/-replay-benchmark-builder/build-to-file.html","searchKeys":["buildToFile","fun buildToFile(path: String = \"./\", prefixes: dynamic)","ReplayBenchmarkBuilder.buildToFile"]},{"name":"fun forEachSnapshot(callback: (MutableStoreJs, ReplayBenchmarkReplayer.DiffJs) -> Unit)","description":"ReplayBenchmarkReplayer.forEachSnapshot","location":"testing/tooling/replay-benchmark/[root]/-replay-benchmark-replayer/for-each-snapshot.html","searchKeys":["forEachSnapshot","fun forEachSnapshot(callback: (MutableStoreJs, ReplayBenchmarkReplayer.DiffJs) -> Unit)","ReplayBenchmarkReplayer.forEachSnapshot"]},{"name":"fun from(store: Store): List<ReplayBenchmark>","description":"dev.tesserakt.sparql.benchmark.replay.ReplayBenchmark.Companion.from","location":"testing/tooling/replay-benchmark/dev.tesserakt.sparql.benchmark.replay/-replay-benchmark/-companion/from.html","searchKeys":["from","fun from(store: Store): List<ReplayBenchmark>","dev.tesserakt.sparql.benchmark.replay.ReplayBenchmark.Companion.from"]},{"name":"fun fromFile(filepath: String): ReplayBenchmarkReplayer","description":"ReplayBenchmarkReplayer.Companion.fromFile","location":"testing/tooling/replay-benchmark/[root]/-replay-benchmark-replayer/-companion/from-file.html","searchKeys":["fromFile","fun fromFile(filepath: String): ReplayBenchmarkReplayer","ReplayBenchmarkReplayer.Companion.fromFile"]},{"name":"fun toStore(target: Store = Store()): Store","description":"dev.tesserakt.sparql.benchmark.replay.ReplayBenchmark.toStore","location":"testing/tooling/replay-benchmark/dev.tesserakt.sparql.benchmark.replay/-replay-benchmark/to-store.html","searchKeys":["toStore","fun toStore(target: Store = Store()): Store","dev.tesserakt.sparql.benchmark.replay.ReplayBenchmark.toStore"]},{"name":"inline fun eval(block: (current: Store, diff: SnapshotStore.Diff) -> Unit)","description":"dev.tesserakt.sparql.benchmark.replay.ReplayBenchmark.eval","location":"testing/tooling/replay-benchmark/dev.tesserakt.sparql.benchmark.replay/-replay-benchmark/eval.html","searchKeys":["eval","inline fun eval(block: (current: Store, diff: SnapshotStore.Diff) -> Unit)","dev.tesserakt.sparql.benchmark.replay.ReplayBenchmark.eval"]},{"name":"object Companion","description":"ReplayBenchmarkReplayer.Companion","location":"testing/tooling/replay-benchmark/[root]/-replay-benchmark-replayer/-companion/index.html","searchKeys":["Companion","object Companion","ReplayBenchmarkReplayer.Companion"]},{"name":"object Companion","description":"dev.tesserakt.sparql.benchmark.replay.ReplayBenchmark.Companion","location":"testing/tooling/replay-benchmark/dev.tesserakt.sparql.benchmark.replay/-replay-benchmark/-companion/index.html","searchKeys":["Companion","object Companion","dev.tesserakt.sparql.benchmark.replay.ReplayBenchmark.Companion"]},{"name":"val deletions: JsSet<QuadJs>","description":"ReplayBenchmarkReplayer.DiffJs.deletions","location":"testing/tooling/replay-benchmark/[root]/-replay-benchmark-replayer/-diff-js/deletions.html","searchKeys":["deletions","val deletions: JsSet<QuadJs>","ReplayBenchmarkReplayer.DiffJs.deletions"]},{"name":"val insertions: JsSet<QuadJs>","description":"ReplayBenchmarkReplayer.DiffJs.insertions","location":"testing/tooling/replay-benchmark/[root]/-replay-benchmark-replayer/-diff-js/insertions.html","searchKeys":["insertions","val insertions: JsSet<QuadJs>","ReplayBenchmarkReplayer.DiffJs.insertions"]},{"name":"val queries: Array<String>","description":"ReplayBenchmarkReplayer.queries","location":"testing/tooling/replay-benchmark/[root]/-replay-benchmark-replayer/queries.html","searchKeys":["queries","val queries: Array<String>","ReplayBenchmarkReplayer.queries"]},{"name":"val queries: List<String>","description":"dev.tesserakt.sparql.benchmark.replay.ReplayBenchmark.queries","location":"testing/tooling/replay-benchmark/dev.tesserakt.sparql.benchmark.replay/-replay-benchmark/queries.html","searchKeys":["queries","val queries: List<String>","dev.tesserakt.sparql.benchmark.replay.ReplayBenchmark.queries"]},{"name":"val store: SnapshotStore","description":"dev.tesserakt.sparql.benchmark.replay.ReplayBenchmark.store","location":"testing/tooling/replay-benchmark/dev.tesserakt.sparql.benchmark.replay/-replay-benchmark/store.html","searchKeys":["store","val store: SnapshotStore","dev.tesserakt.sparql.benchmark.replay.ReplayBenchmark.store"]},{"name":"object NTriples : Serializer","description":"dev.tesserakt.rdf.serialization.NTriples","location":"serialization/n-triples/dev.tesserakt.rdf.serialization/-n-triples/index.html","searchKeys":["NTriples","object NTriples : Serializer","dev.tesserakt.rdf.serialization.NTriples"]},{"name":"open override fun deserialize(input: DataSource): Iterator<Quad>","description":"dev.tesserakt.rdf.serialization.NTriples.deserialize","location":"serialization/n-triples/dev.tesserakt.rdf.serialization/-n-triples/deserialize.html","searchKeys":["deserialize","open override fun deserialize(input: DataSource): Iterator<Quad>","dev.tesserakt.rdf.serialization.NTriples.deserialize"]},{"name":"open override fun serialize(data: Iterator<Quad>): Iterator<String>","description":"dev.tesserakt.rdf.serialization.NTriples.serialize","location":"serialization/n-triples/dev.tesserakt.rdf.serialization/-n-triples/serialize.html","searchKeys":["serialize","open override fun serialize(data: Iterator<Quad>): Iterator<String>","dev.tesserakt.rdf.serialization.NTriples.serialize"]},{"name":"AggAvg","description":"dev.tesserakt.sparql.compiler.lexer.Token.Keyword.AggAvg","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-keyword/-agg-avg/index.html","searchKeys":["AggAvg","AggAvg","dev.tesserakt.sparql.compiler.lexer.Token.Keyword.AggAvg"]},{"name":"AggCount","description":"dev.tesserakt.sparql.compiler.lexer.Token.Keyword.AggCount","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-keyword/-agg-count/index.html","searchKeys":["AggCount","AggCount","dev.tesserakt.sparql.compiler.lexer.Token.Keyword.AggCount"]},{"name":"AggGroupConcat","description":"dev.tesserakt.sparql.compiler.lexer.Token.Keyword.AggGroupConcat","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-keyword/-agg-group-concat/index.html","searchKeys":["AggGroupConcat","AggGroupConcat","dev.tesserakt.sparql.compiler.lexer.Token.Keyword.AggGroupConcat"]},{"name":"AggMax","description":"dev.tesserakt.sparql.compiler.lexer.Token.Keyword.AggMax","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-keyword/-agg-max/index.html","searchKeys":["AggMax","AggMax","dev.tesserakt.sparql.compiler.lexer.Token.Keyword.AggMax"]},{"name":"AggMin","description":"dev.tesserakt.sparql.compiler.lexer.Token.Keyword.AggMin","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-keyword/-agg-min/index.html","searchKeys":["AggMin","AggMin","dev.tesserakt.sparql.compiler.lexer.Token.Keyword.AggMin"]},{"name":"AggSample","description":"dev.tesserakt.sparql.compiler.lexer.Token.Keyword.AggSample","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-keyword/-agg-sample/index.html","searchKeys":["AggSample","AggSample","dev.tesserakt.sparql.compiler.lexer.Token.Keyword.AggSample"]},{"name":"AggSum","description":"dev.tesserakt.sparql.compiler.lexer.Token.Keyword.AggSum","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-keyword/-agg-sum/index.html","searchKeys":["AggSum","AggSum","dev.tesserakt.sparql.compiler.lexer.Token.Keyword.AggSum"]},{"name":"AngularBracketEnd","description":"dev.tesserakt.sparql.compiler.lexer.Token.Symbol.AngularBracketEnd","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-symbol/-angular-bracket-end/index.html","searchKeys":["AngularBracketEnd","AngularBracketEnd","dev.tesserakt.sparql.compiler.lexer.Token.Symbol.AngularBracketEnd"]},{"name":"AngularBracketStart","description":"dev.tesserakt.sparql.compiler.lexer.Token.Symbol.AngularBracketStart","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-symbol/-angular-bracket-start/index.html","searchKeys":["AngularBracketStart","AngularBracketStart","dev.tesserakt.sparql.compiler.lexer.Token.Symbol.AngularBracketStart"]},{"name":"As","description":"dev.tesserakt.sparql.compiler.lexer.Token.Keyword.As","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-keyword/-as/index.html","searchKeys":["As","As","dev.tesserakt.sparql.compiler.lexer.Token.Keyword.As"]},{"name":"Ask","description":"dev.tesserakt.sparql.compiler.lexer.Token.Keyword.Ask","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-keyword/-ask/index.html","searchKeys":["Ask","Ask","dev.tesserakt.sparql.compiler.lexer.Token.Keyword.Ask"]},{"name":"Asterisk","description":"dev.tesserakt.sparql.compiler.lexer.Token.Symbol.Asterisk","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-symbol/-asterisk/index.html","searchKeys":["Asterisk","Asterisk","dev.tesserakt.sparql.compiler.lexer.Token.Symbol.Asterisk"]},{"name":"Bind","description":"dev.tesserakt.sparql.compiler.lexer.Token.Keyword.Bind","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-keyword/-bind/index.html","searchKeys":["Bind","Bind","dev.tesserakt.sparql.compiler.lexer.Token.Keyword.Bind"]},{"name":"Bindings","description":"dev.tesserakt.sparql.compiler.lexer.Token.Keyword.Bindings","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-keyword/-bindings/index.html","searchKeys":["Bindings","Bindings","dev.tesserakt.sparql.compiler.lexer.Token.Keyword.Bindings"]},{"name":"BlankEnd","description":"dev.tesserakt.sparql.compiler.lexer.Token.Symbol.BlankEnd","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-symbol/-blank-end/index.html","searchKeys":["BlankEnd","BlankEnd","dev.tesserakt.sparql.compiler.lexer.Token.Symbol.BlankEnd"]},{"name":"BlankStart","description":"dev.tesserakt.sparql.compiler.lexer.Token.Symbol.BlankStart","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-symbol/-blank-start/index.html","searchKeys":["BlankStart","BlankStart","dev.tesserakt.sparql.compiler.lexer.Token.Symbol.BlankStart"]},{"name":"By","description":"dev.tesserakt.sparql.compiler.lexer.Token.Keyword.By","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-keyword/-by/index.html","searchKeys":["By","By","dev.tesserakt.sparql.compiler.lexer.Token.Keyword.By"]},{"name":"Comma","description":"dev.tesserakt.sparql.compiler.lexer.Token.Symbol.Comma","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-symbol/-comma/index.html","searchKeys":["Comma","Comma","dev.tesserakt.sparql.compiler.lexer.Token.Symbol.Comma"]},{"name":"Concat","description":"dev.tesserakt.sparql.compiler.lexer.Token.Keyword.Concat","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-keyword/-concat/index.html","searchKeys":["Concat","Concat","dev.tesserakt.sparql.compiler.lexer.Token.Keyword.Concat"]},{"name":"Construct","description":"dev.tesserakt.sparql.compiler.lexer.Token.Keyword.Construct","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-keyword/-construct/index.html","searchKeys":["Construct","Construct","dev.tesserakt.sparql.compiler.lexer.Token.Keyword.Construct"]},{"name":"CurlyBracketEnd","description":"dev.tesserakt.sparql.compiler.lexer.Token.Symbol.CurlyBracketEnd","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-symbol/-curly-bracket-end/index.html","searchKeys":["CurlyBracketEnd","CurlyBracketEnd","dev.tesserakt.sparql.compiler.lexer.Token.Symbol.CurlyBracketEnd"]},{"name":"CurlyBracketStart","description":"dev.tesserakt.sparql.compiler.lexer.Token.Symbol.CurlyBracketStart","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-symbol/-curly-bracket-start/index.html","searchKeys":["CurlyBracketStart","CurlyBracketStart","dev.tesserakt.sparql.compiler.lexer.Token.Symbol.CurlyBracketStart"]},{"name":"Distinct","description":"dev.tesserakt.sparql.compiler.lexer.Token.Keyword.Distinct","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-keyword/-distinct/index.html","searchKeys":["Distinct","Distinct","dev.tesserakt.sparql.compiler.lexer.Token.Keyword.Distinct"]},{"name":"Equals","description":"dev.tesserakt.sparql.compiler.lexer.Token.Symbol.Equals","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-symbol/-equals/index.html","searchKeys":["Equals","Equals","dev.tesserakt.sparql.compiler.lexer.Token.Symbol.Equals"]},{"name":"ExclamationMark","description":"dev.tesserakt.sparql.compiler.lexer.Token.Symbol.ExclamationMark","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-symbol/-exclamation-mark/index.html","searchKeys":["ExclamationMark","ExclamationMark","dev.tesserakt.sparql.compiler.lexer.Token.Symbol.ExclamationMark"]},{"name":"Exists","description":"dev.tesserakt.sparql.compiler.lexer.Token.Keyword.Exists","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-keyword/-exists/index.html","searchKeys":["Exists","Exists","dev.tesserakt.sparql.compiler.lexer.Token.Keyword.Exists"]},{"name":"Filter","description":"dev.tesserakt.sparql.compiler.lexer.Token.Keyword.Filter","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-keyword/-filter/index.html","searchKeys":["Filter","Filter","dev.tesserakt.sparql.compiler.lexer.Token.Keyword.Filter"]},{"name":"ForwardSlash","description":"dev.tesserakt.sparql.compiler.lexer.Token.Symbol.ForwardSlash","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-symbol/-forward-slash/index.html","searchKeys":["ForwardSlash","ForwardSlash","dev.tesserakt.sparql.compiler.lexer.Token.Symbol.ForwardSlash"]},{"name":"GTEQ","description":"dev.tesserakt.sparql.compiler.lexer.Token.Symbol.GTEQ","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-symbol/-g-t-e-q/index.html","searchKeys":["GTEQ","GTEQ","dev.tesserakt.sparql.compiler.lexer.Token.Symbol.GTEQ"]},{"name":"Group","description":"dev.tesserakt.sparql.compiler.lexer.Token.Keyword.Group","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-keyword/-group/index.html","searchKeys":["Group","Group","dev.tesserakt.sparql.compiler.lexer.Token.Keyword.Group"]},{"name":"Having","description":"dev.tesserakt.sparql.compiler.lexer.Token.Keyword.Having","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-keyword/-having/index.html","searchKeys":["Having","Having","dev.tesserakt.sparql.compiler.lexer.Token.Keyword.Having"]},{"name":"Insert","description":"dev.tesserakt.sparql.compiler.lexer.Token.Keyword.Insert","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-keyword/-insert/index.html","searchKeys":["Insert","Insert","dev.tesserakt.sparql.compiler.lexer.Token.Keyword.Insert"]},{"name":"LTEQ","description":"dev.tesserakt.sparql.compiler.lexer.Token.Symbol.LTEQ","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-symbol/-l-t-e-q/index.html","searchKeys":["LTEQ","LTEQ","dev.tesserakt.sparql.compiler.lexer.Token.Symbol.LTEQ"]},{"name":"Limit","description":"dev.tesserakt.sparql.compiler.lexer.Token.Keyword.Limit","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-keyword/-limit/index.html","searchKeys":["Limit","Limit","dev.tesserakt.sparql.compiler.lexer.Token.Keyword.Limit"]},{"name":"Not","description":"dev.tesserakt.sparql.compiler.lexer.Token.Keyword.Not","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-keyword/-not/index.html","searchKeys":["Not","Not","dev.tesserakt.sparql.compiler.lexer.Token.Keyword.Not"]},{"name":"NotEquals","description":"dev.tesserakt.sparql.compiler.lexer.Token.Symbol.NotEquals","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-symbol/-not-equals/index.html","searchKeys":["NotEquals","NotEquals","dev.tesserakt.sparql.compiler.lexer.Token.Symbol.NotEquals"]},{"name":"OpMinus","description":"dev.tesserakt.sparql.compiler.lexer.Token.Symbol.OpMinus","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-symbol/-op-minus/index.html","searchKeys":["OpMinus","OpMinus","dev.tesserakt.sparql.compiler.lexer.Token.Symbol.OpMinus"]},{"name":"OpPlus","description":"dev.tesserakt.sparql.compiler.lexer.Token.Symbol.OpPlus","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-symbol/-op-plus/index.html","searchKeys":["OpPlus","OpPlus","dev.tesserakt.sparql.compiler.lexer.Token.Symbol.OpPlus"]},{"name":"Optional","description":"dev.tesserakt.sparql.compiler.lexer.Token.Keyword.Optional","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-keyword/-optional/index.html","searchKeys":["Optional","Optional","dev.tesserakt.sparql.compiler.lexer.Token.Keyword.Optional"]},{"name":"Order","description":"dev.tesserakt.sparql.compiler.lexer.Token.Keyword.Order","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-keyword/-order/index.html","searchKeys":["Order","Order","dev.tesserakt.sparql.compiler.lexer.Token.Keyword.Order"]},{"name":"Period","description":"dev.tesserakt.sparql.compiler.lexer.Token.Symbol.Period","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-symbol/-period/index.html","searchKeys":["Period","Period","dev.tesserakt.sparql.compiler.lexer.Token.Symbol.Period"]},{"name":"PredicateOr","description":"dev.tesserakt.sparql.compiler.lexer.Token.Symbol.PredicateOr","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-symbol/-predicate-or/index.html","searchKeys":["PredicateOr","PredicateOr","dev.tesserakt.sparql.compiler.lexer.Token.Symbol.PredicateOr"]},{"name":"Prefix","description":"dev.tesserakt.sparql.compiler.lexer.Token.Keyword.Prefix","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-keyword/-prefix/index.html","searchKeys":["Prefix","Prefix","dev.tesserakt.sparql.compiler.lexer.Token.Keyword.Prefix"]},{"name":"RdfTypePredicate","description":"dev.tesserakt.sparql.compiler.lexer.Token.Keyword.RdfTypePredicate","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-keyword/-rdf-type-predicate/index.html","searchKeys":["RdfTypePredicate","RdfTypePredicate","dev.tesserakt.sparql.compiler.lexer.Token.Keyword.RdfTypePredicate"]},{"name":"Regex","description":"dev.tesserakt.sparql.compiler.lexer.Token.Keyword.Regex","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-keyword/-regex/index.html","searchKeys":["Regex","Regex","dev.tesserakt.sparql.compiler.lexer.Token.Keyword.Regex"]},{"name":"RoundBracketEnd","description":"dev.tesserakt.sparql.compiler.lexer.Token.Symbol.RoundBracketEnd","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-symbol/-round-bracket-end/index.html","searchKeys":["RoundBracketEnd","RoundBracketEnd","dev.tesserakt.sparql.compiler.lexer.Token.Symbol.RoundBracketEnd"]},{"name":"RoundBracketStart","description":"dev.tesserakt.sparql.compiler.lexer.Token.Symbol.RoundBracketStart","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-symbol/-round-bracket-start/index.html","searchKeys":["RoundBracketStart","RoundBracketStart","dev.tesserakt.sparql.compiler.lexer.Token.Symbol.RoundBracketStart"]},{"name":"Select","description":"dev.tesserakt.sparql.compiler.lexer.Token.Keyword.Select","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-keyword/-select/index.html","searchKeys":["Select","Select","dev.tesserakt.sparql.compiler.lexer.Token.Keyword.Select"]},{"name":"SemiColon","description":"dev.tesserakt.sparql.compiler.lexer.Token.Symbol.SemiColon","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-symbol/-semi-colon/index.html","searchKeys":["SemiColon","SemiColon","dev.tesserakt.sparql.compiler.lexer.Token.Symbol.SemiColon"]},{"name":"StringLength","description":"dev.tesserakt.sparql.compiler.lexer.Token.Keyword.StringLength","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-keyword/-string-length/index.html","searchKeys":["StringLength","StringLength","dev.tesserakt.sparql.compiler.lexer.Token.Keyword.StringLength"]},{"name":"StructuralError","description":"dev.tesserakt.sparql.compiler.CompilerException.Type.StructuralError","location":"sparql/compiler/dev.tesserakt.sparql.compiler/-compiler-exception/-type/-structural-error/index.html","searchKeys":["StructuralError","StructuralError","dev.tesserakt.sparql.compiler.CompilerException.Type.StructuralError"]},{"name":"SyntaxError","description":"dev.tesserakt.sparql.compiler.CompilerException.Type.SyntaxError","location":"sparql/compiler/dev.tesserakt.sparql.compiler/-compiler-exception/-type/-syntax-error/index.html","searchKeys":["SyntaxError","SyntaxError","dev.tesserakt.sparql.compiler.CompilerException.Type.SyntaxError"]},{"name":"Union","description":"dev.tesserakt.sparql.compiler.lexer.Token.Keyword.Union","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-keyword/-union/index.html","searchKeys":["Union","Union","dev.tesserakt.sparql.compiler.lexer.Token.Keyword.Union"]},{"name":"Values","description":"dev.tesserakt.sparql.compiler.lexer.Token.Keyword.Values","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-keyword/-values/index.html","searchKeys":["Values","Values","dev.tesserakt.sparql.compiler.lexer.Token.Keyword.Values"]},{"name":"Where","description":"dev.tesserakt.sparql.compiler.lexer.Token.Keyword.Where","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-keyword/-where/index.html","searchKeys":["Where","Where","dev.tesserakt.sparql.compiler.lexer.Token.Keyword.Where"]},{"name":"abstract class Analyser<RT : QueryAtom?>","description":"dev.tesserakt.sparql.compiler.analyser.Analyser","location":"sparql/compiler/dev.tesserakt.sparql.compiler.analyser/-analyser/index.html","searchKeys":["Analyser","abstract class Analyser<RT : QueryAtom?>","dev.tesserakt.sparql.compiler.analyser.Analyser"]},{"name":"abstract class Lexer","description":"dev.tesserakt.sparql.compiler.lexer.Lexer","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-lexer/index.html","searchKeys":["Lexer","abstract class Lexer","dev.tesserakt.sparql.compiler.lexer.Lexer"]},{"name":"abstract fun advance()","description":"dev.tesserakt.sparql.compiler.lexer.Lexer.advance","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-lexer/advance.html","searchKeys":["advance","abstract fun advance()","dev.tesserakt.sparql.compiler.lexer.Lexer.advance"]},{"name":"abstract fun position(): Int","description":"dev.tesserakt.sparql.compiler.lexer.Lexer.position","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-lexer/position.html","searchKeys":["position","abstract fun position(): Int","dev.tesserakt.sparql.compiler.lexer.Lexer.position"]},{"name":"abstract fun stacktrace(type: CompilerException.Type, message: String): String","description":"dev.tesserakt.sparql.compiler.lexer.Lexer.stacktrace","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-lexer/stacktrace.html","searchKeys":["stacktrace","abstract fun stacktrace(type: CompilerException.Type, message: String): String","dev.tesserakt.sparql.compiler.lexer.Lexer.stacktrace"]},{"name":"abstract val current: Token","description":"dev.tesserakt.sparql.compiler.lexer.Lexer.current","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-lexer/current.html","searchKeys":["current","abstract val current: Token","dev.tesserakt.sparql.compiler.lexer.Lexer.current"]},{"name":"abstract val syntax: String","description":"dev.tesserakt.sparql.compiler.lexer.Token.syntax","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/syntax.html","searchKeys":["syntax","abstract val syntax: String","dev.tesserakt.sparql.compiler.lexer.Token.syntax"]},{"name":"class AggregationProcessor : Analyser<Aggregation> ","description":"dev.tesserakt.sparql.compiler.analyser.AggregationProcessor","location":"sparql/compiler/dev.tesserakt.sparql.compiler.analyser/-aggregation-processor/index.html","searchKeys":["AggregationProcessor","class AggregationProcessor : Analyser<Aggregation> ","dev.tesserakt.sparql.compiler.analyser.AggregationProcessor"]},{"name":"class AggregatorProcessor : Analyser<Expression> ","description":"dev.tesserakt.sparql.compiler.analyser.AggregatorProcessor","location":"sparql/compiler/dev.tesserakt.sparql.compiler.analyser/-aggregator-processor/index.html","searchKeys":["AggregatorProcessor","class AggregatorProcessor : Analyser<Expression> ","dev.tesserakt.sparql.compiler.analyser.AggregatorProcessor"]},{"name":"class CompilerException(message: String, val type: CompilerException.Type, val stacktrace: String) : SparqlException","description":"dev.tesserakt.sparql.compiler.CompilerException","location":"sparql/compiler/dev.tesserakt.sparql.compiler/-compiler-exception/index.html","searchKeys":["CompilerException","class CompilerException(message: String, val type: CompilerException.Type, val stacktrace: String) : SparqlException","dev.tesserakt.sparql.compiler.CompilerException"]},{"name":"class FilterProcessor : Analyser<Filter> ","description":"dev.tesserakt.sparql.compiler.analyser.FilterProcessor","location":"sparql/compiler/dev.tesserakt.sparql.compiler.analyser/-filter-processor/index.html","searchKeys":["FilterProcessor","class FilterProcessor : Analyser<Filter> ","dev.tesserakt.sparql.compiler.analyser.FilterProcessor"]},{"name":"class PatternPredicateProcessor : Analyser<TriplePattern.Predicate?> ","description":"dev.tesserakt.sparql.compiler.analyser.PatternPredicateProcessor","location":"sparql/compiler/dev.tesserakt.sparql.compiler.analyser/-pattern-predicate-processor/index.html","searchKeys":["PatternPredicateProcessor","class PatternPredicateProcessor : Analyser<TriplePattern.Predicate?> ","dev.tesserakt.sparql.compiler.analyser.PatternPredicateProcessor"]},{"name":"class PatternProcessor : Analyser<TriplePatternSet> ","description":"dev.tesserakt.sparql.compiler.analyser.PatternProcessor","location":"sparql/compiler/dev.tesserakt.sparql.compiler.analyser/-pattern-processor/index.html","searchKeys":["PatternProcessor","class PatternProcessor : Analyser<TriplePatternSet> ","dev.tesserakt.sparql.compiler.analyser.PatternProcessor"]},{"name":"class QueryBodyProcessor : Analyser<GraphPattern> ","description":"dev.tesserakt.sparql.compiler.analyser.QueryBodyProcessor","location":"sparql/compiler/dev.tesserakt.sparql.compiler.analyser/-query-body-processor/index.html","searchKeys":["QueryBodyProcessor","class QueryBodyProcessor : Analyser<GraphPattern> ","dev.tesserakt.sparql.compiler.analyser.QueryBodyProcessor"]},{"name":"class QueryProcessor : Analyser<QueryStructure> ","description":"dev.tesserakt.sparql.compiler.analyser.QueryProcessor","location":"sparql/compiler/dev.tesserakt.sparql.compiler.analyser/-query-processor/index.html","searchKeys":["QueryProcessor","class QueryProcessor : Analyser<QueryStructure> ","dev.tesserakt.sparql.compiler.analyser.QueryProcessor"]},{"name":"class SegmentProcessor : Analyser<Segment> ","description":"dev.tesserakt.sparql.compiler.analyser.SegmentProcessor","location":"sparql/compiler/dev.tesserakt.sparql.compiler.analyser/-segment-processor/index.html","searchKeys":["SegmentProcessor","class SegmentProcessor : Analyser<Segment> ","dev.tesserakt.sparql.compiler.analyser.SegmentProcessor"]},{"name":"class SelectQueryProcessor : Analyser<SelectQueryStructure> ","description":"dev.tesserakt.sparql.compiler.analyser.SelectQueryProcessor","location":"sparql/compiler/dev.tesserakt.sparql.compiler.analyser/-select-query-processor/index.html","searchKeys":["SelectQueryProcessor","class SelectQueryProcessor : Analyser<SelectQueryStructure> ","dev.tesserakt.sparql.compiler.analyser.SelectQueryProcessor"]},{"name":"class StringLexer(input: String) : Lexer","description":"dev.tesserakt.sparql.compiler.lexer.StringLexer","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-string-lexer/index.html","searchKeys":["StringLexer","class StringLexer(input: String) : Lexer","dev.tesserakt.sparql.compiler.lexer.StringLexer"]},{"name":"class UnionProcessor : Analyser<Union> ","description":"dev.tesserakt.sparql.compiler.analyser.UnionProcessor","location":"sparql/compiler/dev.tesserakt.sparql.compiler.analyser/-union-processor/index.html","searchKeys":["UnionProcessor","class UnionProcessor : Analyser<Union> ","dev.tesserakt.sparql.compiler.analyser.UnionProcessor"]},{"name":"constructor()","description":"dev.tesserakt.sparql.compiler.analyser.AggregationProcessor.AggregationProcessor","location":"sparql/compiler/dev.tesserakt.sparql.compiler.analyser/-aggregation-processor/-aggregation-processor.html","searchKeys":["AggregationProcessor","constructor()","dev.tesserakt.sparql.compiler.analyser.AggregationProcessor.AggregationProcessor"]},{"name":"constructor()","description":"dev.tesserakt.sparql.compiler.analyser.AggregatorProcessor.AggregatorProcessor","location":"sparql/compiler/dev.tesserakt.sparql.compiler.analyser/-aggregator-processor/-aggregator-processor.html","searchKeys":["AggregatorProcessor","constructor()","dev.tesserakt.sparql.compiler.analyser.AggregatorProcessor.AggregatorProcessor"]},{"name":"constructor()","description":"dev.tesserakt.sparql.compiler.analyser.Analyser.Analyser","location":"sparql/compiler/dev.tesserakt.sparql.compiler.analyser/-analyser/-analyser.html","searchKeys":["Analyser","constructor()","dev.tesserakt.sparql.compiler.analyser.Analyser.Analyser"]},{"name":"constructor()","description":"dev.tesserakt.sparql.compiler.analyser.FilterProcessor.FilterProcessor","location":"sparql/compiler/dev.tesserakt.sparql.compiler.analyser/-filter-processor/-filter-processor.html","searchKeys":["FilterProcessor","constructor()","dev.tesserakt.sparql.compiler.analyser.FilterProcessor.FilterProcessor"]},{"name":"constructor()","description":"dev.tesserakt.sparql.compiler.analyser.PatternPredicateProcessor.PatternPredicateProcessor","location":"sparql/compiler/dev.tesserakt.sparql.compiler.analyser/-pattern-predicate-processor/-pattern-predicate-processor.html","searchKeys":["PatternPredicateProcessor","constructor()","dev.tesserakt.sparql.compiler.analyser.PatternPredicateProcessor.PatternPredicateProcessor"]},{"name":"constructor()","description":"dev.tesserakt.sparql.compiler.analyser.PatternProcessor.PatternProcessor","location":"sparql/compiler/dev.tesserakt.sparql.compiler.analyser/-pattern-processor/-pattern-processor.html","searchKeys":["PatternProcessor","constructor()","dev.tesserakt.sparql.compiler.analyser.PatternProcessor.PatternProcessor"]},{"name":"constructor()","description":"dev.tesserakt.sparql.compiler.analyser.QueryBodyProcessor.QueryBodyProcessor","location":"sparql/compiler/dev.tesserakt.sparql.compiler.analyser/-query-body-processor/-query-body-processor.html","searchKeys":["QueryBodyProcessor","constructor()","dev.tesserakt.sparql.compiler.analyser.QueryBodyProcessor.QueryBodyProcessor"]},{"name":"constructor()","description":"dev.tesserakt.sparql.compiler.analyser.QueryProcessor.QueryProcessor","location":"sparql/compiler/dev.tesserakt.sparql.compiler.analyser/-query-processor/-query-processor.html","searchKeys":["QueryProcessor","constructor()","dev.tesserakt.sparql.compiler.analyser.QueryProcessor.QueryProcessor"]},{"name":"constructor()","description":"dev.tesserakt.sparql.compiler.analyser.SegmentProcessor.SegmentProcessor","location":"sparql/compiler/dev.tesserakt.sparql.compiler.analyser/-segment-processor/-segment-processor.html","searchKeys":["SegmentProcessor","constructor()","dev.tesserakt.sparql.compiler.analyser.SegmentProcessor.SegmentProcessor"]},{"name":"constructor()","description":"dev.tesserakt.sparql.compiler.analyser.SelectQueryProcessor.SelectQueryProcessor","location":"sparql/compiler/dev.tesserakt.sparql.compiler.analyser/-select-query-processor/-select-query-processor.html","searchKeys":["SelectQueryProcessor","constructor()","dev.tesserakt.sparql.compiler.analyser.SelectQueryProcessor.SelectQueryProcessor"]},{"name":"constructor()","description":"dev.tesserakt.sparql.compiler.analyser.UnionProcessor.UnionProcessor","location":"sparql/compiler/dev.tesserakt.sparql.compiler.analyser/-union-processor/-union-processor.html","searchKeys":["UnionProcessor","constructor()","dev.tesserakt.sparql.compiler.analyser.UnionProcessor.UnionProcessor"]},{"name":"constructor()","description":"dev.tesserakt.sparql.compiler.lexer.Lexer.Lexer","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-lexer/-lexer.html","searchKeys":["Lexer","constructor()","dev.tesserakt.sparql.compiler.lexer.Lexer.Lexer"]},{"name":"constructor(input: String)","description":"dev.tesserakt.sparql.compiler.lexer.StringLexer.StringLexer","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-string-lexer/-string-lexer.html","searchKeys":["StringLexer","constructor(input: String)","dev.tesserakt.sparql.compiler.lexer.StringLexer.StringLexer"]},{"name":"constructor(message: String, type: CompilerException.Type, stacktrace: String)","description":"dev.tesserakt.sparql.compiler.CompilerException.CompilerException","location":"sparql/compiler/dev.tesserakt.sparql.compiler/-compiler-exception/-compiler-exception.html","searchKeys":["CompilerException","constructor(message: String, type: CompilerException.Type, stacktrace: String)","dev.tesserakt.sparql.compiler.CompilerException.CompilerException"]},{"name":"constructor(name: String)","description":"dev.tesserakt.sparql.compiler.lexer.Token.Binding.Binding","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-binding/-binding.html","searchKeys":["Binding","constructor(name: String)","dev.tesserakt.sparql.compiler.lexer.Token.Binding.Binding"]},{"name":"constructor(namespace: String, value: String)","description":"dev.tesserakt.sparql.compiler.lexer.Token.PrefixedTerm.PrefixedTerm","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-prefixed-term/-prefixed-term.html","searchKeys":["PrefixedTerm","constructor(namespace: String, value: String)","dev.tesserakt.sparql.compiler.lexer.Token.PrefixedTerm.PrefixedTerm"]},{"name":"constructor(value: Number)","description":"dev.tesserakt.sparql.compiler.lexer.Token.NumericLiteral.NumericLiteral","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-numeric-literal/-numeric-literal.html","searchKeys":["NumericLiteral","constructor(value: Number)","dev.tesserakt.sparql.compiler.lexer.Token.NumericLiteral.NumericLiteral"]},{"name":"constructor(value: String)","description":"dev.tesserakt.sparql.compiler.lexer.Token.BlankTerm.BlankTerm","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-blank-term/-blank-term.html","searchKeys":["BlankTerm","constructor(value: String)","dev.tesserakt.sparql.compiler.lexer.Token.BlankTerm.BlankTerm"]},{"name":"constructor(value: String)","description":"dev.tesserakt.sparql.compiler.lexer.Token.StringLiteral.StringLiteral","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-string-literal/-string-literal.html","searchKeys":["StringLiteral","constructor(value: String)","dev.tesserakt.sparql.compiler.lexer.Token.StringLiteral.StringLiteral"]},{"name":"constructor(value: String)","description":"dev.tesserakt.sparql.compiler.lexer.Token.Term.Term","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-term/-term.html","searchKeys":["Term","constructor(value: String)","dev.tesserakt.sparql.compiler.lexer.Token.Term.Term"]},{"name":"data class Binding(val name: String) : Token","description":"dev.tesserakt.sparql.compiler.lexer.Token.Binding","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-binding/index.html","searchKeys":["Binding","data class Binding(val name: String) : Token","dev.tesserakt.sparql.compiler.lexer.Token.Binding"]},{"name":"data class BlankTerm(val value: String) : Token","description":"dev.tesserakt.sparql.compiler.lexer.Token.BlankTerm","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-blank-term/index.html","searchKeys":["BlankTerm","data class BlankTerm(val value: String) : Token","dev.tesserakt.sparql.compiler.lexer.Token.BlankTerm"]},{"name":"data class NumericLiteral(val value: Number) : Token","description":"dev.tesserakt.sparql.compiler.lexer.Token.NumericLiteral","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-numeric-literal/index.html","searchKeys":["NumericLiteral","data class NumericLiteral(val value: Number) : Token","dev.tesserakt.sparql.compiler.lexer.Token.NumericLiteral"]},{"name":"data class PrefixedTerm(val namespace: String, val value: String) : Token","description":"dev.tesserakt.sparql.compiler.lexer.Token.PrefixedTerm","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-prefixed-term/index.html","searchKeys":["PrefixedTerm","data class PrefixedTerm(val namespace: String, val value: String) : Token","dev.tesserakt.sparql.compiler.lexer.Token.PrefixedTerm"]},{"name":"data class StringLiteral(val value: String) : Token","description":"dev.tesserakt.sparql.compiler.lexer.Token.StringLiteral","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-string-literal/index.html","searchKeys":["StringLiteral","data class StringLiteral(val value: String) : Token","dev.tesserakt.sparql.compiler.lexer.Token.StringLiteral"]},{"name":"data class Term(val value: String) : Token","description":"dev.tesserakt.sparql.compiler.lexer.Token.Term","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-term/index.html","searchKeys":["Term","data class Term(val value: String) : Token","dev.tesserakt.sparql.compiler.lexer.Token.Term"]},{"name":"data object EOF : Token","description":"dev.tesserakt.sparql.compiler.lexer.Token.EOF","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-e-o-f/index.html","searchKeys":["EOF","data object EOF : Token","dev.tesserakt.sparql.compiler.lexer.Token.EOF"]},{"name":"enum Keyword : Enum<Token.Keyword> , Token","description":"dev.tesserakt.sparql.compiler.lexer.Token.Keyword","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-keyword/index.html","searchKeys":["Keyword","enum Keyword : Enum<Token.Keyword> , Token","dev.tesserakt.sparql.compiler.lexer.Token.Keyword"]},{"name":"enum Symbol : Enum<Token.Symbol> , Token","description":"dev.tesserakt.sparql.compiler.lexer.Token.Symbol","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-symbol/index.html","searchKeys":["Symbol","enum Symbol : Enum<Token.Symbol> , Token","dev.tesserakt.sparql.compiler.lexer.Token.Symbol"]},{"name":"enum Type : Enum<CompilerException.Type> ","description":"dev.tesserakt.sparql.compiler.CompilerException.Type","location":"sparql/compiler/dev.tesserakt.sparql.compiler/-compiler-exception/-type/index.html","searchKeys":["Type","enum Type : Enum<CompilerException.Type> ","dev.tesserakt.sparql.compiler.CompilerException.Type"]},{"name":"fun String.indexOf(vararg char: Char, startIndex: Int, endIndex: Int): Int","description":"dev.tesserakt.sparql.compiler.lexer.Lexer.Companion.indexOf","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-lexer/-companion/index-of.html","searchKeys":["indexOf","fun String.indexOf(vararg char: Char, startIndex: Int, endIndex: Int): Int","dev.tesserakt.sparql.compiler.lexer.Lexer.Companion.indexOf"]},{"name":"fun String.indexOfLast(vararg char: Char, startIndex: Int, endIndex: Int = 0): Int","description":"dev.tesserakt.sparql.compiler.lexer.Lexer.Companion.indexOfLast","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-lexer/-companion/index-of-last.html","searchKeys":["indexOfLast","fun String.indexOfLast(vararg char: Char, startIndex: Int, endIndex: Int = 0): Int","dev.tesserakt.sparql.compiler.lexer.Lexer.Companion.indexOfLast"]},{"name":"fun String.substringFromUntil(index: Int, until: Char): String","description":"dev.tesserakt.sparql.compiler.lexer.Lexer.Companion.substringFromUntil","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-lexer/-companion/substring-from-until.html","searchKeys":["substringFromUntil","fun String.substringFromUntil(index: Int, until: Char): String","dev.tesserakt.sparql.compiler.lexer.Lexer.Companion.substringFromUntil"]},{"name":"fun configureAndUse(input: Lexer): RT","description":"dev.tesserakt.sparql.compiler.analyser.Analyser.configureAndUse","location":"sparql/compiler/dev.tesserakt.sparql.compiler.analyser/-analyser/configure-and-use.html","searchKeys":["configureAndUse","fun configureAndUse(input: Lexer): RT","dev.tesserakt.sparql.compiler.analyser.Analyser.configureAndUse"]},{"name":"fun process(lexer: Lexer): QueryStructure","description":"dev.tesserakt.sparql.compiler.analyser.QueryProcessor.process","location":"sparql/compiler/dev.tesserakt.sparql.compiler.analyser/-query-processor/process.html","searchKeys":["process","fun process(lexer: Lexer): QueryStructure","dev.tesserakt.sparql.compiler.analyser.QueryProcessor.process"]},{"name":"fun valueOf(value: String): CompilerException.Type","description":"dev.tesserakt.sparql.compiler.CompilerException.Type.valueOf","location":"sparql/compiler/dev.tesserakt.sparql.compiler/-compiler-exception/-type/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): CompilerException.Type","dev.tesserakt.sparql.compiler.CompilerException.Type.valueOf"]},{"name":"fun valueOf(value: String): Token.Keyword","description":"dev.tesserakt.sparql.compiler.lexer.Token.Keyword.valueOf","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-keyword/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): Token.Keyword","dev.tesserakt.sparql.compiler.lexer.Token.Keyword.valueOf"]},{"name":"fun valueOf(value: String): Token.Symbol","description":"dev.tesserakt.sparql.compiler.lexer.Token.Symbol.valueOf","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-symbol/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): Token.Symbol","dev.tesserakt.sparql.compiler.lexer.Token.Symbol.valueOf"]},{"name":"fun values(): Array<CompilerException.Type>","description":"dev.tesserakt.sparql.compiler.CompilerException.Type.values","location":"sparql/compiler/dev.tesserakt.sparql.compiler/-compiler-exception/-type/values.html","searchKeys":["values","fun values(): Array<CompilerException.Type>","dev.tesserakt.sparql.compiler.CompilerException.Type.values"]},{"name":"fun values(): Array<Token.Keyword>","description":"dev.tesserakt.sparql.compiler.lexer.Token.Keyword.values","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-keyword/values.html","searchKeys":["values","fun values(): Array<Token.Keyword>","dev.tesserakt.sparql.compiler.lexer.Token.Keyword.values"]},{"name":"fun values(): Array<Token.Symbol>","description":"dev.tesserakt.sparql.compiler.lexer.Token.Symbol.values","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-symbol/values.html","searchKeys":["values","fun values(): Array<Token.Symbol>","dev.tesserakt.sparql.compiler.lexer.Token.Symbol.values"]},{"name":"object Companion","description":"dev.tesserakt.sparql.compiler.lexer.Lexer.Companion","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-lexer/-companion/index.html","searchKeys":["Companion","object Companion","dev.tesserakt.sparql.compiler.lexer.Lexer.Companion"]},{"name":"object Companion","description":"dev.tesserakt.sparql.compiler.lexer.Token.Companion","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-companion/index.html","searchKeys":["Companion","object Companion","dev.tesserakt.sparql.compiler.lexer.Token.Companion"]},{"name":"open lateinit override var current: Token","description":"dev.tesserakt.sparql.compiler.lexer.StringLexer.current","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-string-lexer/current.html","searchKeys":["current","open lateinit override var current: Token","dev.tesserakt.sparql.compiler.lexer.StringLexer.current"]},{"name":"open override fun advance()","description":"dev.tesserakt.sparql.compiler.lexer.StringLexer.advance","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-string-lexer/advance.html","searchKeys":["advance","open override fun advance()","dev.tesserakt.sparql.compiler.lexer.StringLexer.advance"]},{"name":"open override fun position(): Int","description":"dev.tesserakt.sparql.compiler.lexer.StringLexer.position","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-string-lexer/position.html","searchKeys":["position","open override fun position(): Int","dev.tesserakt.sparql.compiler.lexer.StringLexer.position"]},{"name":"open override fun stacktrace(type: CompilerException.Type, message: String): String","description":"dev.tesserakt.sparql.compiler.lexer.StringLexer.stacktrace","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-string-lexer/stacktrace.html","searchKeys":["stacktrace","open override fun stacktrace(type: CompilerException.Type, message: String): String","dev.tesserakt.sparql.compiler.lexer.StringLexer.stacktrace"]},{"name":"open override fun toString(): String","description":"dev.tesserakt.sparql.compiler.lexer.Token.Binding.toString","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-binding/to-string.html","searchKeys":["toString","open override fun toString(): String","dev.tesserakt.sparql.compiler.lexer.Token.Binding.toString"]},{"name":"open override fun toString(): String","description":"dev.tesserakt.sparql.compiler.lexer.Token.BlankTerm.toString","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-blank-term/to-string.html","searchKeys":["toString","open override fun toString(): String","dev.tesserakt.sparql.compiler.lexer.Token.BlankTerm.toString"]},{"name":"open override fun toString(): String","description":"dev.tesserakt.sparql.compiler.lexer.Token.Keyword.toString","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-keyword/to-string.html","searchKeys":["toString","open override fun toString(): String","dev.tesserakt.sparql.compiler.lexer.Token.Keyword.toString"]},{"name":"open override fun toString(): String","description":"dev.tesserakt.sparql.compiler.lexer.Token.NumericLiteral.toString","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-numeric-literal/to-string.html","searchKeys":["toString","open override fun toString(): String","dev.tesserakt.sparql.compiler.lexer.Token.NumericLiteral.toString"]},{"name":"open override fun toString(): String","description":"dev.tesserakt.sparql.compiler.lexer.Token.PrefixedTerm.toString","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-prefixed-term/to-string.html","searchKeys":["toString","open override fun toString(): String","dev.tesserakt.sparql.compiler.lexer.Token.PrefixedTerm.toString"]},{"name":"open override fun toString(): String","description":"dev.tesserakt.sparql.compiler.lexer.Token.StringLiteral.toString","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-string-literal/to-string.html","searchKeys":["toString","open override fun toString(): String","dev.tesserakt.sparql.compiler.lexer.Token.StringLiteral.toString"]},{"name":"open override fun toString(): String","description":"dev.tesserakt.sparql.compiler.lexer.Token.Symbol.toString","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-symbol/to-string.html","searchKeys":["toString","open override fun toString(): String","dev.tesserakt.sparql.compiler.lexer.Token.Symbol.toString"]},{"name":"open override fun toString(): String","description":"dev.tesserakt.sparql.compiler.lexer.Token.Term.toString","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-term/to-string.html","searchKeys":["toString","open override fun toString(): String","dev.tesserakt.sparql.compiler.lexer.Token.Term.toString"]},{"name":"open override val syntax: String","description":"dev.tesserakt.sparql.compiler.lexer.Token.Binding.syntax","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-binding/syntax.html","searchKeys":["syntax","open override val syntax: String","dev.tesserakt.sparql.compiler.lexer.Token.Binding.syntax"]},{"name":"open override val syntax: String","description":"dev.tesserakt.sparql.compiler.lexer.Token.BlankTerm.syntax","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-blank-term/syntax.html","searchKeys":["syntax","open override val syntax: String","dev.tesserakt.sparql.compiler.lexer.Token.BlankTerm.syntax"]},{"name":"open override val syntax: String","description":"dev.tesserakt.sparql.compiler.lexer.Token.EOF.syntax","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-e-o-f/syntax.html","searchKeys":["syntax","open override val syntax: String","dev.tesserakt.sparql.compiler.lexer.Token.EOF.syntax"]},{"name":"open override val syntax: String","description":"dev.tesserakt.sparql.compiler.lexer.Token.Keyword.syntax","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-keyword/syntax.html","searchKeys":["syntax","open override val syntax: String","dev.tesserakt.sparql.compiler.lexer.Token.Keyword.syntax"]},{"name":"open override val syntax: String","description":"dev.tesserakt.sparql.compiler.lexer.Token.NumericLiteral.syntax","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-numeric-literal/syntax.html","searchKeys":["syntax","open override val syntax: String","dev.tesserakt.sparql.compiler.lexer.Token.NumericLiteral.syntax"]},{"name":"open override val syntax: String","description":"dev.tesserakt.sparql.compiler.lexer.Token.PrefixedTerm.syntax","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-prefixed-term/syntax.html","searchKeys":["syntax","open override val syntax: String","dev.tesserakt.sparql.compiler.lexer.Token.PrefixedTerm.syntax"]},{"name":"open override val syntax: String","description":"dev.tesserakt.sparql.compiler.lexer.Token.StringLiteral.syntax","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-string-literal/syntax.html","searchKeys":["syntax","open override val syntax: String","dev.tesserakt.sparql.compiler.lexer.Token.StringLiteral.syntax"]},{"name":"open override val syntax: String","description":"dev.tesserakt.sparql.compiler.lexer.Token.Symbol.syntax","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-symbol/syntax.html","searchKeys":["syntax","open override val syntax: String","dev.tesserakt.sparql.compiler.lexer.Token.Symbol.syntax"]},{"name":"open override val syntax: String","description":"dev.tesserakt.sparql.compiler.lexer.Token.Term.syntax","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-term/syntax.html","searchKeys":["syntax","open override val syntax: String","dev.tesserakt.sparql.compiler.lexer.Token.Term.syntax"]},{"name":"sealed interface Token","description":"dev.tesserakt.sparql.compiler.lexer.Token","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/index.html","searchKeys":["Token","sealed interface Token","dev.tesserakt.sparql.compiler.lexer.Token"]},{"name":"val Token.bindingName: String","description":"dev.tesserakt.sparql.compiler.lexer.Token.Companion.bindingName","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-companion/binding-name.html","searchKeys":["bindingName","val Token.bindingName: String","dev.tesserakt.sparql.compiler.lexer.Token.Companion.bindingName"]},{"name":"val Token.literalNumericValue: Number","description":"dev.tesserakt.sparql.compiler.lexer.Token.Companion.literalNumericValue","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-companion/literal-numeric-value.html","searchKeys":["literalNumericValue","val Token.literalNumericValue: Number","dev.tesserakt.sparql.compiler.lexer.Token.Companion.literalNumericValue"]},{"name":"val Token.literalTextValue: String","description":"dev.tesserakt.sparql.compiler.lexer.Token.Companion.literalTextValue","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-companion/literal-text-value.html","searchKeys":["literalTextValue","val Token.literalTextValue: String","dev.tesserakt.sparql.compiler.lexer.Token.Companion.literalTextValue"]},{"name":"val entries: EnumEntries<CompilerException.Type>","description":"dev.tesserakt.sparql.compiler.CompilerException.Type.entries","location":"sparql/compiler/dev.tesserakt.sparql.compiler/-compiler-exception/-type/entries.html","searchKeys":["entries","val entries: EnumEntries<CompilerException.Type>","dev.tesserakt.sparql.compiler.CompilerException.Type.entries"]},{"name":"val entries: EnumEntries<Token.Keyword>","description":"dev.tesserakt.sparql.compiler.lexer.Token.Keyword.entries","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-keyword/entries.html","searchKeys":["entries","val entries: EnumEntries<Token.Keyword>","dev.tesserakt.sparql.compiler.lexer.Token.Keyword.entries"]},{"name":"val entries: EnumEntries<Token.Symbol>","description":"dev.tesserakt.sparql.compiler.lexer.Token.Symbol.entries","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-symbol/entries.html","searchKeys":["entries","val entries: EnumEntries<Token.Symbol>","dev.tesserakt.sparql.compiler.lexer.Token.Symbol.entries"]},{"name":"val lut: Map<Char, List<Pair<String, Token>>>","description":"dev.tesserakt.sparql.compiler.lexer.Lexer.Companion.lut","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-lexer/-companion/lut.html","searchKeys":["lut","val lut: Map<Char, List<Pair<String, Token>>>","dev.tesserakt.sparql.compiler.lexer.Lexer.Companion.lut"]},{"name":"val name: String","description":"dev.tesserakt.sparql.compiler.lexer.Token.Binding.name","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-binding/name.html","searchKeys":["name","val name: String","dev.tesserakt.sparql.compiler.lexer.Token.Binding.name"]},{"name":"val namespace: String","description":"dev.tesserakt.sparql.compiler.lexer.Token.PrefixedTerm.namespace","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-prefixed-term/namespace.html","searchKeys":["namespace","val namespace: String","dev.tesserakt.sparql.compiler.lexer.Token.PrefixedTerm.namespace"]},{"name":"val stacktrace: String","description":"dev.tesserakt.sparql.compiler.CompilerException.stacktrace","location":"sparql/compiler/dev.tesserakt.sparql.compiler/-compiler-exception/stacktrace.html","searchKeys":["stacktrace","val stacktrace: String","dev.tesserakt.sparql.compiler.CompilerException.stacktrace"]},{"name":"val syntax: Map<String, Token>","description":"dev.tesserakt.sparql.compiler.lexer.Token.Companion.syntax","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-companion/syntax.html","searchKeys":["syntax","val syntax: Map<String, Token>","dev.tesserakt.sparql.compiler.lexer.Token.Companion.syntax"]},{"name":"val type: CompilerException.Type","description":"dev.tesserakt.sparql.compiler.CompilerException.type","location":"sparql/compiler/dev.tesserakt.sparql.compiler/-compiler-exception/type.html","searchKeys":["type","val type: CompilerException.Type","dev.tesserakt.sparql.compiler.CompilerException.type"]},{"name":"val value: Number","description":"dev.tesserakt.sparql.compiler.lexer.Token.NumericLiteral.value","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-numeric-literal/value.html","searchKeys":["value","val value: Number","dev.tesserakt.sparql.compiler.lexer.Token.NumericLiteral.value"]},{"name":"val value: String","description":"dev.tesserakt.sparql.compiler.lexer.Token.BlankTerm.value","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-blank-term/value.html","searchKeys":["value","val value: String","dev.tesserakt.sparql.compiler.lexer.Token.BlankTerm.value"]},{"name":"val value: String","description":"dev.tesserakt.sparql.compiler.lexer.Token.PrefixedTerm.value","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-prefixed-term/value.html","searchKeys":["value","val value: String","dev.tesserakt.sparql.compiler.lexer.Token.PrefixedTerm.value"]},{"name":"val value: String","description":"dev.tesserakt.sparql.compiler.lexer.Token.StringLiteral.value","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-string-literal/value.html","searchKeys":["value","val value: String","dev.tesserakt.sparql.compiler.lexer.Token.StringLiteral.value"]},{"name":"val value: String","description":"dev.tesserakt.sparql.compiler.lexer.Token.Term.value","location":"sparql/compiler/dev.tesserakt.sparql.compiler.lexer/-token/-term/value.html","searchKeys":["value","val value: String","dev.tesserakt.sparql.compiler.lexer.Token.Term.value"]},{"name":"abstract fun add(mapping: Mapping)","description":"dev.tesserakt.sparql.runtime.collection.MappingArray.add","location":"sparql/runtime/dev.tesserakt.sparql.runtime.collection/-mapping-array/add.html","searchKeys":["add","abstract fun add(mapping: Mapping)","dev.tesserakt.sparql.runtime.collection.MappingArray.add"]},{"name":"abstract fun addAll(mappings: Iterable<Mapping>)","description":"dev.tesserakt.sparql.runtime.collection.MappingArray.addAll","location":"sparql/runtime/dev.tesserakt.sparql.runtime.collection/-mapping-array/add-all.html","searchKeys":["addAll","abstract fun addAll(mappings: Iterable<Mapping>)","dev.tesserakt.sparql.runtime.collection.MappingArray.addAll"]},{"name":"abstract fun debugInformation(): String","description":"dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateful.debugInformation","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-graph-pattern-filter-state/-stateful/debug-information.html","searchKeys":["debugInformation","abstract fun debugInformation(): String","dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateful.debugInformation"]},{"name":"abstract fun debugInformation(): String","description":"dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node.debugInformation","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/-dynamic/-node/debug-information.html","searchKeys":["debugInformation","abstract fun debugInformation(): String","dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node.debugInformation"]},{"name":"abstract fun debugInformation(): String","description":"dev.tesserakt.sparql.runtime.query.MutableFilterState.debugInformation","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-mutable-filter-state/debug-information.html","searchKeys":["debugInformation","abstract fun debugInformation(): String","dev.tesserakt.sparql.runtime.query.MutableFilterState.debugInformation"]},{"name":"abstract fun eval(input: FilterExpression.OperationValue): FilterExpression.OperationValue","description":"dev.tesserakt.sparql.runtime.query.FilterExpression.Operation.eval","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-filter-expression/-operation/eval.html","searchKeys":["eval","abstract fun eval(input: FilterExpression.OperationValue): FilterExpression.OperationValue","dev.tesserakt.sparql.runtime.query.FilterExpression.Operation.eval"]},{"name":"abstract fun eval(lhs: Double, rhs: Double): Double","description":"dev.tesserakt.sparql.runtime.query.FilterExpression.MathOpEval.eval","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-filter-expression/-math-op-eval/eval.html","searchKeys":["eval","abstract fun eval(lhs: Double, rhs: Double): Double","dev.tesserakt.sparql.runtime.query.FilterExpression.MathOpEval.eval"]},{"name":"abstract fun filter(input: Stream<MappingDelta>): Stream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateful.filter","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-graph-pattern-filter-state/-stateful/filter.html","searchKeys":["filter","abstract fun filter(input: Stream<MappingDelta>): Stream<MappingDelta>","dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateful.filter"]},{"name":"abstract fun filter(input: Stream<MappingDelta>): Stream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateless.filter","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-graph-pattern-filter-state/-stateless/filter.html","searchKeys":["filter","abstract fun filter(input: Stream<MappingDelta>): Stream<MappingDelta>","dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateless.filter"]},{"name":"abstract fun filter(input: Stream<MappingDelta>): Stream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.MutableFilterState.filter","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-mutable-filter-state/filter.html","searchKeys":["filter","abstract fun filter(input: Stream<MappingDelta>): Stream<MappingDelta>","dev.tesserakt.sparql.runtime.query.MutableFilterState.filter"]},{"name":"abstract fun filter(input: Stream<MappingDelta>): Stream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.StatelessFilter.filter","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-stateless-filter/filter.html","searchKeys":["filter","abstract fun filter(input: Stream<MappingDelta>): Stream<MappingDelta>","dev.tesserakt.sparql.runtime.query.StatelessFilter.filter"]},{"name":"abstract fun filter(input: Stream<MappingDelta>, delta: DataDelta): Stream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateful.filter","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-graph-pattern-filter-state/-stateful/filter.html","searchKeys":["filter","abstract fun filter(input: Stream<MappingDelta>, delta: DataDelta): Stream<MappingDelta>","dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateful.filter"]},{"name":"abstract fun filter(input: Stream<MappingDelta>, delta: DataDelta): Stream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.MutableFilterState.filter","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-mutable-filter-state/filter.html","searchKeys":["filter","abstract fun filter(input: Stream<MappingDelta>, delta: DataDelta): Stream<MappingDelta>","dev.tesserakt.sparql.runtime.query.MutableFilterState.filter"]},{"name":"abstract fun iter(mapping: Mapping): OptimisedStream<Mapping>","description":"dev.tesserakt.sparql.runtime.collection.MappingArray.iter","location":"sparql/runtime/dev.tesserakt.sparql.runtime.collection/-mapping-array/iter.html","searchKeys":["iter","abstract fun iter(mapping: Mapping): OptimisedStream<Mapping>","dev.tesserakt.sparql.runtime.collection.MappingArray.iter"]},{"name":"abstract fun iter(mappings: List<Mapping>): List<OptimisedStream<Mapping>>","description":"dev.tesserakt.sparql.runtime.collection.MappingArray.iter","location":"sparql/runtime/dev.tesserakt.sparql.runtime.collection/-mapping-array/iter.html","searchKeys":["iter","abstract fun iter(mappings: List<Mapping>): List<OptimisedStream<Mapping>>","dev.tesserakt.sparql.runtime.collection.MappingArray.iter"]},{"name":"abstract fun join(delta: MappingDelta): Stream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node.join","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/-dynamic/-node/join.html","searchKeys":["join","abstract fun join(delta: MappingDelta): Stream<MappingDelta>","dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node.join"]},{"name":"abstract fun join(delta: MappingDelta): Stream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.MutableJoinState.join","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-mutable-join-state/join.html","searchKeys":["join","abstract fun join(delta: MappingDelta): Stream<MappingDelta>","dev.tesserakt.sparql.runtime.query.MutableJoinState.join"]},{"name":"abstract fun join(mappings: OptimisedStream<Mapping>): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.join","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/join.html","searchKeys":["join","abstract fun join(mappings: OptimisedStream<Mapping>): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.RepeatingPathState.join"]},{"name":"abstract fun join(mappings: OptimisedStream<Mapping>, ignore: Iterable<Mapping>): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.join","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/join.html","searchKeys":["join","abstract fun join(mappings: OptimisedStream<Mapping>, ignore: Iterable<Mapping>): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.RepeatingPathState.join"]},{"name":"abstract fun peek(addition: DataAddition): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/peek.html","searchKeys":["peek","abstract fun peek(addition: DataAddition): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.RepeatingPathState.peek"]},{"name":"abstract fun peek(deletion: DataDeletion): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/peek.html","searchKeys":["peek","abstract fun peek(deletion: DataDeletion): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.RepeatingPathState.peek"]},{"name":"abstract fun peek(delta: DataAddition): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.TriplePatternState.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-triple-pattern-state/peek.html","searchKeys":["peek","abstract fun peek(delta: DataAddition): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.TriplePatternState.peek"]},{"name":"abstract fun peek(delta: DataDelta): OptimisedStream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/-dynamic/-node/peek.html","searchKeys":["peek","abstract fun peek(delta: DataDelta): OptimisedStream<MappingDelta>","dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node.peek"]},{"name":"abstract fun peek(delta: DataDelta): OptimisedStream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.MutableFilterState.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-mutable-filter-state/peek.html","searchKeys":["peek","abstract fun peek(delta: DataDelta): OptimisedStream<MappingDelta>","dev.tesserakt.sparql.runtime.query.MutableFilterState.peek"]},{"name":"abstract fun peek(delta: DataDelta): OptimisedStream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.MutableJoinState.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-mutable-join-state/peek.html","searchKeys":["peek","abstract fun peek(delta: DataDelta): OptimisedStream<MappingDelta>","dev.tesserakt.sparql.runtime.query.MutableJoinState.peek"]},{"name":"abstract fun peek(parent: MutableJoinState, delta: DataDelta): Stream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateful.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-graph-pattern-filter-state/-stateful/peek.html","searchKeys":["peek","abstract fun peek(parent: MutableJoinState, delta: DataDelta): Stream<MappingDelta>","dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateful.peek"]},{"name":"abstract fun peek(quad: Quad): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.TriplePatternState.ArrayBackedPatternState.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-triple-pattern-state/-array-backed-pattern-state/peek.html","searchKeys":["peek","abstract fun peek(quad: Quad): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.TriplePatternState.ArrayBackedPatternState.peek"]},{"name":"abstract fun process(change: QueryState.ResultChange<BindingsImpl>): QueryState.ResultChange<ResultType>","description":"dev.tesserakt.sparql.runtime.query.QueryState.process","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-query-state/process.html","searchKeys":["process","abstract fun process(change: QueryState.ResultChange<BindingsImpl>): QueryState.ResultChange<ResultType>","dev.tesserakt.sparql.runtime.query.QueryState.process"]},{"name":"abstract fun process(delta: DataDelta)","description":"dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateful.process","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-graph-pattern-filter-state/-stateful/process.html","searchKeys":["process","abstract fun process(delta: DataDelta)","dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateful.process"]},{"name":"abstract fun process(delta: DataDelta)","description":"dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node.process","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/-dynamic/-node/process.html","searchKeys":["process","abstract fun process(delta: DataDelta)","dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node.process"]},{"name":"abstract fun process(delta: DataDelta)","description":"dev.tesserakt.sparql.runtime.query.MutableFilterState.process","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-mutable-filter-state/process.html","searchKeys":["process","abstract fun process(delta: DataDelta)","dev.tesserakt.sparql.runtime.query.MutableFilterState.process"]},{"name":"abstract fun process(delta: DataDelta)","description":"dev.tesserakt.sparql.runtime.query.MutableJoinState.process","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-mutable-join-state/process.html","searchKeys":["process","abstract fun process(delta: DataDelta)","dev.tesserakt.sparql.runtime.query.MutableJoinState.process"]},{"name":"abstract fun process(delta: DataDelta)","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.process","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/process.html","searchKeys":["process","abstract fun process(delta: DataDelta)","dev.tesserakt.sparql.runtime.query.RepeatingPathState.process"]},{"name":"abstract fun remove(mapping: Mapping)","description":"dev.tesserakt.sparql.runtime.collection.MappingArray.remove","location":"sparql/runtime/dev.tesserakt.sparql.runtime.collection/-mapping-array/remove.html","searchKeys":["remove","abstract fun remove(mapping: Mapping)","dev.tesserakt.sparql.runtime.collection.MappingArray.remove"]},{"name":"abstract fun removeAll(mappings: Iterable<Mapping>)","description":"dev.tesserakt.sparql.runtime.collection.MappingArray.removeAll","location":"sparql/runtime/dev.tesserakt.sparql.runtime.collection/-mapping-array/remove-all.html","searchKeys":["removeAll","abstract fun removeAll(mappings: Iterable<Mapping>)","dev.tesserakt.sparql.runtime.collection.MappingArray.removeAll"]},{"name":"abstract fun resolveBinding(id: Int): String","description":"dev.tesserakt.sparql.runtime.evaluation.QueryContext.resolveBinding","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-query-context/resolve-binding.html","searchKeys":["resolveBinding","abstract fun resolveBinding(id: Int): String","dev.tesserakt.sparql.runtime.evaluation.QueryContext.resolveBinding"]},{"name":"abstract fun resolveBinding(value: String): Int","description":"dev.tesserakt.sparql.runtime.evaluation.QueryContext.resolveBinding","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-query-context/resolve-binding.html","searchKeys":["resolveBinding","abstract fun resolveBinding(value: String): Int","dev.tesserakt.sparql.runtime.evaluation.QueryContext.resolveBinding"]},{"name":"abstract fun resolveTerm(id: Int): Quad.Term","description":"dev.tesserakt.sparql.runtime.evaluation.QueryContext.resolveTerm","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-query-context/resolve-term.html","searchKeys":["resolveTerm","abstract fun resolveTerm(id: Int): Quad.Term","dev.tesserakt.sparql.runtime.evaluation.QueryContext.resolveTerm"]},{"name":"abstract fun resolveTerm(value: Quad.Term): Int","description":"dev.tesserakt.sparql.runtime.evaluation.QueryContext.resolveTerm","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-query-context/resolve-term.html","searchKeys":["resolveTerm","abstract fun resolveTerm(value: Quad.Term): Int","dev.tesserakt.sparql.runtime.evaluation.QueryContext.resolveTerm"]},{"name":"abstract fun supportsEfficientIteration(): Boolean","description":"dev.tesserakt.sparql.runtime.stream.Stream.supportsEfficientIteration","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream/supports-efficient-iteration.html","searchKeys":["supportsEfficientIteration","abstract fun supportsEfficientIteration(): Boolean","dev.tesserakt.sparql.runtime.stream.Stream.supportsEfficientIteration"]},{"name":"abstract fun supportsReuse(): Boolean","description":"dev.tesserakt.sparql.runtime.stream.Stream.supportsReuse","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream/supports-reuse.html","searchKeys":["supportsReuse","abstract fun supportsReuse(): Boolean","dev.tesserakt.sparql.runtime.stream.Stream.supportsReuse"]},{"name":"abstract override fun debugInformation(): String","description":"dev.tesserakt.sparql.runtime.query.ExclusionFilterState.debugInformation","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-exclusion-filter-state/debug-information.html","searchKeys":["debugInformation","abstract override fun debugInformation(): String","dev.tesserakt.sparql.runtime.query.ExclusionFilterState.debugInformation"]},{"name":"abstract override fun debugInformation(): String","description":"dev.tesserakt.sparql.runtime.query.InclusionFilterState.debugInformation","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-inclusion-filter-state/debug-information.html","searchKeys":["debugInformation","abstract override fun debugInformation(): String","dev.tesserakt.sparql.runtime.query.InclusionFilterState.debugInformation"]},{"name":"abstract override fun filter(input: Stream<MappingDelta>): Stream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.ExclusionFilterState.filter","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-exclusion-filter-state/filter.html","searchKeys":["filter","abstract override fun filter(input: Stream<MappingDelta>): Stream<MappingDelta>","dev.tesserakt.sparql.runtime.query.ExclusionFilterState.filter"]},{"name":"abstract override fun filter(input: Stream<MappingDelta>): Stream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.InclusionFilterState.filter","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-inclusion-filter-state/filter.html","searchKeys":["filter","abstract override fun filter(input: Stream<MappingDelta>): Stream<MappingDelta>","dev.tesserakt.sparql.runtime.query.InclusionFilterState.filter"]},{"name":"abstract override fun filter(input: Stream<MappingDelta>, delta: DataDelta): Stream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.ExclusionFilterState.filter","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-exclusion-filter-state/filter.html","searchKeys":["filter","abstract override fun filter(input: Stream<MappingDelta>, delta: DataDelta): Stream<MappingDelta>","dev.tesserakt.sparql.runtime.query.ExclusionFilterState.filter"]},{"name":"abstract override fun filter(input: Stream<MappingDelta>, delta: DataDelta): Stream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.InclusionFilterState.filter","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-inclusion-filter-state/filter.html","searchKeys":["filter","abstract override fun filter(input: Stream<MappingDelta>, delta: DataDelta): Stream<MappingDelta>","dev.tesserakt.sparql.runtime.query.InclusionFilterState.filter"]},{"name":"abstract override fun join(delta: MappingDelta): Stream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.JoinTree.join","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/join.html","searchKeys":["join","abstract override fun join(delta: MappingDelta): Stream<MappingDelta>","dev.tesserakt.sparql.runtime.query.JoinTree.join"]},{"name":"abstract override fun peek(delta: DataDelta): OptimisedStream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.ExclusionFilterState.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-exclusion-filter-state/peek.html","searchKeys":["peek","abstract override fun peek(delta: DataDelta): OptimisedStream<MappingDelta>","dev.tesserakt.sparql.runtime.query.ExclusionFilterState.peek"]},{"name":"abstract override fun peek(delta: DataDelta): OptimisedStream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.InclusionFilterState.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-inclusion-filter-state/peek.html","searchKeys":["peek","abstract override fun peek(delta: DataDelta): OptimisedStream<MappingDelta>","dev.tesserakt.sparql.runtime.query.InclusionFilterState.peek"]},{"name":"abstract override fun peek(delta: DataDelta): OptimisedStream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.JoinTree.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/peek.html","searchKeys":["peek","abstract override fun peek(delta: DataDelta): OptimisedStream<MappingDelta>","dev.tesserakt.sparql.runtime.query.JoinTree.peek"]},{"name":"abstract override fun process(delta: DataDelta)","description":"dev.tesserakt.sparql.runtime.query.ExclusionFilterState.process","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-exclusion-filter-state/process.html","searchKeys":["process","abstract override fun process(delta: DataDelta)","dev.tesserakt.sparql.runtime.query.ExclusionFilterState.process"]},{"name":"abstract override fun process(delta: DataDelta)","description":"dev.tesserakt.sparql.runtime.query.InclusionFilterState.process","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-inclusion-filter-state/process.html","searchKeys":["process","abstract override fun process(delta: DataDelta)","dev.tesserakt.sparql.runtime.query.InclusionFilterState.process"]},{"name":"abstract override fun process(delta: DataDelta)","description":"dev.tesserakt.sparql.runtime.query.JoinTree.process","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/process.html","searchKeys":["process","abstract override fun process(delta: DataDelta)","dev.tesserakt.sparql.runtime.query.JoinTree.process"]},{"name":"abstract override val bindings: Set<String>","description":"dev.tesserakt.sparql.runtime.query.JoinTree.bindings","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/bindings.html","searchKeys":["bindings","abstract override val bindings: Set<String>","dev.tesserakt.sparql.runtime.query.JoinTree.bindings"]},{"name":"abstract val bindings: Set<String>","description":"dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node.bindings","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/-dynamic/-node/bindings.html","searchKeys":["bindings","abstract val bindings: Set<String>","dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node.bindings"]},{"name":"abstract val bindings: Set<String>","description":"dev.tesserakt.sparql.runtime.query.MutableJoinState.bindings","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-mutable-join-state/bindings.html","searchKeys":["bindings","abstract val bindings: Set<String>","dev.tesserakt.sparql.runtime.query.MutableJoinState.bindings"]},{"name":"abstract val cardinality: Cardinality","description":"dev.tesserakt.sparql.runtime.collection.MappingArray.cardinality","location":"sparql/runtime/dev.tesserakt.sparql.runtime.collection/-mapping-array/cardinality.html","searchKeys":["cardinality","abstract val cardinality: Cardinality","dev.tesserakt.sparql.runtime.collection.MappingArray.cardinality"]},{"name":"abstract val cardinality: Cardinality","description":"dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node.cardinality","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/-dynamic/-node/cardinality.html","searchKeys":["cardinality","abstract val cardinality: Cardinality","dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node.cardinality"]},{"name":"abstract val cardinality: Cardinality","description":"dev.tesserakt.sparql.runtime.query.MutableJoinState.cardinality","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-mutable-join-state/cardinality.html","searchKeys":["cardinality","abstract val cardinality: Cardinality","dev.tesserakt.sparql.runtime.query.MutableJoinState.cardinality"]},{"name":"abstract val cardinality: Cardinality","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.cardinality","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/cardinality.html","searchKeys":["cardinality","abstract val cardinality: Cardinality","dev.tesserakt.sparql.runtime.query.RepeatingPathState.cardinality"]},{"name":"abstract val cardinality: Cardinality","description":"dev.tesserakt.sparql.runtime.stream.Stream.cardinality","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream/cardinality.html","searchKeys":["cardinality","abstract val cardinality: Cardinality","dev.tesserakt.sparql.runtime.stream.Stream.cardinality"]},{"name":"abstract val description: String","description":"dev.tesserakt.sparql.runtime.stream.Stream.description","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream/description.html","searchKeys":["description","abstract val description: String","dev.tesserakt.sparql.runtime.stream.Stream.description"]},{"name":"abstract val mappings: List<Mapping>","description":"dev.tesserakt.sparql.runtime.collection.MappingArray.mappings","location":"sparql/runtime/dev.tesserakt.sparql.runtime.collection/-mapping-array/mappings.html","searchKeys":["mappings","abstract val mappings: List<Mapping>","dev.tesserakt.sparql.runtime.collection.MappingArray.mappings"]},{"name":"abstract val origin: DataDelta?","description":"dev.tesserakt.sparql.runtime.evaluation.MappingDelta.origin","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-mapping-delta/origin.html","searchKeys":["origin","abstract val origin: DataDelta?","dev.tesserakt.sparql.runtime.evaluation.MappingDelta.origin"]},{"name":"abstract val value: Mapping","description":"dev.tesserakt.sparql.runtime.evaluation.MappingDelta.value","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-mapping-delta/value.html","searchKeys":["value","abstract val value: Mapping","dev.tesserakt.sparql.runtime.evaluation.MappingDelta.value"]},{"name":"abstract val value: Quad","description":"dev.tesserakt.sparql.runtime.evaluation.DataDelta.value","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-data-delta/value.html","searchKeys":["value","abstract val value: Quad","dev.tesserakt.sparql.runtime.evaluation.DataDelta.value"]},{"name":"abstract val value: T","description":"dev.tesserakt.sparql.runtime.query.QueryState.ResultChange.value","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-query-state/-result-change/value.html","searchKeys":["value","abstract val value: T","dev.tesserakt.sparql.runtime.query.QueryState.ResultChange.value"]},{"name":"class AltPatternState(context: QueryContext, s: TriplePattern.Subject, p: TriplePattern.Alts, o: TriplePattern.Object) : TriplePatternState<TriplePattern.Alts> ","description":"dev.tesserakt.sparql.runtime.query.TriplePatternState.AltPatternState","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-triple-pattern-state/-alt-pattern-state/index.html","searchKeys":["AltPatternState","class AltPatternState(context: QueryContext, s: TriplePattern.Subject, p: TriplePattern.Alts, o: TriplePattern.Object) : TriplePatternState<TriplePattern.Alts> ","dev.tesserakt.sparql.runtime.query.TriplePatternState.AltPatternState"]},{"name":"class BasicGraphPatternState(val context: QueryContext, ast: GraphPattern)","description":"dev.tesserakt.sparql.runtime.query.BasicGraphPatternState","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-basic-graph-pattern-state/index.html","searchKeys":["BasicGraphPatternState","class BasicGraphPatternState(val context: QueryContext, ast: GraphPattern)","dev.tesserakt.sparql.runtime.query.BasicGraphPatternState"]},{"name":"class BindingIdentifierSet(ids: IntArray)","description":"dev.tesserakt.sparql.runtime.evaluation.BindingIdentifierSet","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-binding-identifier-set/index.html","searchKeys":["BindingIdentifierSet","class BindingIdentifierSet(ids: IntArray)","dev.tesserakt.sparql.runtime.evaluation.BindingIdentifierSet"]},{"name":"class BindingPatternState(context: QueryContext, subj: TriplePattern.Subject, pred: TriplePattern.Binding, obj: TriplePattern.Object) : TriplePatternState.ArrayBackedPatternState<TriplePattern.Binding> ","description":"dev.tesserakt.sparql.runtime.query.TriplePatternState.BindingPatternState","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-triple-pattern-state/-binding-pattern-state/index.html","searchKeys":["BindingPatternState","class BindingPatternState(context: QueryContext, subj: TriplePattern.Subject, pred: TriplePattern.Binding, obj: TriplePattern.Object) : TriplePatternState.ArrayBackedPatternState<TriplePattern.Binding> ","dev.tesserakt.sparql.runtime.query.TriplePatternState.BindingPatternState"]},{"name":"class BindingsImpl(context: QueryContext, mapping: Mapping) : Bindings","description":"dev.tesserakt.sparql.runtime.evaluation.BindingsImpl","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-bindings-impl/index.html","searchKeys":["BindingsImpl","class BindingsImpl(context: QueryContext, mapping: Mapping) : Bindings","dev.tesserakt.sparql.runtime.evaluation.BindingsImpl"]},{"name":"class Bitmask : Iterable<Int> ","description":"dev.tesserakt.sparql.util.Bitmask","location":"sparql/runtime/dev.tesserakt.sparql.util/-bitmask/index.html","searchKeys":["Bitmask","class Bitmask : Iterable<Int> ","dev.tesserakt.sparql.util.Bitmask"]},{"name":"class Broad(state: BasicGraphPatternState) : ExclusionFilterState","description":"dev.tesserakt.sparql.runtime.query.ExclusionFilterState.Broad","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-exclusion-filter-state/-broad/index.html","searchKeys":["Broad","class Broad(state: BasicGraphPatternState) : ExclusionFilterState","dev.tesserakt.sparql.runtime.query.ExclusionFilterState.Broad"]},{"name":"class Broad(state: BasicGraphPatternState) : InclusionFilterState","description":"dev.tesserakt.sparql.runtime.query.InclusionFilterState.Broad","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-inclusion-filter-state/-broad/index.html","searchKeys":["Broad","class Broad(state: BasicGraphPatternState) : InclusionFilterState","dev.tesserakt.sparql.runtime.query.InclusionFilterState.Broad"]},{"name":"class BufferedStream<E : Any>(source: Stream<E>) : Stream<E> , OptimisedStream<E> ","description":"dev.tesserakt.sparql.runtime.stream.BufferedStream","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-buffered-stream/index.html","searchKeys":["BufferedStream","class BufferedStream<E : Any>(source: Stream<E>) : Stream<E> , OptimisedStream<E> ","dev.tesserakt.sparql.runtime.stream.BufferedStream"]},{"name":"class Connected<J : MutableJoinState, L : JoinTree.Dynamic.Node<J>, R : JoinTree.Dynamic.Node<J>>(context: QueryContext, left: L, right: R, indexes: List<String>) : JoinTree.Dynamic.Node<J> ","description":"dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node.Connected","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/-dynamic/-node/-connected/index.html","searchKeys":["Connected","class Connected<J : MutableJoinState, L : JoinTree.Dynamic.Node<J>, R : JoinTree.Dynamic.Node<J>>(context: QueryContext, left: L, right: R, indexes: List<String>) : JoinTree.Dynamic.Node<J> ","dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node.Connected"]},{"name":"class Disconnected<J : MutableJoinState, L : JoinTree.Dynamic.Node<J>, R : JoinTree.Dynamic.Node<J>>(val context: QueryContext, val left: L, val right: R) : JoinTree.Dynamic.Node<J> ","description":"dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node.Disconnected","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/-dynamic/-node/-disconnected/index.html","searchKeys":["Disconnected","class Disconnected<J : MutableJoinState, L : JoinTree.Dynamic.Node<J>, R : JoinTree.Dynamic.Node<J>>(val context: QueryContext, val left: L, val right: R) : JoinTree.Dynamic.Node<J> ","dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node.Disconnected"]},{"name":"class Div(val context: QueryContext, val lhs: FilterExpression.Operation, val rhs: FilterExpression.Operation) : FilterExpression.MathOpEval","description":"dev.tesserakt.sparql.runtime.query.FilterExpression.MathOpEval.Div","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-filter-expression/-math-op-eval/-div/index.html","searchKeys":["Div","class Div(val context: QueryContext, val lhs: FilterExpression.Operation, val rhs: FilterExpression.Operation) : FilterExpression.MathOpEval","dev.tesserakt.sparql.runtime.query.FilterExpression.MathOpEval.Div"]},{"name":"class EQ(val context: QueryContext, left: FilterExpression.Operation, right: FilterExpression.Operation) : FilterExpression.ComparisonEval","description":"dev.tesserakt.sparql.runtime.query.FilterExpression.ComparisonEval.EQ","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-filter-expression/-comparison-eval/-e-q/index.html","searchKeys":["EQ","class EQ(val context: QueryContext, left: FilterExpression.Operation, right: FilterExpression.Operation) : FilterExpression.ComparisonEval","dev.tesserakt.sparql.runtime.query.FilterExpression.ComparisonEval.EQ"]},{"name":"class ExactPatternState(context: QueryContext, subj: TriplePattern.Subject, val pred: TriplePattern.Exact, obj: TriplePattern.Object) : TriplePatternState.ArrayBackedPatternState<TriplePattern.Exact> ","description":"dev.tesserakt.sparql.runtime.query.TriplePatternState.ExactPatternState","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-triple-pattern-state/-exact-pattern-state/index.html","searchKeys":["ExactPatternState","class ExactPatternState(context: QueryContext, subj: TriplePattern.Subject, val pred: TriplePattern.Exact, obj: TriplePattern.Object) : TriplePatternState.ArrayBackedPatternState<TriplePattern.Exact> ","dev.tesserakt.sparql.runtime.query.TriplePatternState.ExactPatternState"]},{"name":"class FilterExpression(val context: QueryContext, expr: Expression)","description":"dev.tesserakt.sparql.runtime.query.FilterExpression","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-filter-expression/index.html","searchKeys":["FilterExpression","class FilterExpression(val context: QueryContext, expr: Expression)","dev.tesserakt.sparql.runtime.query.FilterExpression"]},{"name":"class GT(val context: QueryContext, left: FilterExpression.Operation, right: FilterExpression.Operation) : FilterExpression.ComparisonEval","description":"dev.tesserakt.sparql.runtime.query.FilterExpression.ComparisonEval.GT","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-filter-expression/-comparison-eval/-g-t/index.html","searchKeys":["GT","class GT(val context: QueryContext, left: FilterExpression.Operation, right: FilterExpression.Operation) : FilterExpression.ComparisonEval","dev.tesserakt.sparql.runtime.query.FilterExpression.ComparisonEval.GT"]},{"name":"class GTEQ(val context: QueryContext, left: FilterExpression.Operation, right: FilterExpression.Operation) : FilterExpression.ComparisonEval","description":"dev.tesserakt.sparql.runtime.query.FilterExpression.ComparisonEval.GTEQ","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-filter-expression/-comparison-eval/-g-t-e-q/index.html","searchKeys":["GTEQ","class GTEQ(val context: QueryContext, left: FilterExpression.Operation, right: FilterExpression.Operation) : FilterExpression.ComparisonEval","dev.tesserakt.sparql.runtime.query.FilterExpression.ComparisonEval.GTEQ"]},{"name":"class GroupPatternState(context: QueryContext, pattern: TriplePatternSet, unions: List<Union>) : MutableJoinState","description":"dev.tesserakt.sparql.runtime.query.GroupPatternState","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-group-pattern-state/index.html","searchKeys":["GroupPatternState","class GroupPatternState(context: QueryContext, pattern: TriplePatternSet, unions: List<Union>) : MutableJoinState","dev.tesserakt.sparql.runtime.query.GroupPatternState"]},{"name":"class Iter<I>(iterator: Iterator<I>) : Iterator<Pair<Int, I>> ","description":"dev.tesserakt.sparql.runtime.stream.StreamWithIndex.Iter","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-with-index/-iter/index.html","searchKeys":["Iter","class Iter<I>(iterator: Iterator<I>) : Iterator<Pair<Int, I>> ","dev.tesserakt.sparql.runtime.stream.StreamWithIndex.Iter"]},{"name":"class LT(val context: QueryContext, left: FilterExpression.Operation, right: FilterExpression.Operation) : FilterExpression.ComparisonEval","description":"dev.tesserakt.sparql.runtime.query.FilterExpression.ComparisonEval.LT","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-filter-expression/-comparison-eval/-l-t/index.html","searchKeys":["LT","class LT(val context: QueryContext, left: FilterExpression.Operation, right: FilterExpression.Operation) : FilterExpression.ComparisonEval","dev.tesserakt.sparql.runtime.query.FilterExpression.ComparisonEval.LT"]},{"name":"class LTEQ(val context: QueryContext, left: FilterExpression.Operation, right: FilterExpression.Operation) : FilterExpression.ComparisonEval","description":"dev.tesserakt.sparql.runtime.query.FilterExpression.ComparisonEval.LTEQ","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-filter-expression/-comparison-eval/-l-t-e-q/index.html","searchKeys":["LTEQ","class LTEQ(val context: QueryContext, left: FilterExpression.Operation, right: FilterExpression.Operation) : FilterExpression.ComparisonEval","dev.tesserakt.sparql.runtime.query.FilterExpression.ComparisonEval.LTEQ"]},{"name":"class Mul(val context: QueryContext, val lhs: FilterExpression.Operation, val rhs: FilterExpression.Operation) : FilterExpression.MathOpEval","description":"dev.tesserakt.sparql.runtime.query.FilterExpression.MathOpEval.Mul","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-filter-expression/-math-op-eval/-mul/index.html","searchKeys":["Mul","class Mul(val context: QueryContext, val lhs: FilterExpression.Operation, val rhs: FilterExpression.Operation) : FilterExpression.MathOpEval","dev.tesserakt.sparql.runtime.query.FilterExpression.MathOpEval.Mul"]},{"name":"class MultiHashMappingArray(context: QueryContext, bindings: Set<String>) : MappingArray","description":"dev.tesserakt.sparql.runtime.collection.MultiHashMappingArray","location":"sparql/runtime/dev.tesserakt.sparql.runtime.collection/-multi-hash-mapping-array/index.html","searchKeys":["MultiHashMappingArray","class MultiHashMappingArray(context: QueryContext, bindings: Set<String>) : MappingArray","dev.tesserakt.sparql.runtime.collection.MultiHashMappingArray"]},{"name":"class NEQ(val context: QueryContext, left: FilterExpression.Operation, right: FilterExpression.Operation) : FilterExpression.ComparisonEval","description":"dev.tesserakt.sparql.runtime.query.FilterExpression.ComparisonEval.NEQ","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-filter-expression/-comparison-eval/-n-e-q/index.html","searchKeys":["NEQ","class NEQ(val context: QueryContext, left: FilterExpression.Operation, right: FilterExpression.Operation) : FilterExpression.ComparisonEval","dev.tesserakt.sparql.runtime.query.FilterExpression.ComparisonEval.NEQ"]},{"name":"class Narrow(context: QueryContext, commonBindingNames: Set<String>, state: BasicGraphPatternState) : ExclusionFilterState","description":"dev.tesserakt.sparql.runtime.query.ExclusionFilterState.Narrow","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-exclusion-filter-state/-narrow/index.html","searchKeys":["Narrow","class Narrow(context: QueryContext, commonBindingNames: Set<String>, state: BasicGraphPatternState) : ExclusionFilterState","dev.tesserakt.sparql.runtime.query.ExclusionFilterState.Narrow"]},{"name":"class Narrow(context: QueryContext, commonBindingNames: Set<String>, state: BasicGraphPatternState) : InclusionFilterState","description":"dev.tesserakt.sparql.runtime.query.InclusionFilterState.Narrow","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-inclusion-filter-state/-narrow/index.html","searchKeys":["Narrow","class Narrow(context: QueryContext, commonBindingNames: Set<String>, state: BasicGraphPatternState) : InclusionFilterState","dev.tesserakt.sparql.runtime.query.InclusionFilterState.Narrow"]},{"name":"class NegatedPatternState(context: QueryContext, subj: TriplePattern.Subject, val pred: TriplePattern.Negated, obj: TriplePattern.Object) : TriplePatternState.ArrayBackedPatternState<TriplePattern.Negated> ","description":"dev.tesserakt.sparql.runtime.query.TriplePatternState.NegatedPatternState","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-triple-pattern-state/-negated-pattern-state/index.html","searchKeys":["NegatedPatternState","class NegatedPatternState(context: QueryContext, subj: TriplePattern.Subject, val pred: TriplePattern.Negated, obj: TriplePattern.Object) : TriplePatternState.ArrayBackedPatternState<TriplePattern.Negated> ","dev.tesserakt.sparql.runtime.query.TriplePatternState.NegatedPatternState"]},{"name":"class OneOrMoreStatefulBindingExact(val context: QueryContext, val start: TriplePattern.Binding, inner: TriplePattern.Predicate, val end: TriplePattern.Exact) : RepeatingPathState","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulBindingExact","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateful-binding-exact/index.html","searchKeys":["OneOrMoreStatefulBindingExact","class OneOrMoreStatefulBindingExact(val context: QueryContext, val start: TriplePattern.Binding, inner: TriplePattern.Predicate, val end: TriplePattern.Exact) : RepeatingPathState","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulBindingExact"]},{"name":"class OneOrMoreStatefulBindings(val context: QueryContext, val start: TriplePattern.Binding, inner: TriplePattern.Predicate, val end: TriplePattern.Binding) : RepeatingPathState","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulBindings","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateful-bindings/index.html","searchKeys":["OneOrMoreStatefulBindings","class OneOrMoreStatefulBindings(val context: QueryContext, val start: TriplePattern.Binding, inner: TriplePattern.Predicate, val end: TriplePattern.Binding) : RepeatingPathState","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulBindings"]},{"name":"class OneOrMoreStatefulExact(val context: QueryContext, val start: TriplePattern.Exact, inner: TriplePattern.Predicate, val end: TriplePattern.Exact) : RepeatingPathState","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulExact","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateful-exact/index.html","searchKeys":["OneOrMoreStatefulExact","class OneOrMoreStatefulExact(val context: QueryContext, val start: TriplePattern.Exact, inner: TriplePattern.Predicate, val end: TriplePattern.Exact) : RepeatingPathState","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulExact"]},{"name":"class OneOrMoreStatefulExactBinding(val context: QueryContext, val start: TriplePattern.Exact, inner: TriplePattern.Predicate, val end: TriplePattern.Binding) : RepeatingPathState","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulExactBinding","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateful-exact-binding/index.html","searchKeys":["OneOrMoreStatefulExactBinding","class OneOrMoreStatefulExactBinding(val context: QueryContext, val start: TriplePattern.Exact, inner: TriplePattern.Predicate, val end: TriplePattern.Binding) : RepeatingPathState","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulExactBinding"]},{"name":"class OneOrMoreStatelessBindingExact(val context: QueryContext, val start: TriplePattern.Binding, val inner: TriplePattern.StatelessPredicate, val end: TriplePattern.Exact) : RepeatingPathState","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessBindingExact","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateless-binding-exact/index.html","searchKeys":["OneOrMoreStatelessBindingExact","class OneOrMoreStatelessBindingExact(val context: QueryContext, val start: TriplePattern.Binding, val inner: TriplePattern.StatelessPredicate, val end: TriplePattern.Exact) : RepeatingPathState","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessBindingExact"]},{"name":"class OneOrMoreStatelessBindings(val context: QueryContext, val start: TriplePattern.Binding, val inner: TriplePattern.StatelessPredicate, val end: TriplePattern.Binding) : RepeatingPathState","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessBindings","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateless-bindings/index.html","searchKeys":["OneOrMoreStatelessBindings","class OneOrMoreStatelessBindings(val context: QueryContext, val start: TriplePattern.Binding, val inner: TriplePattern.StatelessPredicate, val end: TriplePattern.Binding) : RepeatingPathState","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessBindings"]},{"name":"class OneOrMoreStatelessExact(val context: QueryContext, val start: TriplePattern.Exact, val inner: TriplePattern.StatelessPredicate, val end: TriplePattern.Exact) : RepeatingPathState","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessExact","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateless-exact/index.html","searchKeys":["OneOrMoreStatelessExact","class OneOrMoreStatelessExact(val context: QueryContext, val start: TriplePattern.Exact, val inner: TriplePattern.StatelessPredicate, val end: TriplePattern.Exact) : RepeatingPathState","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessExact"]},{"name":"class OneOrMoreStatelessExactBinding(val context: QueryContext, val start: TriplePattern.Exact, val inner: TriplePattern.StatelessPredicate, val end: TriplePattern.Binding) : RepeatingPathState","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessExactBinding","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateless-exact-binding/index.html","searchKeys":["OneOrMoreStatelessExactBinding","class OneOrMoreStatelessExactBinding(val context: QueryContext, val start: TriplePattern.Exact, val inner: TriplePattern.StatelessPredicate, val end: TriplePattern.Binding) : RepeatingPathState","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessExactBinding"]},{"name":"class QueryContextImpl(ast: QueryStructure) : QueryContext","description":"dev.tesserakt.sparql.runtime.evaluation.QueryContextImpl","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-query-context-impl/index.html","searchKeys":["QueryContextImpl","class QueryContextImpl(ast: QueryStructure) : QueryContext","dev.tesserakt.sparql.runtime.evaluation.QueryContextImpl"]},{"name":"class RepeatingPatternState(context: QueryContext, subj: TriplePattern.Subject, pred: TriplePattern.RepeatingPredicate, obj: TriplePattern.Object) : TriplePatternState<TriplePattern.RepeatingPredicate> ","description":"dev.tesserakt.sparql.runtime.query.TriplePatternState.RepeatingPatternState","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-triple-pattern-state/-repeating-pattern-state/index.html","searchKeys":["RepeatingPatternState","class RepeatingPatternState(context: QueryContext, subj: TriplePattern.Subject, pred: TriplePattern.RepeatingPredicate, obj: TriplePattern.Object) : TriplePatternState<TriplePattern.RepeatingPredicate> ","dev.tesserakt.sparql.runtime.query.TriplePatternState.RepeatingPatternState"]},{"name":"class SegmentsList","description":"dev.tesserakt.sparql.util.SegmentsList","location":"sparql/runtime/dev.tesserakt.sparql.util/-segments-list/index.html","searchKeys":["SegmentsList","class SegmentsList","dev.tesserakt.sparql.util.SegmentsList"]},{"name":"class SelectQueryState(ast: SelectQueryStructure) : QueryState<BindingsImpl, SelectQueryStructure> ","description":"dev.tesserakt.sparql.runtime.query.SelectQueryState","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-select-query-state/index.html","searchKeys":["SelectQueryState","class SelectQueryState(ast: SelectQueryStructure) : QueryState<BindingsImpl, SelectQueryStructure> ","dev.tesserakt.sparql.runtime.query.SelectQueryState"]},{"name":"class SequencePatternState(context: QueryContext, s: TriplePattern.Subject, p: TriplePattern.Sequence, o: TriplePattern.Object) : TriplePatternState<TriplePattern.Sequence> ","description":"dev.tesserakt.sparql.runtime.query.TriplePatternState.SequencePatternState","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-triple-pattern-state/-sequence-pattern-state/index.html","searchKeys":["SequencePatternState","class SequencePatternState(context: QueryContext, s: TriplePattern.Subject, p: TriplePattern.Sequence, o: TriplePattern.Object) : TriplePatternState<TriplePattern.Sequence> ","dev.tesserakt.sparql.runtime.query.TriplePatternState.SequencePatternState"]},{"name":"class SimpleAltPatternState(context: QueryContext, s: TriplePattern.Subject, p: TriplePattern.SimpleAlts, o: TriplePattern.Object) : TriplePatternState<TriplePattern.SimpleAlts> ","description":"dev.tesserakt.sparql.runtime.query.TriplePatternState.SimpleAltPatternState","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-triple-pattern-state/-simple-alt-pattern-state/index.html","searchKeys":["SimpleAltPatternState","class SimpleAltPatternState(context: QueryContext, s: TriplePattern.Subject, p: TriplePattern.SimpleAlts, o: TriplePattern.Object) : TriplePatternState<TriplePattern.SimpleAlts> ","dev.tesserakt.sparql.runtime.query.TriplePatternState.SimpleAltPatternState"]},{"name":"class SingleUseStreamView<E : Any> : OptimisedStream<E> ","description":"dev.tesserakt.sparql.runtime.stream.SingleUseStreamView","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-single-use-stream-view/index.html","searchKeys":["SingleUseStreamView","class SingleUseStreamView<E : Any> : OptimisedStream<E> ","dev.tesserakt.sparql.runtime.stream.SingleUseStreamView"]},{"name":"class StreamChain<E : Any>(val source1: Stream<E>, val source2: Stream<E>) : Stream<E> ","description":"dev.tesserakt.sparql.runtime.stream.StreamChain","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-chain/index.html","searchKeys":["StreamChain","class StreamChain<E : Any>(val source1: Stream<E>, val source2: Stream<E>) : Stream<E> ","dev.tesserakt.sparql.runtime.stream.StreamChain"]},{"name":"class StreamFilter<I : Any>(source: Stream<I>, predicate: (I) -> Boolean) : Stream<I> ","description":"dev.tesserakt.sparql.runtime.stream.StreamFilter","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-filter/index.html","searchKeys":["StreamFilter","class StreamFilter<I : Any>(source: Stream<I>, predicate: (I) -> Boolean) : Stream<I> ","dev.tesserakt.sparql.runtime.stream.StreamFilter"]},{"name":"class StreamMapping<I : Any, O : Any>(source: Stream<I>, transform: (I) -> O) : Stream<O> ","description":"dev.tesserakt.sparql.runtime.stream.StreamMapping","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-mapping/index.html","searchKeys":["StreamMapping","class StreamMapping<I : Any, O : Any>(source: Stream<I>, transform: (I) -> O) : Stream<O> ","dev.tesserakt.sparql.runtime.stream.StreamMapping"]},{"name":"class StreamMappingNullable<I : Any, O : Any>(source: Stream<I>, transform: (I) -> O?) : Stream<O> ","description":"dev.tesserakt.sparql.runtime.stream.StreamMappingNullable","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-mapping-nullable/index.html","searchKeys":["StreamMappingNullable","class StreamMappingNullable<I : Any, O : Any>(source: Stream<I>, transform: (I) -> O?) : Stream<O> ","dev.tesserakt.sparql.runtime.stream.StreamMappingNullable"]},{"name":"class StreamMultiJoin(left: Stream<Mapping>, right: OptimisedStream<Mapping>) : Stream<Mapping> ","description":"dev.tesserakt.sparql.runtime.stream.StreamMultiJoin","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-multi-join/index.html","searchKeys":["StreamMultiJoin","class StreamMultiJoin(left: Stream<Mapping>, right: OptimisedStream<Mapping>) : Stream<Mapping> ","dev.tesserakt.sparql.runtime.stream.StreamMultiJoin"]},{"name":"class StreamProduct<A : Any, B : Any>(left: Stream<A>, right: OptimisedStream<B>) : Stream<Pair<A, B>> ","description":"dev.tesserakt.sparql.runtime.stream.StreamProduct","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-product/index.html","searchKeys":["StreamProduct","class StreamProduct<A : Any, B : Any>(left: Stream<A>, right: OptimisedStream<B>) : Stream<Pair<A, B>> ","dev.tesserakt.sparql.runtime.stream.StreamProduct"]},{"name":"class StreamReduction<E : Any>(source: Stream<E>, removed: Iterable<E>) : Stream<E> ","description":"dev.tesserakt.sparql.runtime.stream.StreamReduction","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-reduction/index.html","searchKeys":["StreamReduction","class StreamReduction<E : Any>(source: Stream<E>, removed: Iterable<E>) : Stream<E> ","dev.tesserakt.sparql.runtime.stream.StreamReduction"]},{"name":"class StreamSingleJoin(left: Mapping, right: Stream<Mapping>) : Stream<Mapping> ","description":"dev.tesserakt.sparql.runtime.stream.StreamSingleJoin","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-single-join/index.html","searchKeys":["StreamSingleJoin","class StreamSingleJoin(left: Mapping, right: Stream<Mapping>) : Stream<Mapping> ","dev.tesserakt.sparql.runtime.stream.StreamSingleJoin"]},{"name":"class StreamTransform<I : Any, O : Any>(source: OptimisedStream<I>, transform: (I) -> Stream<O>, val cardinality: Cardinality) : Stream<O> ","description":"dev.tesserakt.sparql.runtime.stream.StreamTransform","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-transform/index.html","searchKeys":["StreamTransform","class StreamTransform<I : Any, O : Any>(source: OptimisedStream<I>, transform: (I) -> Stream<O>, val cardinality: Cardinality) : Stream<O> ","dev.tesserakt.sparql.runtime.stream.StreamTransform"]},{"name":"class StreamTransformNullable<I : Any, O : Any>(source: OptimisedStream<I>, transform: (I) -> Stream<O>?, val cardinality: Cardinality) : Stream<O> ","description":"dev.tesserakt.sparql.runtime.stream.StreamTransformNullable","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-transform-nullable/index.html","searchKeys":["StreamTransformNullable","class StreamTransformNullable<I : Any, O : Any>(source: OptimisedStream<I>, transform: (I) -> Stream<O>?, val cardinality: Cardinality) : Stream<O> ","dev.tesserakt.sparql.runtime.stream.StreamTransformNullable"]},{"name":"class Sub(val context: QueryContext, val lhs: FilterExpression.Operation, val rhs: FilterExpression.Operation) : FilterExpression.MathOpEval","description":"dev.tesserakt.sparql.runtime.query.FilterExpression.MathOpEval.Sub","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-filter-expression/-math-op-eval/-sub/index.html","searchKeys":["Sub","class Sub(val context: QueryContext, val lhs: FilterExpression.Operation, val rhs: FilterExpression.Operation) : FilterExpression.MathOpEval","dev.tesserakt.sparql.runtime.query.FilterExpression.MathOpEval.Sub"]},{"name":"class Sum(val context: QueryContext, val lhs: FilterExpression.Operation, val rhs: FilterExpression.Operation) : FilterExpression.MathOpEval","description":"dev.tesserakt.sparql.runtime.query.FilterExpression.MathOpEval.Sum","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-filter-expression/-math-op-eval/-sum/index.html","searchKeys":["Sum","class Sum(val context: QueryContext, val lhs: FilterExpression.Operation, val rhs: FilterExpression.Operation) : FilterExpression.MathOpEval","dev.tesserakt.sparql.runtime.query.FilterExpression.MathOpEval.Sum"]},{"name":"class UnboundedSequencePatternState(context: QueryContext, subj: TriplePattern.Subject, pred: TriplePattern.UnboundSequence, obj: TriplePattern.Object) : TriplePatternState<TriplePattern.UnboundSequence> ","description":"dev.tesserakt.sparql.runtime.query.TriplePatternState.UnboundedSequencePatternState","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-triple-pattern-state/-unbounded-sequence-pattern-state/index.html","searchKeys":["UnboundedSequencePatternState","class UnboundedSequencePatternState(context: QueryContext, subj: TriplePattern.Subject, pred: TriplePattern.UnboundSequence, obj: TriplePattern.Object) : TriplePatternState<TriplePattern.UnboundSequence> ","dev.tesserakt.sparql.runtime.query.TriplePatternState.UnboundedSequencePatternState"]},{"name":"class UnionState(context: QueryContext, union: Union) : MutableJoinState","description":"dev.tesserakt.sparql.runtime.query.UnionState","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-union-state/index.html","searchKeys":["UnionState","class UnionState(context: QueryContext, union: Union) : MutableJoinState","dev.tesserakt.sparql.runtime.query.UnionState"]},{"name":"class ZeroOrMoreStatefulBindingExact(val context: QueryContext, val start: TriplePattern.Binding, inner: TriplePattern.Predicate, val end: TriplePattern.Exact) : RepeatingPathState","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulBindingExact","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateful-binding-exact/index.html","searchKeys":["ZeroOrMoreStatefulBindingExact","class ZeroOrMoreStatefulBindingExact(val context: QueryContext, val start: TriplePattern.Binding, inner: TriplePattern.Predicate, val end: TriplePattern.Exact) : RepeatingPathState","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulBindingExact"]},{"name":"class ZeroOrMoreStatefulBindings(val context: QueryContext, val start: TriplePattern.Binding, inner: TriplePattern.Predicate, val end: TriplePattern.Binding) : RepeatingPathState","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulBindings","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateful-bindings/index.html","searchKeys":["ZeroOrMoreStatefulBindings","class ZeroOrMoreStatefulBindings(val context: QueryContext, val start: TriplePattern.Binding, inner: TriplePattern.Predicate, val end: TriplePattern.Binding) : RepeatingPathState","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulBindings"]},{"name":"class ZeroOrMoreStatefulExact(val context: QueryContext, val start: TriplePattern.Exact, inner: TriplePattern.Predicate, val end: TriplePattern.Exact) : RepeatingPathState","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulExact","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateful-exact/index.html","searchKeys":["ZeroOrMoreStatefulExact","class ZeroOrMoreStatefulExact(val context: QueryContext, val start: TriplePattern.Exact, inner: TriplePattern.Predicate, val end: TriplePattern.Exact) : RepeatingPathState","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulExact"]},{"name":"class ZeroOrMoreStatefulExactBinding(val context: QueryContext, val start: TriplePattern.Exact, inner: TriplePattern.Predicate, val end: TriplePattern.Binding) : RepeatingPathState","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulExactBinding","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateful-exact-binding/index.html","searchKeys":["ZeroOrMoreStatefulExactBinding","class ZeroOrMoreStatefulExactBinding(val context: QueryContext, val start: TriplePattern.Exact, inner: TriplePattern.Predicate, val end: TriplePattern.Binding) : RepeatingPathState","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulExactBinding"]},{"name":"class ZeroOrMoreStatelessBindingExact(val context: QueryContext, val start: TriplePattern.Binding, val inner: TriplePattern.StatelessPredicate, val end: TriplePattern.Exact) : RepeatingPathState","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessBindingExact","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateless-binding-exact/index.html","searchKeys":["ZeroOrMoreStatelessBindingExact","class ZeroOrMoreStatelessBindingExact(val context: QueryContext, val start: TriplePattern.Binding, val inner: TriplePattern.StatelessPredicate, val end: TriplePattern.Exact) : RepeatingPathState","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessBindingExact"]},{"name":"class ZeroOrMoreStatelessBindings(val context: QueryContext, val start: TriplePattern.Binding, val inner: TriplePattern.StatelessPredicate, val end: TriplePattern.Binding) : RepeatingPathState","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessBindings","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateless-bindings/index.html","searchKeys":["ZeroOrMoreStatelessBindings","class ZeroOrMoreStatelessBindings(val context: QueryContext, val start: TriplePattern.Binding, val inner: TriplePattern.StatelessPredicate, val end: TriplePattern.Binding) : RepeatingPathState","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessBindings"]},{"name":"class ZeroOrMoreStatelessExact(val context: QueryContext, val start: TriplePattern.Exact, val inner: TriplePattern.StatelessPredicate, val end: TriplePattern.Exact) : RepeatingPathState","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessExact","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateless-exact/index.html","searchKeys":["ZeroOrMoreStatelessExact","class ZeroOrMoreStatelessExact(val context: QueryContext, val start: TriplePattern.Exact, val inner: TriplePattern.StatelessPredicate, val end: TriplePattern.Exact) : RepeatingPathState","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessExact"]},{"name":"class ZeroOrMoreStatelessExactBinding(val context: QueryContext, val start: TriplePattern.Exact, val inner: TriplePattern.StatelessPredicate, val end: TriplePattern.Binding) : RepeatingPathState","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessExactBinding","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateless-exact-binding/index.html","searchKeys":["ZeroOrMoreStatelessExactBinding","class ZeroOrMoreStatelessExactBinding(val context: QueryContext, val start: TriplePattern.Exact, val inner: TriplePattern.StatelessPredicate, val end: TriplePattern.Binding) : RepeatingPathState","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessExactBinding"]},{"name":"constructor()","description":"dev.tesserakt.sparql.runtime.query.QueryState.Processor.Processor","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-query-state/-processor/-processor.html","searchKeys":["Processor","constructor()","dev.tesserakt.sparql.runtime.query.QueryState.Processor.Processor"]},{"name":"constructor()","description":"dev.tesserakt.sparql.util.Counter.Counter","location":"sparql/runtime/dev.tesserakt.sparql.util/-counter/-counter.html","searchKeys":["Counter","constructor()","dev.tesserakt.sparql.util.Counter.Counter"]},{"name":"constructor()","description":"dev.tesserakt.sparql.util.SegmentsList.SegmentsList","location":"sparql/runtime/dev.tesserakt.sparql.util/-segments-list/-segments-list.html","searchKeys":["SegmentsList","constructor()","dev.tesserakt.sparql.util.SegmentsList.SegmentsList"]},{"name":"constructor(ast: QueryStructure)","description":"dev.tesserakt.sparql.runtime.evaluation.QueryContextImpl.QueryContextImpl","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-query-context-impl/-query-context-impl.html","searchKeys":["QueryContextImpl","constructor(ast: QueryStructure)","dev.tesserakt.sparql.runtime.evaluation.QueryContextImpl.QueryContextImpl"]},{"name":"constructor(ast: SelectQueryStructure)","description":"dev.tesserakt.sparql.runtime.query.SelectQueryState.SelectQueryState","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-select-query-state/-select-query-state.html","searchKeys":["SelectQueryState","constructor(ast: SelectQueryStructure)","dev.tesserakt.sparql.runtime.query.SelectQueryState.SelectQueryState"]},{"name":"constructor(context: QueryContext, ast: GraphPattern)","description":"dev.tesserakt.sparql.runtime.query.BasicGraphPatternState.BasicGraphPatternState","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-basic-graph-pattern-state/-basic-graph-pattern-state.html","searchKeys":["BasicGraphPatternState","constructor(context: QueryContext, ast: GraphPattern)","dev.tesserakt.sparql.runtime.query.BasicGraphPatternState.BasicGraphPatternState"]},{"name":"constructor(context: QueryContext, bindings: Set<String>)","description":"dev.tesserakt.sparql.runtime.collection.MultiHashMappingArray.MultiHashMappingArray","location":"sparql/runtime/dev.tesserakt.sparql.runtime.collection/-multi-hash-mapping-array/-multi-hash-mapping-array.html","searchKeys":["MultiHashMappingArray","constructor(context: QueryContext, bindings: Set<String>)","dev.tesserakt.sparql.runtime.collection.MultiHashMappingArray.MultiHashMappingArray"]},{"name":"constructor(context: QueryContext, commonBindingNames: Set<String>, state: BasicGraphPatternState)","description":"dev.tesserakt.sparql.runtime.query.ExclusionFilterState.Narrow.Narrow","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-exclusion-filter-state/-narrow/-narrow.html","searchKeys":["Narrow","constructor(context: QueryContext, commonBindingNames: Set<String>, state: BasicGraphPatternState)","dev.tesserakt.sparql.runtime.query.ExclusionFilterState.Narrow.Narrow"]},{"name":"constructor(context: QueryContext, commonBindingNames: Set<String>, state: BasicGraphPatternState)","description":"dev.tesserakt.sparql.runtime.query.InclusionFilterState.Narrow.Narrow","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-inclusion-filter-state/-narrow/-narrow.html","searchKeys":["Narrow","constructor(context: QueryContext, commonBindingNames: Set<String>, state: BasicGraphPatternState)","dev.tesserakt.sparql.runtime.query.InclusionFilterState.Narrow.Narrow"]},{"name":"constructor(context: QueryContext, expr: Expression)","description":"dev.tesserakt.sparql.runtime.query.FilterExpression.FilterExpression","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-filter-expression/-filter-expression.html","searchKeys":["FilterExpression","constructor(context: QueryContext, expr: Expression)","dev.tesserakt.sparql.runtime.query.FilterExpression.FilterExpression"]},{"name":"constructor(context: QueryContext, expression: Expression)","description":"dev.tesserakt.sparql.runtime.query.ExpressionFilter.ExpressionFilter","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-expression-filter/-expression-filter.html","searchKeys":["ExpressionFilter","constructor(context: QueryContext, expression: Expression)","dev.tesserakt.sparql.runtime.query.ExpressionFilter.ExpressionFilter"]},{"name":"constructor(context: QueryContext, left: FilterExpression.Operation, right: FilterExpression.Operation)","description":"dev.tesserakt.sparql.runtime.query.FilterExpression.ComparisonEval.EQ.EQ","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-filter-expression/-comparison-eval/-e-q/-e-q.html","searchKeys":["EQ","constructor(context: QueryContext, left: FilterExpression.Operation, right: FilterExpression.Operation)","dev.tesserakt.sparql.runtime.query.FilterExpression.ComparisonEval.EQ.EQ"]},{"name":"constructor(context: QueryContext, left: FilterExpression.Operation, right: FilterExpression.Operation)","description":"dev.tesserakt.sparql.runtime.query.FilterExpression.ComparisonEval.GT.GT","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-filter-expression/-comparison-eval/-g-t/-g-t.html","searchKeys":["GT","constructor(context: QueryContext, left: FilterExpression.Operation, right: FilterExpression.Operation)","dev.tesserakt.sparql.runtime.query.FilterExpression.ComparisonEval.GT.GT"]},{"name":"constructor(context: QueryContext, left: FilterExpression.Operation, right: FilterExpression.Operation)","description":"dev.tesserakt.sparql.runtime.query.FilterExpression.ComparisonEval.GTEQ.GTEQ","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-filter-expression/-comparison-eval/-g-t-e-q/-g-t-e-q.html","searchKeys":["GTEQ","constructor(context: QueryContext, left: FilterExpression.Operation, right: FilterExpression.Operation)","dev.tesserakt.sparql.runtime.query.FilterExpression.ComparisonEval.GTEQ.GTEQ"]},{"name":"constructor(context: QueryContext, left: FilterExpression.Operation, right: FilterExpression.Operation)","description":"dev.tesserakt.sparql.runtime.query.FilterExpression.ComparisonEval.LT.LT","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-filter-expression/-comparison-eval/-l-t/-l-t.html","searchKeys":["LT","constructor(context: QueryContext, left: FilterExpression.Operation, right: FilterExpression.Operation)","dev.tesserakt.sparql.runtime.query.FilterExpression.ComparisonEval.LT.LT"]},{"name":"constructor(context: QueryContext, left: FilterExpression.Operation, right: FilterExpression.Operation)","description":"dev.tesserakt.sparql.runtime.query.FilterExpression.ComparisonEval.LTEQ.LTEQ","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-filter-expression/-comparison-eval/-l-t-e-q/-l-t-e-q.html","searchKeys":["LTEQ","constructor(context: QueryContext, left: FilterExpression.Operation, right: FilterExpression.Operation)","dev.tesserakt.sparql.runtime.query.FilterExpression.ComparisonEval.LTEQ.LTEQ"]},{"name":"constructor(context: QueryContext, left: FilterExpression.Operation, right: FilterExpression.Operation)","description":"dev.tesserakt.sparql.runtime.query.FilterExpression.ComparisonEval.NEQ.NEQ","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-filter-expression/-comparison-eval/-n-e-q/-n-e-q.html","searchKeys":["NEQ","constructor(context: QueryContext, left: FilterExpression.Operation, right: FilterExpression.Operation)","dev.tesserakt.sparql.runtime.query.FilterExpression.ComparisonEval.NEQ.NEQ"]},{"name":"constructor(context: QueryContext, left: L, right: R)","description":"dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node.Disconnected.Disconnected","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/-dynamic/-node/-disconnected/-disconnected.html","searchKeys":["Disconnected","constructor(context: QueryContext, left: L, right: R)","dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node.Disconnected.Disconnected"]},{"name":"constructor(context: QueryContext, left: L, right: R, indexes: List<String>)","description":"dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node.Connected.Connected","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/-dynamic/-node/-connected/-connected.html","searchKeys":["Connected","constructor(context: QueryContext, left: L, right: R, indexes: List<String>)","dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node.Connected.Connected"]},{"name":"constructor(context: QueryContext, lhs: FilterExpression.Operation, rhs: FilterExpression.Operation)","description":"dev.tesserakt.sparql.runtime.query.FilterExpression.MathOpEval.Div.Div","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-filter-expression/-math-op-eval/-div/-div.html","searchKeys":["Div","constructor(context: QueryContext, lhs: FilterExpression.Operation, rhs: FilterExpression.Operation)","dev.tesserakt.sparql.runtime.query.FilterExpression.MathOpEval.Div.Div"]},{"name":"constructor(context: QueryContext, lhs: FilterExpression.Operation, rhs: FilterExpression.Operation)","description":"dev.tesserakt.sparql.runtime.query.FilterExpression.MathOpEval.Mul.Mul","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-filter-expression/-math-op-eval/-mul/-mul.html","searchKeys":["Mul","constructor(context: QueryContext, lhs: FilterExpression.Operation, rhs: FilterExpression.Operation)","dev.tesserakt.sparql.runtime.query.FilterExpression.MathOpEval.Mul.Mul"]},{"name":"constructor(context: QueryContext, lhs: FilterExpression.Operation, rhs: FilterExpression.Operation)","description":"dev.tesserakt.sparql.runtime.query.FilterExpression.MathOpEval.Sub.Sub","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-filter-expression/-math-op-eval/-sub/-sub.html","searchKeys":["Sub","constructor(context: QueryContext, lhs: FilterExpression.Operation, rhs: FilterExpression.Operation)","dev.tesserakt.sparql.runtime.query.FilterExpression.MathOpEval.Sub.Sub"]},{"name":"constructor(context: QueryContext, lhs: FilterExpression.Operation, rhs: FilterExpression.Operation)","description":"dev.tesserakt.sparql.runtime.query.FilterExpression.MathOpEval.Sum.Sum","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-filter-expression/-math-op-eval/-sum/-sum.html","searchKeys":["Sum","constructor(context: QueryContext, lhs: FilterExpression.Operation, rhs: FilterExpression.Operation)","dev.tesserakt.sparql.runtime.query.FilterExpression.MathOpEval.Sum.Sum"]},{"name":"constructor(context: QueryContext, mapping: Mapping)","description":"dev.tesserakt.sparql.runtime.evaluation.BindingsImpl.BindingsImpl","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-bindings-impl/-bindings-impl.html","searchKeys":["BindingsImpl","constructor(context: QueryContext, mapping: Mapping)","dev.tesserakt.sparql.runtime.evaluation.BindingsImpl.BindingsImpl"]},{"name":"constructor(context: QueryContext, name: String)","description":"dev.tesserakt.sparql.runtime.evaluation.BindingIdentifier.BindingIdentifier","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-binding-identifier/-binding-identifier.html","searchKeys":["BindingIdentifier","constructor(context: QueryContext, name: String)","dev.tesserakt.sparql.runtime.evaluation.BindingIdentifier.BindingIdentifier"]},{"name":"constructor(context: QueryContext, names: Iterable<String>)","description":"dev.tesserakt.sparql.runtime.evaluation.BindingIdentifierSet.BindingIdentifierSet","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-binding-identifier-set/-binding-identifier-set.html","searchKeys":["BindingIdentifierSet","constructor(context: QueryContext, names: Iterable<String>)","dev.tesserakt.sparql.runtime.evaluation.BindingIdentifierSet.BindingIdentifierSet"]},{"name":"constructor(context: QueryContext, pattern: TriplePatternSet, unions: List<Union>)","description":"dev.tesserakt.sparql.runtime.query.GroupPatternState.GroupPatternState","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-group-pattern-state/-group-pattern-state.html","searchKeys":["GroupPatternState","constructor(context: QueryContext, pattern: TriplePatternSet, unions: List<Union>)","dev.tesserakt.sparql.runtime.query.GroupPatternState.GroupPatternState"]},{"name":"constructor(context: QueryContext, s: TriplePattern.Subject, p: TriplePattern.Alts, o: TriplePattern.Object)","description":"dev.tesserakt.sparql.runtime.query.TriplePatternState.AltPatternState.AltPatternState","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-triple-pattern-state/-alt-pattern-state/-alt-pattern-state.html","searchKeys":["AltPatternState","constructor(context: QueryContext, s: TriplePattern.Subject, p: TriplePattern.Alts, o: TriplePattern.Object)","dev.tesserakt.sparql.runtime.query.TriplePatternState.AltPatternState.AltPatternState"]},{"name":"constructor(context: QueryContext, s: TriplePattern.Subject, p: TriplePattern.Sequence, o: TriplePattern.Object)","description":"dev.tesserakt.sparql.runtime.query.TriplePatternState.SequencePatternState.SequencePatternState","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-triple-pattern-state/-sequence-pattern-state/-sequence-pattern-state.html","searchKeys":["SequencePatternState","constructor(context: QueryContext, s: TriplePattern.Subject, p: TriplePattern.Sequence, o: TriplePattern.Object)","dev.tesserakt.sparql.runtime.query.TriplePatternState.SequencePatternState.SequencePatternState"]},{"name":"constructor(context: QueryContext, s: TriplePattern.Subject, p: TriplePattern.SimpleAlts, o: TriplePattern.Object)","description":"dev.tesserakt.sparql.runtime.query.TriplePatternState.SimpleAltPatternState.SimpleAltPatternState","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-triple-pattern-state/-simple-alt-pattern-state/-simple-alt-pattern-state.html","searchKeys":["SimpleAltPatternState","constructor(context: QueryContext, s: TriplePattern.Subject, p: TriplePattern.SimpleAlts, o: TriplePattern.Object)","dev.tesserakt.sparql.runtime.query.TriplePatternState.SimpleAltPatternState.SimpleAltPatternState"]},{"name":"constructor(context: QueryContext, source: Iterable<Pair<String, Quad.Term>>)","description":"dev.tesserakt.sparql.runtime.evaluation.Mapping.Mapping","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-mapping/-mapping.html","searchKeys":["Mapping","constructor(context: QueryContext, source: Iterable<Pair<String, Quad.Term>>)","dev.tesserakt.sparql.runtime.evaluation.Mapping.Mapping"]},{"name":"constructor(context: QueryContext, source: Map<String, Quad.Term>)","description":"dev.tesserakt.sparql.runtime.evaluation.Mapping.Mapping","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-mapping/-mapping.html","searchKeys":["Mapping","constructor(context: QueryContext, source: Map<String, Quad.Term>)","dev.tesserakt.sparql.runtime.evaluation.Mapping.Mapping"]},{"name":"constructor(context: QueryContext, start: TriplePattern.Binding, inner: TriplePattern.Predicate, end: TriplePattern.Binding)","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulBindings.OneOrMoreStatefulBindings","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateful-bindings/-one-or-more-stateful-bindings.html","searchKeys":["OneOrMoreStatefulBindings","constructor(context: QueryContext, start: TriplePattern.Binding, inner: TriplePattern.Predicate, end: TriplePattern.Binding)","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulBindings.OneOrMoreStatefulBindings"]},{"name":"constructor(context: QueryContext, start: TriplePattern.Binding, inner: TriplePattern.Predicate, end: TriplePattern.Binding)","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulBindings.ZeroOrMoreStatefulBindings","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateful-bindings/-zero-or-more-stateful-bindings.html","searchKeys":["ZeroOrMoreStatefulBindings","constructor(context: QueryContext, start: TriplePattern.Binding, inner: TriplePattern.Predicate, end: TriplePattern.Binding)","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulBindings.ZeroOrMoreStatefulBindings"]},{"name":"constructor(context: QueryContext, start: TriplePattern.Binding, inner: TriplePattern.Predicate, end: TriplePattern.Exact)","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulBindingExact.OneOrMoreStatefulBindingExact","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateful-binding-exact/-one-or-more-stateful-binding-exact.html","searchKeys":["OneOrMoreStatefulBindingExact","constructor(context: QueryContext, start: TriplePattern.Binding, inner: TriplePattern.Predicate, end: TriplePattern.Exact)","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulBindingExact.OneOrMoreStatefulBindingExact"]},{"name":"constructor(context: QueryContext, start: TriplePattern.Binding, inner: TriplePattern.Predicate, end: TriplePattern.Exact)","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulBindingExact.ZeroOrMoreStatefulBindingExact","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateful-binding-exact/-zero-or-more-stateful-binding-exact.html","searchKeys":["ZeroOrMoreStatefulBindingExact","constructor(context: QueryContext, start: TriplePattern.Binding, inner: TriplePattern.Predicate, end: TriplePattern.Exact)","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulBindingExact.ZeroOrMoreStatefulBindingExact"]},{"name":"constructor(context: QueryContext, start: TriplePattern.Binding, inner: TriplePattern.StatelessPredicate, end: TriplePattern.Binding)","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessBindings.OneOrMoreStatelessBindings","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateless-bindings/-one-or-more-stateless-bindings.html","searchKeys":["OneOrMoreStatelessBindings","constructor(context: QueryContext, start: TriplePattern.Binding, inner: TriplePattern.StatelessPredicate, end: TriplePattern.Binding)","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessBindings.OneOrMoreStatelessBindings"]},{"name":"constructor(context: QueryContext, start: TriplePattern.Binding, inner: TriplePattern.StatelessPredicate, end: TriplePattern.Binding)","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessBindings.ZeroOrMoreStatelessBindings","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateless-bindings/-zero-or-more-stateless-bindings.html","searchKeys":["ZeroOrMoreStatelessBindings","constructor(context: QueryContext, start: TriplePattern.Binding, inner: TriplePattern.StatelessPredicate, end: TriplePattern.Binding)","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessBindings.ZeroOrMoreStatelessBindings"]},{"name":"constructor(context: QueryContext, start: TriplePattern.Binding, inner: TriplePattern.StatelessPredicate, end: TriplePattern.Exact)","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessBindingExact.OneOrMoreStatelessBindingExact","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateless-binding-exact/-one-or-more-stateless-binding-exact.html","searchKeys":["OneOrMoreStatelessBindingExact","constructor(context: QueryContext, start: TriplePattern.Binding, inner: TriplePattern.StatelessPredicate, end: TriplePattern.Exact)","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessBindingExact.OneOrMoreStatelessBindingExact"]},{"name":"constructor(context: QueryContext, start: TriplePattern.Binding, inner: TriplePattern.StatelessPredicate, end: TriplePattern.Exact)","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessBindingExact.ZeroOrMoreStatelessBindingExact","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateless-binding-exact/-zero-or-more-stateless-binding-exact.html","searchKeys":["ZeroOrMoreStatelessBindingExact","constructor(context: QueryContext, start: TriplePattern.Binding, inner: TriplePattern.StatelessPredicate, end: TriplePattern.Exact)","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessBindingExact.ZeroOrMoreStatelessBindingExact"]},{"name":"constructor(context: QueryContext, start: TriplePattern.Exact, inner: TriplePattern.Predicate, end: TriplePattern.Binding)","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulExactBinding.OneOrMoreStatefulExactBinding","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateful-exact-binding/-one-or-more-stateful-exact-binding.html","searchKeys":["OneOrMoreStatefulExactBinding","constructor(context: QueryContext, start: TriplePattern.Exact, inner: TriplePattern.Predicate, end: TriplePattern.Binding)","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulExactBinding.OneOrMoreStatefulExactBinding"]},{"name":"constructor(context: QueryContext, start: TriplePattern.Exact, inner: TriplePattern.Predicate, end: TriplePattern.Binding)","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulExactBinding.ZeroOrMoreStatefulExactBinding","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateful-exact-binding/-zero-or-more-stateful-exact-binding.html","searchKeys":["ZeroOrMoreStatefulExactBinding","constructor(context: QueryContext, start: TriplePattern.Exact, inner: TriplePattern.Predicate, end: TriplePattern.Binding)","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulExactBinding.ZeroOrMoreStatefulExactBinding"]},{"name":"constructor(context: QueryContext, start: TriplePattern.Exact, inner: TriplePattern.Predicate, end: TriplePattern.Exact)","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulExact.OneOrMoreStatefulExact","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateful-exact/-one-or-more-stateful-exact.html","searchKeys":["OneOrMoreStatefulExact","constructor(context: QueryContext, start: TriplePattern.Exact, inner: TriplePattern.Predicate, end: TriplePattern.Exact)","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulExact.OneOrMoreStatefulExact"]},{"name":"constructor(context: QueryContext, start: TriplePattern.Exact, inner: TriplePattern.Predicate, end: TriplePattern.Exact)","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulExact.ZeroOrMoreStatefulExact","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateful-exact/-zero-or-more-stateful-exact.html","searchKeys":["ZeroOrMoreStatefulExact","constructor(context: QueryContext, start: TriplePattern.Exact, inner: TriplePattern.Predicate, end: TriplePattern.Exact)","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulExact.ZeroOrMoreStatefulExact"]},{"name":"constructor(context: QueryContext, start: TriplePattern.Exact, inner: TriplePattern.StatelessPredicate, end: TriplePattern.Binding)","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessExactBinding.OneOrMoreStatelessExactBinding","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateless-exact-binding/-one-or-more-stateless-exact-binding.html","searchKeys":["OneOrMoreStatelessExactBinding","constructor(context: QueryContext, start: TriplePattern.Exact, inner: TriplePattern.StatelessPredicate, end: TriplePattern.Binding)","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessExactBinding.OneOrMoreStatelessExactBinding"]},{"name":"constructor(context: QueryContext, start: TriplePattern.Exact, inner: TriplePattern.StatelessPredicate, end: TriplePattern.Binding)","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessExactBinding.ZeroOrMoreStatelessExactBinding","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateless-exact-binding/-zero-or-more-stateless-exact-binding.html","searchKeys":["ZeroOrMoreStatelessExactBinding","constructor(context: QueryContext, start: TriplePattern.Exact, inner: TriplePattern.StatelessPredicate, end: TriplePattern.Binding)","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessExactBinding.ZeroOrMoreStatelessExactBinding"]},{"name":"constructor(context: QueryContext, start: TriplePattern.Exact, inner: TriplePattern.StatelessPredicate, end: TriplePattern.Exact)","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessExact.OneOrMoreStatelessExact","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateless-exact/-one-or-more-stateless-exact.html","searchKeys":["OneOrMoreStatelessExact","constructor(context: QueryContext, start: TriplePattern.Exact, inner: TriplePattern.StatelessPredicate, end: TriplePattern.Exact)","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessExact.OneOrMoreStatelessExact"]},{"name":"constructor(context: QueryContext, start: TriplePattern.Exact, inner: TriplePattern.StatelessPredicate, end: TriplePattern.Exact)","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessExact.ZeroOrMoreStatelessExact","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateless-exact/-zero-or-more-stateless-exact.html","searchKeys":["ZeroOrMoreStatelessExact","constructor(context: QueryContext, start: TriplePattern.Exact, inner: TriplePattern.StatelessPredicate, end: TriplePattern.Exact)","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessExact.ZeroOrMoreStatelessExact"]},{"name":"constructor(context: QueryContext, subj: TriplePattern.Subject, pred: TriplePattern.Binding, obj: TriplePattern.Object)","description":"dev.tesserakt.sparql.runtime.query.TriplePatternState.BindingPatternState.BindingPatternState","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-triple-pattern-state/-binding-pattern-state/-binding-pattern-state.html","searchKeys":["BindingPatternState","constructor(context: QueryContext, subj: TriplePattern.Subject, pred: TriplePattern.Binding, obj: TriplePattern.Object)","dev.tesserakt.sparql.runtime.query.TriplePatternState.BindingPatternState.BindingPatternState"]},{"name":"constructor(context: QueryContext, subj: TriplePattern.Subject, pred: TriplePattern.Exact, obj: TriplePattern.Object)","description":"dev.tesserakt.sparql.runtime.query.TriplePatternState.ExactPatternState.ExactPatternState","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-triple-pattern-state/-exact-pattern-state/-exact-pattern-state.html","searchKeys":["ExactPatternState","constructor(context: QueryContext, subj: TriplePattern.Subject, pred: TriplePattern.Exact, obj: TriplePattern.Object)","dev.tesserakt.sparql.runtime.query.TriplePatternState.ExactPatternState.ExactPatternState"]},{"name":"constructor(context: QueryContext, subj: TriplePattern.Subject, pred: TriplePattern.Negated, obj: TriplePattern.Object)","description":"dev.tesserakt.sparql.runtime.query.TriplePatternState.NegatedPatternState.NegatedPatternState","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-triple-pattern-state/-negated-pattern-state/-negated-pattern-state.html","searchKeys":["NegatedPatternState","constructor(context: QueryContext, subj: TriplePattern.Subject, pred: TriplePattern.Negated, obj: TriplePattern.Object)","dev.tesserakt.sparql.runtime.query.TriplePatternState.NegatedPatternState.NegatedPatternState"]},{"name":"constructor(context: QueryContext, subj: TriplePattern.Subject, pred: TriplePattern.RepeatingPredicate, obj: TriplePattern.Object)","description":"dev.tesserakt.sparql.runtime.query.TriplePatternState.RepeatingPatternState.RepeatingPatternState","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-triple-pattern-state/-repeating-pattern-state/-repeating-pattern-state.html","searchKeys":["RepeatingPatternState","constructor(context: QueryContext, subj: TriplePattern.Subject, pred: TriplePattern.RepeatingPredicate, obj: TriplePattern.Object)","dev.tesserakt.sparql.runtime.query.TriplePatternState.RepeatingPatternState.RepeatingPatternState"]},{"name":"constructor(context: QueryContext, subj: TriplePattern.Subject, pred: TriplePattern.UnboundSequence, obj: TriplePattern.Object)","description":"dev.tesserakt.sparql.runtime.query.TriplePatternState.UnboundedSequencePatternState.UnboundedSequencePatternState","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-triple-pattern-state/-unbounded-sequence-pattern-state/-unbounded-sequence-pattern-state.html","searchKeys":["UnboundedSequencePatternState","constructor(context: QueryContext, subj: TriplePattern.Subject, pred: TriplePattern.UnboundSequence, obj: TriplePattern.Object)","dev.tesserakt.sparql.runtime.query.TriplePatternState.UnboundedSequencePatternState.UnboundedSequencePatternState"]},{"name":"constructor(context: QueryContext, union: Union)","description":"dev.tesserakt.sparql.runtime.query.UnionState.UnionState","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-union-state/-union-state.html","searchKeys":["UnionState","constructor(context: QueryContext, union: Union)","dev.tesserakt.sparql.runtime.query.UnionState.UnionState"]},{"name":"constructor(data: List<E>)","description":"dev.tesserakt.sparql.runtime.stream.CollectedStream.CollectedStream","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-collected-stream/-collected-stream.html","searchKeys":["CollectedStream","constructor(data: List<E>)","dev.tesserakt.sparql.runtime.stream.CollectedStream.CollectedStream"]},{"name":"constructor(element: E)","description":"dev.tesserakt.sparql.runtime.stream.SingleStream.SingleStream","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-single-stream/-single-stream.html","searchKeys":["SingleStream","constructor(element: E)","dev.tesserakt.sparql.runtime.stream.SingleStream.SingleStream"]},{"name":"constructor(elements: Iterable<T>)","description":"dev.tesserakt.sparql.util.Counter.Counter","location":"sparql/runtime/dev.tesserakt.sparql.util/-counter/-counter.html","searchKeys":["Counter","constructor(elements: Iterable<T>)","dev.tesserakt.sparql.util.Counter.Counter"]},{"name":"constructor(filter: MutableFilterState)","description":"dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateful.SingleFilter.SingleFilter","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-graph-pattern-filter-state/-stateful/-single-filter/-single-filter.html","searchKeys":["SingleFilter","constructor(filter: MutableFilterState)","dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateful.SingleFilter.SingleFilter"]},{"name":"constructor(filter: StatelessFilter)","description":"dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateless.SingleFilter.SingleFilter","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-graph-pattern-filter-state/-stateless/-single-filter/-single-filter.html","searchKeys":["SingleFilter","constructor(filter: StatelessFilter)","dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateless.SingleFilter.SingleFilter"]},{"name":"constructor(filters: CollectedStream<MutableFilterState>)","description":"dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateful.MultiFilter.MultiFilter","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-graph-pattern-filter-state/-stateful/-multi-filter/-multi-filter.html","searchKeys":["MultiFilter","constructor(filters: CollectedStream<MutableFilterState>)","dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateful.MultiFilter.MultiFilter"]},{"name":"constructor(filters: CollectedStream<StatelessFilter>)","description":"dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateless.MultiFilter.MultiFilter","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-graph-pattern-filter-state/-stateless/-multi-filter/-multi-filter.html","searchKeys":["MultiFilter","constructor(filters: CollectedStream<StatelessFilter>)","dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateless.MultiFilter.MultiFilter"]},{"name":"constructor(id: Int)","description":"dev.tesserakt.sparql.runtime.evaluation.BindingIdentifier.BindingIdentifier","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-binding-identifier/-binding-identifier.html","searchKeys":["BindingIdentifier","constructor(id: Int)","dev.tesserakt.sparql.runtime.evaluation.BindingIdentifier.BindingIdentifier"]},{"name":"constructor(id: Int)","description":"dev.tesserakt.sparql.runtime.evaluation.TermIdentifier.TermIdentifier","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-term-identifier/-term-identifier.html","searchKeys":["TermIdentifier","constructor(id: Int)","dev.tesserakt.sparql.runtime.evaluation.TermIdentifier.TermIdentifier"]},{"name":"constructor(ids: IntArray)","description":"dev.tesserakt.sparql.runtime.evaluation.BindingIdentifierSet.BindingIdentifierSet","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-binding-identifier-set/-binding-identifier-set.html","searchKeys":["BindingIdentifierSet","constructor(ids: IntArray)","dev.tesserakt.sparql.runtime.evaluation.BindingIdentifierSet.BindingIdentifierSet"]},{"name":"constructor(input: Stream<E>)","description":"dev.tesserakt.sparql.runtime.stream.OptimisedStreamView.OptimisedStreamView","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-optimised-stream-view/-optimised-stream-view.html","searchKeys":["OptimisedStreamView","constructor(input: Stream<E>)","dev.tesserakt.sparql.runtime.stream.OptimisedStreamView.OptimisedStreamView"]},{"name":"constructor(iterator: IntIterator)","description":"dev.tesserakt.sparql.runtime.evaluation.BindingIdentifierSet.IdIterator.IdIterator","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-binding-identifier-set/-id-iterator/-id-iterator.html","searchKeys":["IdIterator","constructor(iterator: IntIterator)","dev.tesserakt.sparql.runtime.evaluation.BindingIdentifierSet.IdIterator.IdIterator"]},{"name":"constructor(iterator: Iterator<I>)","description":"dev.tesserakt.sparql.runtime.stream.StreamWithIndex.Iter.Iter","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-with-index/-iter/-iter.html","searchKeys":["Iter","constructor(iterator: Iterator<I>)","dev.tesserakt.sparql.runtime.stream.StreamWithIndex.Iter.Iter"]},{"name":"constructor(left: Mapping, right: Stream<Mapping>)","description":"dev.tesserakt.sparql.runtime.stream.StreamSingleJoin.StreamSingleJoin","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-single-join/-stream-single-join.html","searchKeys":["StreamSingleJoin","constructor(left: Mapping, right: Stream<Mapping>)","dev.tesserakt.sparql.runtime.stream.StreamSingleJoin.StreamSingleJoin"]},{"name":"constructor(left: Stream<A>, right: OptimisedStream<B>)","description":"dev.tesserakt.sparql.runtime.stream.StreamProduct.StreamProduct","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-product/-stream-product.html","searchKeys":["StreamProduct","constructor(left: Stream<A>, right: OptimisedStream<B>)","dev.tesserakt.sparql.runtime.stream.StreamProduct.StreamProduct"]},{"name":"constructor(left: Stream<Mapping>, right: OptimisedStream<Mapping>)","description":"dev.tesserakt.sparql.runtime.stream.StreamMultiJoin.StreamMultiJoin","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-multi-join/-stream-multi-join.html","searchKeys":["StreamMultiJoin","constructor(left: Stream<Mapping>, right: OptimisedStream<Mapping>)","dev.tesserakt.sparql.runtime.stream.StreamMultiJoin.StreamMultiJoin"]},{"name":"constructor(mapping: Mapping)","description":"dev.tesserakt.sparql.runtime.query.FilterExpression.OperationValue.SingleMapping.SingleMapping","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-filter-expression/-operation-value/-single-mapping/-single-mapping.html","searchKeys":["SingleMapping","constructor(mapping: Mapping)","dev.tesserakt.sparql.runtime.query.FilterExpression.OperationValue.SingleMapping.SingleMapping"]},{"name":"constructor(mappings: ArrayList<Mapping> = ArrayList())","description":"dev.tesserakt.sparql.runtime.collection.SimpleMappingArray.SimpleMappingArray","location":"sparql/runtime/dev.tesserakt.sparql.runtime.collection/-simple-mapping-array/-simple-mapping-array.html","searchKeys":["SimpleMappingArray","constructor(mappings: ArrayList<Mapping> = ArrayList())","dev.tesserakt.sparql.runtime.collection.SimpleMappingArray.SimpleMappingArray"]},{"name":"constructor(mappings: Collection<Mapping>)","description":"dev.tesserakt.sparql.runtime.collection.SimpleMappingArray.SimpleMappingArray","location":"sparql/runtime/dev.tesserakt.sparql.runtime.collection/-simple-mapping-array/-simple-mapping-array.html","searchKeys":["SimpleMappingArray","constructor(mappings: Collection<Mapping>)","dev.tesserakt.sparql.runtime.collection.SimpleMappingArray.SimpleMappingArray"]},{"name":"constructor(parent: Stream<I>)","description":"dev.tesserakt.sparql.runtime.stream.StreamWithIndex.StreamWithIndex","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-with-index/-stream-with-index.html","searchKeys":["StreamWithIndex","constructor(parent: Stream<I>)","dev.tesserakt.sparql.runtime.stream.StreamWithIndex.StreamWithIndex"]},{"name":"constructor(source1: Stream<E>, source2: Stream<E>)","description":"dev.tesserakt.sparql.runtime.stream.StreamChain.StreamChain","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-chain/-stream-chain.html","searchKeys":["StreamChain","constructor(source1: Stream<E>, source2: Stream<E>)","dev.tesserakt.sparql.runtime.stream.StreamChain.StreamChain"]},{"name":"constructor(source: OptimisedStream<I>, transform: (I) -> Stream<O>, cardinality: Cardinality)","description":"dev.tesserakt.sparql.runtime.stream.StreamTransform.StreamTransform","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-transform/-stream-transform.html","searchKeys":["StreamTransform","constructor(source: OptimisedStream<I>, transform: (I) -> Stream<O>, cardinality: Cardinality)","dev.tesserakt.sparql.runtime.stream.StreamTransform.StreamTransform"]},{"name":"constructor(source: OptimisedStream<I>, transform: (I) -> Stream<O>?, cardinality: Cardinality)","description":"dev.tesserakt.sparql.runtime.stream.StreamTransformNullable.StreamTransformNullable","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-transform-nullable/-stream-transform-nullable.html","searchKeys":["StreamTransformNullable","constructor(source: OptimisedStream<I>, transform: (I) -> Stream<O>?, cardinality: Cardinality)","dev.tesserakt.sparql.runtime.stream.StreamTransformNullable.StreamTransformNullable"]},{"name":"constructor(source: Stream<E>)","description":"dev.tesserakt.sparql.runtime.stream.BufferedStream.BufferedStream","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-buffered-stream/-buffered-stream.html","searchKeys":["BufferedStream","constructor(source: Stream<E>)","dev.tesserakt.sparql.runtime.stream.BufferedStream.BufferedStream"]},{"name":"constructor(source: Stream<E>, cardinality: Cardinality)","description":"dev.tesserakt.sparql.runtime.stream.SingleUseStreamView.SingleUseStreamView","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-single-use-stream-view/-single-use-stream-view.html","searchKeys":["SingleUseStreamView","constructor(source: Stream<E>, cardinality: Cardinality)","dev.tesserakt.sparql.runtime.stream.SingleUseStreamView.SingleUseStreamView"]},{"name":"constructor(source: Stream<E>, removed: Iterable<E>)","description":"dev.tesserakt.sparql.runtime.stream.StreamReduction.StreamReduction","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-reduction/-stream-reduction.html","searchKeys":["StreamReduction","constructor(source: Stream<E>, removed: Iterable<E>)","dev.tesserakt.sparql.runtime.stream.StreamReduction.StreamReduction"]},{"name":"constructor(source: Stream<I>, predicate: (I) -> Boolean)","description":"dev.tesserakt.sparql.runtime.stream.StreamFilter.StreamFilter","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-filter/-stream-filter.html","searchKeys":["StreamFilter","constructor(source: Stream<I>, predicate: (I) -> Boolean)","dev.tesserakt.sparql.runtime.stream.StreamFilter.StreamFilter"]},{"name":"constructor(source: Stream<I>, transform: (I) -> O)","description":"dev.tesserakt.sparql.runtime.stream.StreamMapping.StreamMapping","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-mapping/-stream-mapping.html","searchKeys":["StreamMapping","constructor(source: Stream<I>, transform: (I) -> O)","dev.tesserakt.sparql.runtime.stream.StreamMapping.StreamMapping"]},{"name":"constructor(source: Stream<I>, transform: (I) -> O?)","description":"dev.tesserakt.sparql.runtime.stream.StreamMappingNullable.StreamMappingNullable","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-mapping-nullable/-stream-mapping-nullable.html","searchKeys":["StreamMappingNullable","constructor(source: Stream<I>, transform: (I) -> O?)","dev.tesserakt.sparql.runtime.stream.StreamMappingNullable.StreamMappingNullable"]},{"name":"constructor(start: Quad.Term, end: Quad.Term)","description":"dev.tesserakt.sparql.util.SegmentsList.Segment.Segment","location":"sparql/runtime/dev.tesserakt.sparql.util/-segments-list/-segment/-segment.html","searchKeys":["Segment","constructor(start: Quad.Term, end: Quad.Term)","dev.tesserakt.sparql.util.SegmentsList.Segment.Segment"]},{"name":"constructor(state: BasicGraphPatternState)","description":"dev.tesserakt.sparql.runtime.query.ExclusionFilterState.Broad.Broad","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-exclusion-filter-state/-broad/-broad.html","searchKeys":["Broad","constructor(state: BasicGraphPatternState)","dev.tesserakt.sparql.runtime.query.ExclusionFilterState.Broad.Broad"]},{"name":"constructor(state: BasicGraphPatternState)","description":"dev.tesserakt.sparql.runtime.query.InclusionFilterState.Broad.Broad","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-inclusion-filter-state/-broad/-broad.html","searchKeys":["Broad","constructor(state: BasicGraphPatternState)","dev.tesserakt.sparql.runtime.query.InclusionFilterState.Broad.Broad"]},{"name":"constructor(state: J)","description":"dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node.Leaf.Leaf","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/-dynamic/-node/-leaf/-leaf.html","searchKeys":["Leaf","constructor(state: J)","dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node.Leaf.Leaf"]},{"name":"constructor(stateful: GraphPatternFilterState.Stateful, stateless: GraphPatternFilterState.Stateless)","description":"dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.GraphPatternFilterState","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-graph-pattern-filter-state/-graph-pattern-filter-state.html","searchKeys":["GraphPatternFilterState","constructor(stateful: GraphPatternFilterState.Stateful, stateless: GraphPatternFilterState.Stateless)","dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.GraphPatternFilterState"]},{"name":"constructor(states: List<J>)","description":"dev.tesserakt.sparql.runtime.query.JoinTree.None.None","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/-none/-none.html","searchKeys":["None","constructor(states: List<J>)","dev.tesserakt.sparql.runtime.query.JoinTree.None.None"]},{"name":"constructor(term: Quad.Term)","description":"dev.tesserakt.sparql.runtime.query.FilterExpression.OperationValue.SingleValue.SingleValue","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-filter-expression/-operation-value/-single-value/-single-value.html","searchKeys":["SingleValue","constructor(term: Quad.Term)","dev.tesserakt.sparql.runtime.query.FilterExpression.OperationValue.SingleValue.SingleValue"]},{"name":"constructor(term: TermIdentifier)","description":"dev.tesserakt.sparql.runtime.query.FilterExpression.OperationValue.SingleValueIdentifier.SingleValueIdentifier","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-filter-expression/-operation-value/-single-value-identifier/-single-value-identifier.html","searchKeys":["SingleValueIdentifier","constructor(term: TermIdentifier)","dev.tesserakt.sparql.runtime.query.FilterExpression.OperationValue.SingleValueIdentifier.SingleValueIdentifier"]},{"name":"constructor(value: Double)","description":"dev.tesserakt.sparql.util.Cardinality.Cardinality","location":"sparql/runtime/dev.tesserakt.sparql.util/-cardinality/-cardinality.html","searchKeys":["Cardinality","constructor(value: Double)","dev.tesserakt.sparql.util.Cardinality.Cardinality"]},{"name":"constructor(value: Mapping, origin: DataDelta?)","description":"dev.tesserakt.sparql.runtime.evaluation.MappingAddition.MappingAddition","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-mapping-addition/-mapping-addition.html","searchKeys":["MappingAddition","constructor(value: Mapping, origin: DataDelta?)","dev.tesserakt.sparql.runtime.evaluation.MappingAddition.MappingAddition"]},{"name":"constructor(value: Mapping, origin: DataDelta?)","description":"dev.tesserakt.sparql.runtime.evaluation.MappingDeletion.MappingDeletion","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-mapping-deletion/-mapping-deletion.html","searchKeys":["MappingDeletion","constructor(value: Mapping, origin: DataDelta?)","dev.tesserakt.sparql.runtime.evaluation.MappingDeletion.MappingDeletion"]},{"name":"constructor(value: Number)","description":"dev.tesserakt.sparql.util.Cardinality.Cardinality","location":"sparql/runtime/dev.tesserakt.sparql.util/-cardinality/-cardinality.html","searchKeys":["Cardinality","constructor(value: Number)","dev.tesserakt.sparql.util.Cardinality.Cardinality"]},{"name":"constructor(value: Quad)","description":"dev.tesserakt.sparql.runtime.evaluation.DataAddition.DataAddition","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-data-addition/-data-addition.html","searchKeys":["DataAddition","constructor(value: Quad)","dev.tesserakt.sparql.runtime.evaluation.DataAddition.DataAddition"]},{"name":"constructor(value: Quad)","description":"dev.tesserakt.sparql.runtime.evaluation.DataDeletion.DataDeletion","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-data-deletion/-data-deletion.html","searchKeys":["DataDeletion","constructor(value: Quad)","dev.tesserakt.sparql.runtime.evaluation.DataDeletion.DataDeletion"]},{"name":"constructor(value: T)","description":"dev.tesserakt.sparql.runtime.query.QueryState.ResultChange.New.New","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-query-state/-result-change/-new/-new.html","searchKeys":["New","constructor(value: T)","dev.tesserakt.sparql.runtime.query.QueryState.ResultChange.New.New"]},{"name":"constructor(value: T)","description":"dev.tesserakt.sparql.runtime.query.QueryState.ResultChange.Removed.Removed","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-query-state/-result-change/-removed/-removed.html","searchKeys":["Removed","constructor(value: T)","dev.tesserakt.sparql.runtime.query.QueryState.ResultChange.Removed.Removed"]},{"name":"data class GraphPatternFilterState(stateful: GraphPatternFilterState.Stateful, stateless: GraphPatternFilterState.Stateless)","description":"dev.tesserakt.sparql.runtime.query.GraphPatternFilterState","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-graph-pattern-filter-state/index.html","searchKeys":["GraphPatternFilterState","data class GraphPatternFilterState(stateful: GraphPatternFilterState.Stateful, stateless: GraphPatternFilterState.Stateless)","dev.tesserakt.sparql.runtime.query.GraphPatternFilterState"]},{"name":"data class MappingAddition(val value: Mapping, val origin: DataDelta?) : AdditionDelta, MappingDelta","description":"dev.tesserakt.sparql.runtime.evaluation.MappingAddition","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-mapping-addition/index.html","searchKeys":["MappingAddition","data class MappingAddition(val value: Mapping, val origin: DataDelta?) : AdditionDelta, MappingDelta","dev.tesserakt.sparql.runtime.evaluation.MappingAddition"]},{"name":"data class MappingDeletion(val value: Mapping, val origin: DataDelta?) : DeletionDelta, MappingDelta","description":"dev.tesserakt.sparql.runtime.evaluation.MappingDeletion","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-mapping-deletion/index.html","searchKeys":["MappingDeletion","data class MappingDeletion(val value: Mapping, val origin: DataDelta?) : DeletionDelta, MappingDelta","dev.tesserakt.sparql.runtime.evaluation.MappingDeletion"]},{"name":"data class Segment(val start: Quad.Term, val end: Quad.Term)","description":"dev.tesserakt.sparql.util.SegmentsList.Segment","location":"sparql/runtime/dev.tesserakt.sparql.util/-segments-list/-segment/index.html","searchKeys":["Segment","data class Segment(val start: Quad.Term, val end: Quad.Term)","dev.tesserakt.sparql.util.SegmentsList.Segment"]},{"name":"data object Empty : JoinTree","description":"dev.tesserakt.sparql.runtime.query.JoinTree.Empty","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/-empty/index.html","searchKeys":["Empty","data object Empty : JoinTree","dev.tesserakt.sparql.runtime.query.JoinTree.Empty"]},{"name":"data object Unfiltered : GraphPatternFilterState.Stateful","description":"dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateful.Unfiltered","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-graph-pattern-filter-state/-stateful/-unfiltered/index.html","searchKeys":["Unfiltered","data object Unfiltered : GraphPatternFilterState.Stateful","dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateful.Unfiltered"]},{"name":"data object Unfiltered : GraphPatternFilterState.Stateless","description":"dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateless.Unfiltered","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-graph-pattern-filter-state/-stateless/-unfiltered/index.html","searchKeys":["Unfiltered","data object Unfiltered : GraphPatternFilterState.Stateless","dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateless.Unfiltered"]},{"name":"fun <E : Any> Iterable<Stream<E>>.merge(): Stream<E>","description":"dev.tesserakt.sparql.runtime.stream.merge","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/merge.html","searchKeys":["merge","fun <E : Any> Iterable<Stream<E>>.merge(): Stream<E>","dev.tesserakt.sparql.runtime.stream.merge"]},{"name":"fun <E : Any> OptimisedStream<E>.chain(other: OptimisedStream<E>): OptimisedStream<E>","description":"dev.tesserakt.sparql.runtime.stream.chain","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/chain.html","searchKeys":["chain","fun <E : Any> OptimisedStream<E>.chain(other: OptimisedStream<E>): OptimisedStream<E>","dev.tesserakt.sparql.runtime.stream.chain"]},{"name":"fun <E : Any> OptimisedStream<E>.product(other: OptimisedStream<E>): OptimisedStream<Pair<E, E>>","description":"dev.tesserakt.sparql.runtime.stream.product","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/product.html","searchKeys":["product","fun <E : Any> OptimisedStream<E>.product(other: OptimisedStream<E>): OptimisedStream<Pair<E, E>>","dev.tesserakt.sparql.runtime.stream.product"]},{"name":"fun <E : Any> OptimisedStream<E>.product(other: Stream<E>): Stream<Pair<E, E>>","description":"dev.tesserakt.sparql.runtime.stream.product","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/product.html","searchKeys":["product","fun <E : Any> OptimisedStream<E>.product(other: Stream<E>): Stream<Pair<E, E>>","dev.tesserakt.sparql.runtime.stream.product"]},{"name":"fun <E : Any> Stream<E>.chain(other: Stream<E>): Stream<E>","description":"dev.tesserakt.sparql.runtime.stream.chain","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/chain.html","searchKeys":["chain","fun <E : Any> Stream<E>.chain(other: Stream<E>): Stream<E>","dev.tesserakt.sparql.runtime.stream.chain"]},{"name":"fun <E : Any> Stream<E>.hasZeroCardinality(): Boolean","description":"dev.tesserakt.sparql.runtime.stream.hasZeroCardinality","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/has-zero-cardinality.html","searchKeys":["hasZeroCardinality","fun <E : Any> Stream<E>.hasZeroCardinality(): Boolean","dev.tesserakt.sparql.runtime.stream.hasZeroCardinality"]},{"name":"fun <E : Any> Stream<E>.optimisedForReuse(): OptimisedStream<E>","description":"dev.tesserakt.sparql.runtime.stream.optimisedForReuse","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/optimised-for-reuse.html","searchKeys":["optimisedForReuse","fun <E : Any> Stream<E>.optimisedForReuse(): OptimisedStream<E>","dev.tesserakt.sparql.runtime.stream.optimisedForReuse"]},{"name":"fun <E : Any> Stream<E>.product(other: OptimisedStream<E>): Stream<Pair<E, E>>","description":"dev.tesserakt.sparql.runtime.stream.product","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/product.html","searchKeys":["product","fun <E : Any> Stream<E>.product(other: OptimisedStream<E>): Stream<Pair<E, E>>","dev.tesserakt.sparql.runtime.stream.product"]},{"name":"fun <E : Any> Stream<E>.remove(elements: Iterable<E>): Stream<E>","description":"dev.tesserakt.sparql.runtime.stream.remove","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/remove.html","searchKeys":["remove","fun <E : Any> Stream<E>.remove(elements: Iterable<E>): Stream<E>","dev.tesserakt.sparql.runtime.stream.remove"]},{"name":"fun GraphPattern.getAllNamedBindings(): Set<TriplePattern.NamedBinding>","description":"dev.tesserakt.sparql.util.getAllNamedBindings","location":"sparql/runtime/dev.tesserakt.sparql.util/get-all-named-bindings.html","searchKeys":["getAllNamedBindings","fun GraphPattern.getAllNamedBindings(): Set<TriplePattern.NamedBinding>","dev.tesserakt.sparql.util.getAllNamedBindings"]},{"name":"fun Mapping.join(other: Stream<Mapping>): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.stream.join","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/join.html","searchKeys":["join","fun Mapping.join(other: Stream<Mapping>): Stream<Mapping>","dev.tesserakt.sparql.runtime.stream.join"]},{"name":"fun MappingArray(context: QueryContext, bindings: Collection<String>): MappingArray","description":"dev.tesserakt.sparql.runtime.collection.MappingArray","location":"sparql/runtime/dev.tesserakt.sparql.runtime.collection/-mapping-array.html","searchKeys":["MappingArray","fun MappingArray(context: QueryContext, bindings: Collection<String>): MappingArray","dev.tesserakt.sparql.runtime.collection.MappingArray"]},{"name":"fun MappingArray(context: QueryContext, vararg bindings: String?): MappingArray","description":"dev.tesserakt.sparql.runtime.collection.MappingArray","location":"sparql/runtime/dev.tesserakt.sparql.runtime.collection/-mapping-array.html","searchKeys":["MappingArray","fun MappingArray(context: QueryContext, vararg bindings: String?): MappingArray","dev.tesserakt.sparql.runtime.collection.MappingArray"]},{"name":"fun MappingArray.join(other: Mapping): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.stream.join","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/join.html","searchKeys":["join","fun MappingArray.join(other: Mapping): Stream<Mapping>","dev.tesserakt.sparql.runtime.stream.join"]},{"name":"fun MappingArray.join(other: OptimisedStream<Mapping>): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.stream.join","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/join.html","searchKeys":["join","fun MappingArray.join(other: OptimisedStream<Mapping>): Stream<Mapping>","dev.tesserakt.sparql.runtime.stream.join"]},{"name":"fun MappingDelta.into(context: QueryContext): QueryState.ResultChange<BindingsImpl>","description":"dev.tesserakt.sparql.runtime.query.QueryState.ResultChange.Companion.into","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-query-state/-result-change/-companion/into.html","searchKeys":["into","fun MappingDelta.into(context: QueryContext): QueryState.ResultChange<BindingsImpl>","dev.tesserakt.sparql.runtime.query.QueryState.ResultChange.Companion.into"]},{"name":"fun MutableJoinState.join(other: OptimisedStream<MappingDelta>): Stream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.stream.join","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/join.html","searchKeys":["join","fun MutableJoinState.join(other: OptimisedStream<MappingDelta>): Stream<MappingDelta>","dev.tesserakt.sparql.runtime.stream.join"]},{"name":"fun OptimisedStream<Mapping>.join(other: OptimisedStream<Mapping>): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.stream.join","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/join.html","searchKeys":["join","fun OptimisedStream<Mapping>.join(other: OptimisedStream<Mapping>): Stream<Mapping>","dev.tesserakt.sparql.runtime.stream.join"]},{"name":"fun OptimisedStream<Mapping>.join(other: Stream<Mapping>): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.stream.join","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/join.html","searchKeys":["join","fun OptimisedStream<Mapping>.join(other: Stream<Mapping>): Stream<Mapping>","dev.tesserakt.sparql.runtime.stream.join"]},{"name":"fun QueryContext.get(binding: BindingIdentifier): String","description":"dev.tesserakt.sparql.runtime.evaluation.BindingIdentifier.Companion.get","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-binding-identifier/-companion/get.html","searchKeys":["get","fun QueryContext.get(binding: BindingIdentifier): String","dev.tesserakt.sparql.runtime.evaluation.BindingIdentifier.Companion.get"]},{"name":"fun QueryContext.get(term: TermIdentifier): Quad.Term","description":"dev.tesserakt.sparql.runtime.evaluation.TermIdentifier.Companion.get","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-term-identifier/-companion/get.html","searchKeys":["get","fun QueryContext.get(term: TermIdentifier): Quad.Term","dev.tesserakt.sparql.runtime.evaluation.TermIdentifier.Companion.get"]},{"name":"fun QueryStructure.createState(): QueryState<*, *>","description":"dev.tesserakt.sparql.runtime.createState","location":"sparql/runtime/dev.tesserakt.sparql.runtime/create-state.html","searchKeys":["createState","fun QueryStructure.createState(): QueryState<*, *>","dev.tesserakt.sparql.runtime.createState"]},{"name":"fun Stream<Mapping>.join(other: Mapping): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.stream.join","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/join.html","searchKeys":["join","fun Stream<Mapping>.join(other: Mapping): Stream<Mapping>","dev.tesserakt.sparql.runtime.stream.join"]},{"name":"fun Stream<Mapping>.join(other: OptimisedStream<Mapping>): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.stream.join","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/join.html","searchKeys":["join","fun Stream<Mapping>.join(other: OptimisedStream<Mapping>): Stream<Mapping>","dev.tesserakt.sparql.runtime.stream.join"]},{"name":"fun TriplePattern.Object.asSubject(): TriplePattern.Subject","description":"dev.tesserakt.sparql.runtime.query.asSubject","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/as-subject.html","searchKeys":["asSubject","fun TriplePattern.Object.asSubject(): TriplePattern.Subject","dev.tesserakt.sparql.runtime.query.asSubject"]},{"name":"fun TriplePattern.getAllNamedBindings(): Set<TriplePattern.NamedBinding>","description":"dev.tesserakt.sparql.util.getAllNamedBindings","location":"sparql/runtime/dev.tesserakt.sparql.util/get-all-named-bindings.html","searchKeys":["getAllNamedBindings","fun TriplePattern.getAllNamedBindings(): Set<TriplePattern.NamedBinding>","dev.tesserakt.sparql.util.getAllNamedBindings"]},{"name":"fun TriplePatternSet.getAllNamedBindings(): Set<TriplePattern.NamedBinding>","description":"dev.tesserakt.sparql.util.getAllNamedBindings","location":"sparql/runtime/dev.tesserakt.sparql.util/get-all-named-bindings.html","searchKeys":["getAllNamedBindings","fun TriplePatternSet.getAllNamedBindings(): Set<TriplePattern.NamedBinding>","dev.tesserakt.sparql.util.getAllNamedBindings"]},{"name":"fun append(extra: String)","description":"dev.tesserakt.sparql.runtime.RuntimeStatistics.append","location":"sparql/runtime/dev.tesserakt.sparql.runtime/-runtime-statistics/append.html","searchKeys":["append","fun append(extra: String)","dev.tesserakt.sparql.runtime.RuntimeStatistics.append"]},{"name":"fun apply(body: GraphPattern): GraphPattern","description":"dev.tesserakt.sparql.runtime.compat.Compat.apply","location":"sparql/runtime/dev.tesserakt.sparql.runtime.compat/-compat/apply.html","searchKeys":["apply","fun apply(body: GraphPattern): GraphPattern","dev.tesserakt.sparql.runtime.compat.Compat.apply"]},{"name":"fun apply(body: GraphPattern): GraphPattern","description":"dev.tesserakt.sparql.runtime.compat.InnerFilterScopeCompat.apply","location":"sparql/runtime/dev.tesserakt.sparql.runtime.compat/-inner-filter-scope-compat/apply.html","searchKeys":["apply","fun apply(body: GraphPattern): GraphPattern","dev.tesserakt.sparql.runtime.compat.InnerFilterScopeCompat.apply"]},{"name":"fun asIdIterable(): Iterable<BindingIdentifier>","description":"dev.tesserakt.sparql.runtime.evaluation.BindingIdentifierSet.asIdIterable","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-binding-identifier-set/as-id-iterable.html","searchKeys":["asIdIterable","fun asIdIterable(): Iterable<BindingIdentifier>","dev.tesserakt.sparql.runtime.evaluation.BindingIdentifierSet.asIdIterable"]},{"name":"fun asIntIterable(): Iterable<Int>","description":"dev.tesserakt.sparql.runtime.evaluation.BindingIdentifierSet.asIntIterable","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-binding-identifier-set/as-int-iterable.html","searchKeys":["asIntIterable","fun asIntIterable(): Iterable<Int>","dev.tesserakt.sparql.runtime.evaluation.BindingIdentifierSet.asIntIterable"]},{"name":"fun asIterable(): Iterable<Pair<BindingIdentifier, TermIdentifier>>","description":"dev.tesserakt.sparql.runtime.evaluation.Mapping.asIterable","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-mapping/as-iterable.html","searchKeys":["asIterable","fun asIterable(): Iterable<Pair<BindingIdentifier, TermIdentifier>>","dev.tesserakt.sparql.runtime.evaluation.Mapping.asIterable"]},{"name":"fun asIterable(context: QueryContext): Iterable<Pair<String, Quad.Term>>","description":"dev.tesserakt.sparql.runtime.evaluation.Mapping.asIterable","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-mapping/as-iterable.html","searchKeys":["asIterable","fun asIterable(context: QueryContext): Iterable<Pair<String, Quad.Term>>","dev.tesserakt.sparql.runtime.evaluation.Mapping.asIterable"]},{"name":"fun clear(value: T)","description":"dev.tesserakt.sparql.util.Counter.clear","location":"sparql/runtime/dev.tesserakt.sparql.util/-counter/clear.html","searchKeys":["clear","fun clear(value: T)","dev.tesserakt.sparql.util.Counter.clear"]},{"name":"fun clone(): Counter<T>","description":"dev.tesserakt.sparql.util.Counter.clone","location":"sparql/runtime/dev.tesserakt.sparql.util/-counter/clone.html","searchKeys":["clone","fun clone(): Counter<T>","dev.tesserakt.sparql.util.Counter.clone"]},{"name":"fun compatibleWith(other: Mapping): Boolean","description":"dev.tesserakt.sparql.runtime.evaluation.Mapping.compatibleWith","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-mapping/compatible-with.html","searchKeys":["compatibleWith","fun compatibleWith(other: Mapping): Boolean","dev.tesserakt.sparql.runtime.evaluation.Mapping.compatibleWith"]},{"name":"fun count(): Int","description":"dev.tesserakt.sparql.util.Bitmask.count","location":"sparql/runtime/dev.tesserakt.sparql.util/-bitmask/count.html","searchKeys":["count","fun count(): Int","dev.tesserakt.sparql.util.Bitmask.count"]},{"name":"fun debugInformation(): String","description":"dev.tesserakt.sparql.runtime.query.BasicGraphPatternState.debugInformation","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-basic-graph-pattern-state/debug-information.html","searchKeys":["debugInformation","fun debugInformation(): String","dev.tesserakt.sparql.runtime.query.BasicGraphPatternState.debugInformation"]},{"name":"fun debugInformation(): String","description":"dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.debugInformation","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-graph-pattern-filter-state/debug-information.html","searchKeys":["debugInformation","fun debugInformation(): String","dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.debugInformation"]},{"name":"fun debugInformation(): String","description":"dev.tesserakt.sparql.runtime.query.GroupPatternState.debugInformation","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-group-pattern-state/debug-information.html","searchKeys":["debugInformation","fun debugInformation(): String","dev.tesserakt.sparql.runtime.query.GroupPatternState.debugInformation"]},{"name":"fun debugInformation(): String","description":"dev.tesserakt.sparql.runtime.query.QueryState.Processor.debugInformation","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-query-state/-processor/debug-information.html","searchKeys":["debugInformation","fun debugInformation(): String","dev.tesserakt.sparql.runtime.query.QueryState.Processor.debugInformation"]},{"name":"fun decrement(changes: Map<T, Int>)","description":"dev.tesserakt.sparql.util.Counter.decrement","location":"sparql/runtime/dev.tesserakt.sparql.util/-counter/decrement.html","searchKeys":["decrement","fun decrement(changes: Map<T, Int>)","dev.tesserakt.sparql.util.Counter.decrement"]},{"name":"fun decrement(value: T, count: Int = 1)","description":"dev.tesserakt.sparql.util.Counter.decrement","location":"sparql/runtime/dev.tesserakt.sparql.util/-counter/decrement.html","searchKeys":["decrement","fun decrement(value: T, count: Int = 1)","dev.tesserakt.sparql.util.Counter.decrement"]},{"name":"fun emptyMapping(): Mapping","description":"dev.tesserakt.sparql.runtime.evaluation.emptyMapping","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/empty-mapping.html","searchKeys":["emptyMapping","fun emptyMapping(): Mapping","dev.tesserakt.sparql.runtime.evaluation.emptyMapping"]},{"name":"fun filter(input: Stream<MappingDelta>): Stream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.filter","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-graph-pattern-filter-state/filter.html","searchKeys":["filter","fun filter(input: Stream<MappingDelta>): Stream<MappingDelta>","dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.filter"]},{"name":"fun filter(input: Stream<MappingDelta>, delta: DataDelta): Stream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.filter","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-graph-pattern-filter-state/filter.html","searchKeys":["filter","fun filter(input: Stream<MappingDelta>, delta: DataDelta): Stream<MappingDelta>","dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.filter"]},{"name":"fun from(booleans: Collection<Boolean>): Bitmask","description":"dev.tesserakt.sparql.util.Bitmask.Companion.from","location":"sparql/runtime/dev.tesserakt.sparql.util/-bitmask/-companion/from.html","searchKeys":["from","fun from(booleans: Collection<Boolean>): Bitmask","dev.tesserakt.sparql.util.Bitmask.Companion.from"]},{"name":"fun from(context: QueryContext, expr: Expression): FilterExpression.Operation","description":"dev.tesserakt.sparql.runtime.query.FilterExpression.Operation.Companion.from","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-filter-expression/-operation/-companion/from.html","searchKeys":["from","fun from(context: QueryContext, expr: Expression): FilterExpression.Operation","dev.tesserakt.sparql.runtime.query.FilterExpression.Operation.Companion.from"]},{"name":"fun from(context: QueryContext, pattern: TriplePattern): TriplePatternState<*>","description":"dev.tesserakt.sparql.runtime.query.TriplePatternState.Companion.from","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-triple-pattern-state/-companion/from.html","searchKeys":["from","fun from(context: QueryContext, pattern: TriplePattern): TriplePatternState<*>","dev.tesserakt.sparql.runtime.query.TriplePatternState.Companion.from"]},{"name":"fun from(context: QueryContext, s: TriplePattern.Subject, p: TriplePattern.Predicate, o: TriplePattern.Object): TriplePatternState<*>","description":"dev.tesserakt.sparql.runtime.query.TriplePatternState.Companion.from","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-triple-pattern-state/-companion/from.html","searchKeys":["from","fun from(context: QueryContext, s: TriplePattern.Subject, p: TriplePattern.Predicate, o: TriplePattern.Object): TriplePatternState<*>","dev.tesserakt.sparql.runtime.query.TriplePatternState.Companion.from"]},{"name":"fun get(binding: BindingIdentifier): TermIdentifier?","description":"dev.tesserakt.sparql.runtime.evaluation.Mapping.get","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-mapping/get.html","searchKeys":["get","fun get(binding: BindingIdentifier): TermIdentifier?","dev.tesserakt.sparql.runtime.evaluation.Mapping.get"]},{"name":"fun get(context: QueryContext, binding: String): Quad.Term?","description":"dev.tesserakt.sparql.runtime.evaluation.Mapping.get","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-mapping/get.html","searchKeys":["get","fun get(context: QueryContext, binding: String): Quad.Term?","dev.tesserakt.sparql.runtime.evaluation.Mapping.get"]},{"name":"fun highestOneBitIndex(): Int","description":"dev.tesserakt.sparql.util.Bitmask.highestOneBitIndex","location":"sparql/runtime/dev.tesserakt.sparql.util/-bitmask/highest-one-bit-index.html","searchKeys":["highestOneBitIndex","fun highestOneBitIndex(): Int","dev.tesserakt.sparql.util.Bitmask.highestOneBitIndex"]},{"name":"fun highestZeroBitIndex(): Int","description":"dev.tesserakt.sparql.util.Bitmask.highestZeroBitIndex","location":"sparql/runtime/dev.tesserakt.sparql.util/-bitmask/highest-zero-bit-index.html","searchKeys":["highestZeroBitIndex","fun highestZeroBitIndex(): Int","dev.tesserakt.sparql.util.Bitmask.highestZeroBitIndex"]},{"name":"fun increment(changes: Map<T, Int>)","description":"dev.tesserakt.sparql.util.Counter.increment","location":"sparql/runtime/dev.tesserakt.sparql.util/-counter/increment.html","searchKeys":["increment","fun increment(changes: Map<T, Int>)","dev.tesserakt.sparql.util.Counter.increment"]},{"name":"fun increment(value: T, count: Int = 1)","description":"dev.tesserakt.sparql.util.Counter.increment","location":"sparql/runtime/dev.tesserakt.sparql.util/-counter/increment.html","searchKeys":["increment","fun increment(value: T, count: Int = 1)","dev.tesserakt.sparql.util.Counter.increment"]},{"name":"fun insert(delta: DataDelta): List<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.BasicGraphPatternState.insert","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-basic-graph-pattern-state/insert.html","searchKeys":["insert","fun insert(delta: DataDelta): List<MappingDelta>","dev.tesserakt.sparql.runtime.query.BasicGraphPatternState.insert"]},{"name":"fun insert(element: SegmentsList.Segment)","description":"dev.tesserakt.sparql.util.SegmentsList.insert","location":"sparql/runtime/dev.tesserakt.sparql.util/-segments-list/insert.html","searchKeys":["insert","fun insert(element: SegmentsList.Segment)","dev.tesserakt.sparql.util.SegmentsList.insert"]},{"name":"fun insert(elements: Iterable<SegmentsList.Segment>)","description":"dev.tesserakt.sparql.util.SegmentsList.insert","location":"sparql/runtime/dev.tesserakt.sparql.util/-segments-list/insert.html","searchKeys":["insert","fun insert(elements: Iterable<SegmentsList.Segment>)","dev.tesserakt.sparql.util.SegmentsList.insert"]},{"name":"fun interface Operation","description":"dev.tesserakt.sparql.runtime.query.FilterExpression.Operation","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-filter-expression/-operation/index.html","searchKeys":["Operation","fun interface Operation","dev.tesserakt.sparql.runtime.query.FilterExpression.Operation"]},{"name":"fun inv(): Bitmask","description":"dev.tesserakt.sparql.util.Bitmask.inv","location":"sparql/runtime/dev.tesserakt.sparql.util/-bitmask/inv.html","searchKeys":["inv","fun inv(): Bitmask","dev.tesserakt.sparql.util.Bitmask.inv"]},{"name":"fun isEmpty(): Boolean","description":"dev.tesserakt.sparql.runtime.evaluation.Mapping.isEmpty","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-mapping/is-empty.html","searchKeys":["isEmpty","fun isEmpty(): Boolean","dev.tesserakt.sparql.runtime.evaluation.Mapping.isEmpty"]},{"name":"fun isOne(): Boolean","description":"dev.tesserakt.sparql.util.Bitmask.isOne","location":"sparql/runtime/dev.tesserakt.sparql.util/-bitmask/is-one.html","searchKeys":["isOne","fun isOne(): Boolean","dev.tesserakt.sparql.util.Bitmask.isOne"]},{"name":"fun isZero(): Boolean","description":"dev.tesserakt.sparql.util.Bitmask.isZero","location":"sparql/runtime/dev.tesserakt.sparql.util/-bitmask/is-zero.html","searchKeys":["isZero","fun isZero(): Boolean","dev.tesserakt.sparql.util.Bitmask.isZero"]},{"name":"fun join(a: OptimisedStream<MappingDelta>, b: OptimisedStream<MappingDelta>): Stream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.join","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/join.html","searchKeys":["join","fun join(a: OptimisedStream<MappingDelta>, b: OptimisedStream<MappingDelta>): Stream<MappingDelta>","dev.tesserakt.sparql.runtime.query.join"]},{"name":"fun join(a: OptimisedStream<MappingDelta>, b: Stream<MappingDelta>): Stream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.join","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/join.html","searchKeys":["join","fun join(a: OptimisedStream<MappingDelta>, b: Stream<MappingDelta>): Stream<MappingDelta>","dev.tesserakt.sparql.runtime.query.join"]},{"name":"fun join(a: Stream<MappingDelta>, b: OptimisedStream<MappingDelta>): Stream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.join","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/join.html","searchKeys":["join","fun join(a: Stream<MappingDelta>, b: OptimisedStream<MappingDelta>): Stream<MappingDelta>","dev.tesserakt.sparql.runtime.query.join"]},{"name":"fun join(completed: Bitmask, delta: MappingDelta): List<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.JoinTree.None.join","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/-none/join.html","searchKeys":["join","fun join(completed: Bitmask, delta: MappingDelta): List<MappingDelta>","dev.tesserakt.sparql.runtime.query.JoinTree.None.join"]},{"name":"fun join(delta: MappingAddition): Stream<MappingAddition>","description":"dev.tesserakt.sparql.runtime.query.GroupPatternState.join","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-group-pattern-state/join.html","searchKeys":["join","fun join(delta: MappingAddition): Stream<MappingAddition>","dev.tesserakt.sparql.runtime.query.GroupPatternState.join"]},{"name":"fun join(delta: MappingDeletion): Stream<MappingDeletion>","description":"dev.tesserakt.sparql.runtime.query.GroupPatternState.join","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-group-pattern-state/join.html","searchKeys":["join","fun join(delta: MappingDeletion): Stream<MappingDeletion>","dev.tesserakt.sparql.runtime.query.GroupPatternState.join"]},{"name":"fun join(delta: MappingDelta): Stream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.BasicGraphPatternState.join","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-basic-graph-pattern-state/join.html","searchKeys":["join","fun join(delta: MappingDelta): Stream<MappingDelta>","dev.tesserakt.sparql.runtime.query.BasicGraphPatternState.join"]},{"name":"fun join(other: Mapping): Mapping?","description":"dev.tesserakt.sparql.runtime.evaluation.Mapping.join","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-mapping/join.html","searchKeys":["join","fun join(other: Mapping): Mapping?","dev.tesserakt.sparql.runtime.evaluation.Mapping.join"]},{"name":"fun joinLists(a: List<MappingDelta>, b: List<MappingDelta>): List<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.joinLists","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/join-lists.html","searchKeys":["joinLists","fun joinLists(a: List<MappingDelta>, b: List<MappingDelta>): List<MappingDelta>","dev.tesserakt.sparql.runtime.query.joinLists"]},{"name":"fun keys(context: QueryContext): Iterable<String>","description":"dev.tesserakt.sparql.runtime.evaluation.Mapping.keys","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-mapping/keys.html","searchKeys":["keys","fun keys(context: QueryContext): Iterable<String>","dev.tesserakt.sparql.runtime.evaluation.Mapping.keys"]},{"name":"fun lowestOneBitIndex(): Int","description":"dev.tesserakt.sparql.util.Bitmask.lowestOneBitIndex","location":"sparql/runtime/dev.tesserakt.sparql.util/-bitmask/lowest-one-bit-index.html","searchKeys":["lowestOneBitIndex","fun lowestOneBitIndex(): Int","dev.tesserakt.sparql.util.Bitmask.lowestOneBitIndex"]},{"name":"fun lowestZeroBitIndex(): Int","description":"dev.tesserakt.sparql.util.Bitmask.lowestZeroBitIndex","location":"sparql/runtime/dev.tesserakt.sparql.util/-bitmask/lowest-zero-bit-index.html","searchKeys":["lowestZeroBitIndex","fun lowestZeroBitIndex(): Int","dev.tesserakt.sparql.util.Bitmask.lowestZeroBitIndex"]},{"name":"fun mappingOf(context: QueryContext, vararg pairs: Pair<String, Quad.Term>): Mapping","description":"dev.tesserakt.sparql.runtime.evaluation.mappingOf","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/mapping-of.html","searchKeys":["mappingOf","fun mappingOf(context: QueryContext, vararg pairs: Pair<String, Quad.Term>): Mapping","dev.tesserakt.sparql.runtime.evaluation.mappingOf"]},{"name":"fun mappingOf(context: QueryContext, vararg pairs: Pair<String?, Quad.Term>): Mapping","description":"dev.tesserakt.sparql.runtime.evaluation.mappingOf","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/mapping-of.html","searchKeys":["mappingOf","fun mappingOf(context: QueryContext, vararg pairs: Pair<String?, Quad.Term>): Mapping","dev.tesserakt.sparql.runtime.evaluation.mappingOf"]},{"name":"fun newPathsOnAdding(element: SegmentsList.Segment): Set<SegmentsList.Segment>","description":"dev.tesserakt.sparql.util.SegmentsList.newPathsOnAdding","location":"sparql/runtime/dev.tesserakt.sparql.util/-segments-list/new-paths-on-adding.html","searchKeys":["newPathsOnAdding","fun newPathsOnAdding(element: SegmentsList.Segment): Set<SegmentsList.Segment>","dev.tesserakt.sparql.util.SegmentsList.newPathsOnAdding"]},{"name":"fun newPathsOnAdding(segments: Set<SegmentsList.Segment>): Set<SegmentsList.Segment>","description":"dev.tesserakt.sparql.util.SegmentsList.newPathsOnAdding","location":"sparql/runtime/dev.tesserakt.sparql.util/-segments-list/new-paths-on-adding.html","searchKeys":["newPathsOnAdding","fun newPathsOnAdding(segments: Set<SegmentsList.Segment>): Set<SegmentsList.Segment>","dev.tesserakt.sparql.util.SegmentsList.newPathsOnAdding"]},{"name":"fun newReachableEndNodesOnAdding(segment: SegmentsList.Segment): Set<Quad.Term>","description":"dev.tesserakt.sparql.util.SegmentsList.newReachableEndNodesOnAdding","location":"sparql/runtime/dev.tesserakt.sparql.util/-segments-list/new-reachable-end-nodes-on-adding.html","searchKeys":["newReachableEndNodesOnAdding","fun newReachableEndNodesOnAdding(segment: SegmentsList.Segment): Set<Quad.Term>","dev.tesserakt.sparql.util.SegmentsList.newReachableEndNodesOnAdding"]},{"name":"fun newReachableStartNodesOnAdding(segment: SegmentsList.Segment): Set<Quad.Term>","description":"dev.tesserakt.sparql.util.SegmentsList.newReachableStartNodesOnAdding","location":"sparql/runtime/dev.tesserakt.sparql.util/-segments-list/new-reachable-start-nodes-on-adding.html","searchKeys":["newReachableStartNodesOnAdding","fun newReachableStartNodesOnAdding(segment: SegmentsList.Segment): Set<Quad.Term>","dev.tesserakt.sparql.util.SegmentsList.newReachableStartNodesOnAdding"]},{"name":"fun onArrayPatternJoinExecuted()","description":"dev.tesserakt.sparql.runtime.RuntimeStatistics.onArrayPatternJoinExecuted","location":"sparql/runtime/dev.tesserakt.sparql.runtime/-runtime-statistics/on-array-pattern-join-executed.html","searchKeys":["onArrayPatternJoinExecuted","fun onArrayPatternJoinExecuted()","dev.tesserakt.sparql.runtime.RuntimeStatistics.onArrayPatternJoinExecuted"]},{"name":"fun onJoinTreeHit(count: Int)","description":"dev.tesserakt.sparql.runtime.RuntimeStatistics.onJoinTreeHit","location":"sparql/runtime/dev.tesserakt.sparql.runtime/-runtime-statistics/on-join-tree-hit.html","searchKeys":["onJoinTreeHit","fun onJoinTreeHit(count: Int)","dev.tesserakt.sparql.runtime.RuntimeStatistics.onJoinTreeHit"]},{"name":"fun onJoinTreeMiss()","description":"dev.tesserakt.sparql.runtime.RuntimeStatistics.onJoinTreeMiss","location":"sparql/runtime/dev.tesserakt.sparql.runtime/-runtime-statistics/on-join-tree-miss.html","searchKeys":["onJoinTreeMiss","fun onJoinTreeMiss()","dev.tesserakt.sparql.runtime.RuntimeStatistics.onJoinTreeMiss"]},{"name":"fun oneOrMore(context: QueryContext, start: TriplePattern.Subject, predicate: TriplePattern.OneOrMore, end: TriplePattern.Object): RepeatingPathState","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.Companion.oneOrMore","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-companion/one-or-more.html","searchKeys":["oneOrMore","fun oneOrMore(context: QueryContext, start: TriplePattern.Subject, predicate: TriplePattern.OneOrMore, end: TriplePattern.Object): RepeatingPathState","dev.tesserakt.sparql.runtime.query.RepeatingPathState.Companion.oneOrMore"]},{"name":"fun onesAt(index: Int, length: Int? = null): Bitmask","description":"dev.tesserakt.sparql.util.Bitmask.Companion.onesAt","location":"sparql/runtime/dev.tesserakt.sparql.util/-bitmask/-companion/ones-at.html","searchKeys":["onesAt","fun onesAt(index: Int, length: Int? = null): Bitmask","dev.tesserakt.sparql.util.Bitmask.Companion.onesAt"]},{"name":"fun onesAt(index: Int, vararg other: Int, length: Int? = null): Bitmask","description":"dev.tesserakt.sparql.util.Bitmask.Companion.onesAt","location":"sparql/runtime/dev.tesserakt.sparql.util/-bitmask/-companion/ones-at.html","searchKeys":["onesAt","fun onesAt(index: Int, vararg other: Int, length: Int? = null): Bitmask","dev.tesserakt.sparql.util.Bitmask.Companion.onesAt"]},{"name":"fun optimise()","description":"dev.tesserakt.sparql.runtime.collection.MultiHashMappingArray.optimise","location":"sparql/runtime/dev.tesserakt.sparql.runtime.collection/-multi-hash-mapping-array/optimise.html","searchKeys":["optimise","fun optimise()","dev.tesserakt.sparql.runtime.collection.MultiHashMappingArray.optimise"]},{"name":"fun peek(delta: DataDelta): Stream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.BasicGraphPatternState.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-basic-graph-pattern-state/peek.html","searchKeys":["peek","fun peek(delta: DataDelta): Stream<MappingDelta>","dev.tesserakt.sparql.runtime.query.BasicGraphPatternState.peek"]},{"name":"fun peek(parent: MutableJoinState, delta: DataDelta): Stream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-graph-pattern-filter-state/peek.html","searchKeys":["peek","fun peek(parent: MutableJoinState, delta: DataDelta): Stream<MappingDelta>","dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.peek"]},{"name":"fun process(data: DataDelta): List<QueryState.ResultChange<BindingsImpl>>","description":"dev.tesserakt.sparql.runtime.query.QueryState.Processor.process","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-query-state/-processor/process.html","searchKeys":["process","fun process(data: DataDelta): List<QueryState.ResultChange<BindingsImpl>>","dev.tesserakt.sparql.runtime.query.QueryState.Processor.process"]},{"name":"fun process(delta: DataDelta)","description":"dev.tesserakt.sparql.runtime.query.BasicGraphPatternState.process","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-basic-graph-pattern-state/process.html","searchKeys":["process","fun process(delta: DataDelta)","dev.tesserakt.sparql.runtime.query.BasicGraphPatternState.process"]},{"name":"fun process(delta: DataDelta)","description":"dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.process","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-graph-pattern-filter-state/process.html","searchKeys":["process","fun process(delta: DataDelta)","dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.process"]},{"name":"fun remainingPathsOnRemoving(element: SegmentsList.Segment): Set<SegmentsList.Segment>","description":"dev.tesserakt.sparql.util.SegmentsList.remainingPathsOnRemoving","location":"sparql/runtime/dev.tesserakt.sparql.util/-segments-list/remaining-paths-on-removing.html","searchKeys":["remainingPathsOnRemoving","fun remainingPathsOnRemoving(element: SegmentsList.Segment): Set<SegmentsList.Segment>","dev.tesserakt.sparql.util.SegmentsList.remainingPathsOnRemoving"]},{"name":"fun remainingPathsOnRemoving(elements: Iterable<SegmentsList.Segment>): Set<SegmentsList.Segment>","description":"dev.tesserakt.sparql.util.SegmentsList.remainingPathsOnRemoving","location":"sparql/runtime/dev.tesserakt.sparql.util/-segments-list/remaining-paths-on-removing.html","searchKeys":["remainingPathsOnRemoving","fun remainingPathsOnRemoving(elements: Iterable<SegmentsList.Segment>): Set<SegmentsList.Segment>","dev.tesserakt.sparql.util.SegmentsList.remainingPathsOnRemoving"]},{"name":"fun remove(element: SegmentsList.Segment)","description":"dev.tesserakt.sparql.util.SegmentsList.remove","location":"sparql/runtime/dev.tesserakt.sparql.util/-segments-list/remove.html","searchKeys":["remove","fun remove(element: SegmentsList.Segment)","dev.tesserakt.sparql.util.SegmentsList.remove"]},{"name":"fun remove(elements: Iterable<SegmentsList.Segment>)","description":"dev.tesserakt.sparql.util.SegmentsList.remove","location":"sparql/runtime/dev.tesserakt.sparql.util/-segments-list/remove.html","searchKeys":["remove","fun remove(elements: Iterable<SegmentsList.Segment>)","dev.tesserakt.sparql.util.SegmentsList.remove"]},{"name":"fun removedPathsOnRemoving(element: SegmentsList.Segment): Set<SegmentsList.Segment>","description":"dev.tesserakt.sparql.util.SegmentsList.removedPathsOnRemoving","location":"sparql/runtime/dev.tesserakt.sparql.util/-segments-list/removed-paths-on-removing.html","searchKeys":["removedPathsOnRemoving","fun removedPathsOnRemoving(element: SegmentsList.Segment): Set<SegmentsList.Segment>","dev.tesserakt.sparql.util.SegmentsList.removedPathsOnRemoving"]},{"name":"fun removedPathsOnRemoving(elements: Iterable<SegmentsList.Segment>): Set<SegmentsList.Segment>","description":"dev.tesserakt.sparql.util.SegmentsList.removedPathsOnRemoving","location":"sparql/runtime/dev.tesserakt.sparql.util/-segments-list/removed-paths-on-removing.html","searchKeys":["removedPathsOnRemoving","fun removedPathsOnRemoving(elements: Iterable<SegmentsList.Segment>): Set<SegmentsList.Segment>","dev.tesserakt.sparql.util.SegmentsList.removedPathsOnRemoving"]},{"name":"fun report(): String","description":"dev.tesserakt.sparql.runtime.RuntimeStatistics.report","location":"sparql/runtime/dev.tesserakt.sparql.runtime/-runtime-statistics/report.html","searchKeys":["report","fun report(): String","dev.tesserakt.sparql.runtime.RuntimeStatistics.report"]},{"name":"fun reset()","description":"dev.tesserakt.sparql.runtime.RuntimeStatistics.reset","location":"sparql/runtime/dev.tesserakt.sparql.runtime/-runtime-statistics/reset.html","searchKeys":["reset","fun reset()","dev.tesserakt.sparql.runtime.RuntimeStatistics.reset"]},{"name":"fun retain(bindings: BindingIdentifierSet): Mapping","description":"dev.tesserakt.sparql.runtime.evaluation.Mapping.retain","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-mapping/retain.html","searchKeys":["retain","fun retain(bindings: BindingIdentifierSet): Mapping","dev.tesserakt.sparql.runtime.evaluation.Mapping.retain"]},{"name":"fun retain(names: Set<String>): BindingsImpl","description":"dev.tesserakt.sparql.runtime.evaluation.BindingsImpl.retain","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-bindings-impl/retain.html","searchKeys":["retain","fun retain(names: Set<String>): BindingsImpl","dev.tesserakt.sparql.runtime.evaluation.BindingsImpl.retain"]},{"name":"fun size(): Int","description":"dev.tesserakt.sparql.util.Bitmask.size","location":"sparql/runtime/dev.tesserakt.sparql.util/-bitmask/size.html","searchKeys":["size","fun size(): Int","dev.tesserakt.sparql.util.Bitmask.size"]},{"name":"fun state(): List<ResultType>","description":"dev.tesserakt.sparql.runtime.query.QueryState.Processor.state","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-query-state/-processor/state.html","searchKeys":["state","fun state(): List<ResultType>","dev.tesserakt.sparql.runtime.query.QueryState.Processor.state"]},{"name":"fun test(mapping: Mapping): Boolean","description":"dev.tesserakt.sparql.runtime.query.FilterExpression.test","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-filter-expression/test.html","searchKeys":["test","fun test(mapping: Mapping): Boolean","dev.tesserakt.sparql.runtime.query.FilterExpression.test"]},{"name":"fun toDouble(): Double","description":"dev.tesserakt.sparql.util.Cardinality.toDouble","location":"sparql/runtime/dev.tesserakt.sparql.util/-cardinality/to-double.html","searchKeys":["toDouble","fun toDouble(): Double","dev.tesserakt.sparql.util.Cardinality.toDouble"]},{"name":"fun toInt(): Int","description":"dev.tesserakt.sparql.util.Cardinality.toInt","location":"sparql/runtime/dev.tesserakt.sparql.util/-cardinality/to-int.html","searchKeys":["toInt","fun toInt(): Int","dev.tesserakt.sparql.util.Cardinality.toInt"]},{"name":"fun toMap(context: QueryContext): Map<String, Quad.Term>","description":"dev.tesserakt.sparql.runtime.evaluation.Mapping.toMap","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-mapping/to-map.html","searchKeys":["toMap","fun toMap(context: QueryContext): Map<String, Quad.Term>","dev.tesserakt.sparql.runtime.evaluation.Mapping.toMap"]},{"name":"fun withOnesAt(index: Int): Bitmask","description":"dev.tesserakt.sparql.util.Bitmask.withOnesAt","location":"sparql/runtime/dev.tesserakt.sparql.util/-bitmask/with-ones-at.html","searchKeys":["withOnesAt","fun withOnesAt(index: Int): Bitmask","dev.tesserakt.sparql.util.Bitmask.withOnesAt"]},{"name":"fun withOnesAt(vararg index: Int): Bitmask","description":"dev.tesserakt.sparql.util.Bitmask.withOnesAt","location":"sparql/runtime/dev.tesserakt.sparql.util/-bitmask/with-ones-at.html","searchKeys":["withOnesAt","fun withOnesAt(vararg index: Int): Bitmask","dev.tesserakt.sparql.util.Bitmask.withOnesAt"]},{"name":"fun wrap(raw: Int, length: Int): Bitmask","description":"dev.tesserakt.sparql.util.Bitmask.Companion.wrap","location":"sparql/runtime/dev.tesserakt.sparql.util/-bitmask/-companion/wrap.html","searchKeys":["wrap","fun wrap(raw: Int, length: Int): Bitmask","dev.tesserakt.sparql.util.Bitmask.Companion.wrap"]},{"name":"fun zeroOrMore(context: QueryContext, start: TriplePattern.Subject, predicate: TriplePattern.ZeroOrMore, end: TriplePattern.Object): RepeatingPathState","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.Companion.zeroOrMore","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-companion/zero-or-more.html","searchKeys":["zeroOrMore","fun zeroOrMore(context: QueryContext, start: TriplePattern.Subject, predicate: TriplePattern.ZeroOrMore, end: TriplePattern.Object): RepeatingPathState","dev.tesserakt.sparql.runtime.query.RepeatingPathState.Companion.zeroOrMore"]},{"name":"infix fun and(other: Bitmask): Bitmask","description":"dev.tesserakt.sparql.util.Bitmask.and","location":"sparql/runtime/dev.tesserakt.sparql.util/-bitmask/and.html","searchKeys":["and","infix fun and(other: Bitmask): Bitmask","dev.tesserakt.sparql.util.Bitmask.and"]},{"name":"infix fun or(other: Bitmask): Bitmask","description":"dev.tesserakt.sparql.util.Bitmask.or","location":"sparql/runtime/dev.tesserakt.sparql.util/-bitmask/or.html","searchKeys":["or","infix fun or(other: Bitmask): Bitmask","dev.tesserakt.sparql.util.Bitmask.or"]},{"name":"inline fun <E : Any> Collection<E>.toStream(): OptimisedStream<E>","description":"dev.tesserakt.sparql.runtime.stream.toStream","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/to-stream.html","searchKeys":["toStream","inline fun <E : Any> Collection<E>.toStream(): OptimisedStream<E>","dev.tesserakt.sparql.runtime.stream.toStream"]},{"name":"inline fun <E : Any> Iterable<E>.toStream(cardinality: Cardinality): Stream<E>","description":"dev.tesserakt.sparql.runtime.stream.toStream","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/to-stream.html","searchKeys":["toStream","inline fun <E : Any> Iterable<E>.toStream(cardinality: Cardinality): Stream<E>","dev.tesserakt.sparql.runtime.stream.toStream"]},{"name":"inline fun <E : Any> Iterable<E>.toStream(cardinality: Number): Stream<E>","description":"dev.tesserakt.sparql.runtime.stream.toStream","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/to-stream.html","searchKeys":["toStream","inline fun <E : Any> Iterable<E>.toStream(cardinality: Number): Stream<E>","dev.tesserakt.sparql.runtime.stream.toStream"]},{"name":"inline fun <E : Any> List<E>.toStream(): CollectedStream<E>","description":"dev.tesserakt.sparql.runtime.stream.toStream","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/to-stream.html","searchKeys":["toStream","inline fun <E : Any> List<E>.toStream(): CollectedStream<E>","dev.tesserakt.sparql.runtime.stream.toStream"]},{"name":"inline fun <E : Any> Stream<E>.collect(): CollectedStream<E>","description":"dev.tesserakt.sparql.runtime.stream.collect","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/collect.html","searchKeys":["collect","inline fun <E : Any> Stream<E>.collect(): CollectedStream<E>","dev.tesserakt.sparql.runtime.stream.collect"]},{"name":"inline fun <E : Any> Stream<E>.filtered(noinline predicate: (E) -> Boolean): Stream<E>","description":"dev.tesserakt.sparql.runtime.stream.filtered","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/filtered.html","searchKeys":["filtered","inline fun <E : Any> Stream<E>.filtered(noinline predicate: (E) -> Boolean): Stream<E>","dev.tesserakt.sparql.runtime.stream.filtered"]},{"name":"inline fun <E : Any> Stream<E>.optimisedForSingleUse(cardinality: Cardinality = this.cardinality): OptimisedStream<E>","description":"dev.tesserakt.sparql.runtime.stream.optimisedForSingleUse","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/optimised-for-single-use.html","searchKeys":["optimisedForSingleUse","inline fun <E : Any> Stream<E>.optimisedForSingleUse(cardinality: Cardinality = this.cardinality): OptimisedStream<E>","dev.tesserakt.sparql.runtime.stream.optimisedForSingleUse"]},{"name":"inline fun <E : Any> Stream<E>.optimisedForSingleUse(cardinality: Number): OptimisedStream<E>","description":"dev.tesserakt.sparql.runtime.stream.optimisedForSingleUse","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/optimised-for-single-use.html","searchKeys":["optimisedForSingleUse","inline fun <E : Any> Stream<E>.optimisedForSingleUse(cardinality: Number): OptimisedStream<E>","dev.tesserakt.sparql.runtime.stream.optimisedForSingleUse"]},{"name":"inline fun <E : Any> streamOf(): OptimisedStream<E>","description":"dev.tesserakt.sparql.runtime.stream.streamOf","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/stream-of.html","searchKeys":["streamOf","inline fun <E : Any> streamOf(): OptimisedStream<E>","dev.tesserakt.sparql.runtime.stream.streamOf"]},{"name":"inline fun <E : Any> streamOf(element1: E, element2: E, vararg others: E): CollectedStream<E>","description":"dev.tesserakt.sparql.runtime.stream.streamOf","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/stream-of.html","searchKeys":["streamOf","inline fun <E : Any> streamOf(element1: E, element2: E, vararg others: E): CollectedStream<E>","dev.tesserakt.sparql.runtime.stream.streamOf"]},{"name":"inline fun <E : Any> streamOf(element: E): SingleStream<E>","description":"dev.tesserakt.sparql.runtime.stream.streamOf","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/stream-of.html","searchKeys":["streamOf","inline fun <E : Any> streamOf(element: E): SingleStream<E>","dev.tesserakt.sparql.runtime.stream.streamOf"]},{"name":"inline fun <I : Any, O : Any> Iterable<Stream<I>>.transform(transform: (Int, Stream<I>) -> Stream<O>): Stream<O>","description":"dev.tesserakt.sparql.runtime.stream.transform","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/transform.html","searchKeys":["transform","inline fun <I : Any, O : Any> Iterable<Stream<I>>.transform(transform: (Int, Stream<I>) -> Stream<O>): Stream<O>","dev.tesserakt.sparql.runtime.stream.transform"]},{"name":"inline fun <I : Any, O : Any> Iterable<Stream<I>>.transform(transform: (Stream<I>) -> Stream<O>): Stream<O>","description":"dev.tesserakt.sparql.runtime.stream.transform","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/transform.html","searchKeys":["transform","inline fun <I : Any, O : Any> Iterable<Stream<I>>.transform(transform: (Stream<I>) -> Stream<O>): Stream<O>","dev.tesserakt.sparql.runtime.stream.transform"]},{"name":"inline fun <I : Any, O : Any> OptimisedStream<I>.mapped(noinline transform: (I) -> O): OptimisedStream<O>","description":"dev.tesserakt.sparql.runtime.stream.mapped","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/mapped.html","searchKeys":["mapped","inline fun <I : Any, O : Any> OptimisedStream<I>.mapped(noinline transform: (I) -> O): OptimisedStream<O>","dev.tesserakt.sparql.runtime.stream.mapped"]},{"name":"inline fun <I : Any, O : Any> OptimisedStream<I>.transform(maxCardinality: Cardinality, noinline transform: (I) -> Stream<O>): Stream<O>","description":"dev.tesserakt.sparql.runtime.stream.transform","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/transform.html","searchKeys":["transform","inline fun <I : Any, O : Any> OptimisedStream<I>.transform(maxCardinality: Cardinality, noinline transform: (I) -> Stream<O>): Stream<O>","dev.tesserakt.sparql.runtime.stream.transform"]},{"name":"inline fun <I : Any, O : Any> OptimisedStream<I>.transform(maxCardinality: Number, noinline transform: (I) -> Stream<O>): Stream<O>","description":"dev.tesserakt.sparql.runtime.stream.transform","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/transform.html","searchKeys":["transform","inline fun <I : Any, O : Any> OptimisedStream<I>.transform(maxCardinality: Number, noinline transform: (I) -> Stream<O>): Stream<O>","dev.tesserakt.sparql.runtime.stream.transform"]},{"name":"inline fun <I : Any, O : Any> OptimisedStream<I>.transformNonNull(maxCardinality: Cardinality, noinline transform: (I) -> Stream<O>?): Stream<O>","description":"dev.tesserakt.sparql.runtime.stream.transformNonNull","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/transform-non-null.html","searchKeys":["transformNonNull","inline fun <I : Any, O : Any> OptimisedStream<I>.transformNonNull(maxCardinality: Cardinality, noinline transform: (I) -> Stream<O>?): Stream<O>","dev.tesserakt.sparql.runtime.stream.transformNonNull"]},{"name":"inline fun <I : Any, O : Any> OptimisedStream<I>.transformNonNull(maxCardinality: Number, noinline transform: (I) -> Stream<O>?): Stream<O>","description":"dev.tesserakt.sparql.runtime.stream.transformNonNull","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/transform-non-null.html","searchKeys":["transformNonNull","inline fun <I : Any, O : Any> OptimisedStream<I>.transformNonNull(maxCardinality: Number, noinline transform: (I) -> Stream<O>?): Stream<O>","dev.tesserakt.sparql.runtime.stream.transformNonNull"]},{"name":"inline fun <I : Any, O : Any> Stream<I>.folded(start: Stream<O>, transform: (acc: Stream<O>, element: I) -> Stream<O>): Stream<O>","description":"dev.tesserakt.sparql.runtime.stream.folded","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/folded.html","searchKeys":["folded","inline fun <I : Any, O : Any> Stream<I>.folded(start: Stream<O>, transform: (acc: Stream<O>, element: I) -> Stream<O>): Stream<O>","dev.tesserakt.sparql.runtime.stream.folded"]},{"name":"inline fun <I : Any, O : Any> Stream<I>.mapped(noinline transform: (I) -> O): Stream<O>","description":"dev.tesserakt.sparql.runtime.stream.mapped","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/mapped.html","searchKeys":["mapped","inline fun <I : Any, O : Any> Stream<I>.mapped(noinline transform: (I) -> O): Stream<O>","dev.tesserakt.sparql.runtime.stream.mapped"]},{"name":"inline fun <I : Any, O : Any> Stream<I>.mappedNonNull(noinline transform: (I) -> O?): Stream<O>","description":"dev.tesserakt.sparql.runtime.stream.mappedNonNull","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/mapped-non-null.html","searchKeys":["mappedNonNull","inline fun <I : Any, O : Any> Stream<I>.mappedNonNull(noinline transform: (I) -> O?): Stream<O>","dev.tesserakt.sparql.runtime.stream.mappedNonNull"]},{"name":"inline fun <I : Any, O : Any> Stream<I>.merge(transform: (I) -> Stream<O>): Stream<O>","description":"dev.tesserakt.sparql.runtime.stream.merge","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/merge.html","searchKeys":["merge","inline fun <I : Any, O : Any> Stream<I>.merge(transform: (I) -> Stream<O>): Stream<O>","dev.tesserakt.sparql.runtime.stream.merge"]},{"name":"inline fun <I : Any> Stream<I>.zippedWithIndex(): Stream<Pair<Int, I>>","description":"dev.tesserakt.sparql.runtime.stream.zippedWithIndex","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/zipped-with-index.html","searchKeys":["zippedWithIndex","inline fun <I : Any> Stream<I>.zippedWithIndex(): Stream<Pair<Int, I>>","dev.tesserakt.sparql.runtime.stream.zippedWithIndex"]},{"name":"inline fun <O : Any> Stream<*>.filteredIsInstance(): Stream<O>","description":"dev.tesserakt.sparql.runtime.stream.filteredIsInstance","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/filtered-is-instance.html","searchKeys":["filteredIsInstance","inline fun <O : Any> Stream<*>.filteredIsInstance(): Stream<O>","dev.tesserakt.sparql.runtime.stream.filteredIsInstance"]},{"name":"inline fun <T : Any> emptyStream(): OptimisedStream<T>","description":"dev.tesserakt.sparql.runtime.stream.emptyStream","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/empty-stream.html","searchKeys":["emptyStream","inline fun <T : Any> emptyStream(): OptimisedStream<T>","dev.tesserakt.sparql.runtime.stream.emptyStream"]},{"name":"inline fun <T> emptyIterable(): Iterable<T>","description":"dev.tesserakt.sparql.runtime.stream.emptyIterable","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/empty-iterable.html","searchKeys":["emptyIterable","inline fun <T> emptyIterable(): Iterable<T>","dev.tesserakt.sparql.runtime.stream.emptyIterable"]},{"name":"inline fun <T> emptyIterator(): Iterator<T>","description":"dev.tesserakt.sparql.runtime.stream.emptyIterator","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/empty-iterator.html","searchKeys":["emptyIterator","inline fun <T> emptyIterator(): Iterator<T>","dev.tesserakt.sparql.runtime.stream.emptyIterator"]},{"name":"inline fun JoinTree.join(deltas: List<MappingDelta>): List<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.join","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/join.html","searchKeys":["join","inline fun JoinTree.join(deltas: List<MappingDelta>): List<MappingDelta>","dev.tesserakt.sparql.runtime.query.join"]},{"name":"inline fun List<Pair<Bitmask, List<MappingDelta>>>.expandBindingDeltas(): List<Pair<Bitmask, List<MappingDelta>>>","description":"dev.tesserakt.sparql.runtime.query.expandBindingDeltas","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/expand-binding-deltas.html","searchKeys":["expandBindingDeltas","inline fun List<Pair<Bitmask, List<MappingDelta>>>.expandBindingDeltas(): List<Pair<Bitmask, List<MappingDelta>>>","dev.tesserakt.sparql.runtime.query.expandBindingDeltas"]},{"name":"inline fun MappingDelta.map(transform: (Mapping) -> Mapping): MappingDelta","description":"dev.tesserakt.sparql.runtime.evaluation.map","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/map.html","searchKeys":["map","inline fun MappingDelta.map(transform: (Mapping) -> Mapping): MappingDelta","dev.tesserakt.sparql.runtime.evaluation.map"]},{"name":"inline fun MappingDelta.mapToStream(transform: (Mapping) -> Stream<Mapping>): Stream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.evaluation.mapToStream","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/map-to-stream.html","searchKeys":["mapToStream","inline fun MappingDelta.mapToStream(transform: (Mapping) -> Stream<Mapping>): Stream<MappingDelta>","dev.tesserakt.sparql.runtime.evaluation.mapToStream"]},{"name":"inline fun TriplePattern.Sequence.unfold(start: TriplePattern.Subject, end: TriplePattern.Object): List<TriplePattern>","description":"dev.tesserakt.sparql.runtime.query.unfold","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/unfold.html","searchKeys":["unfold","inline fun TriplePattern.Sequence.unfold(start: TriplePattern.Subject, end: TriplePattern.Object): List<TriplePattern>","dev.tesserakt.sparql.runtime.query.unfold"]},{"name":"inline fun TriplePattern.UnboundSequence.unfold(start: TriplePattern.Subject, end: TriplePattern.Object): List<TriplePattern>","description":"dev.tesserakt.sparql.runtime.query.unfold","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/unfold.html","searchKeys":["unfold","inline fun TriplePattern.UnboundSequence.unfold(start: TriplePattern.Subject, end: TriplePattern.Object): List<TriplePattern>","dev.tesserakt.sparql.runtime.query.unfold"]},{"name":"inline fun bindingNamesOf(subject: TriplePattern.Subject, predicate: TriplePattern.Predicate, object: TriplePattern.Object): Set<String>","description":"dev.tesserakt.sparql.runtime.query.bindingNamesOf","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/binding-names-of.html","searchKeys":["bindingNamesOf","inline fun bindingNamesOf(subject: TriplePattern.Subject, predicate: TriplePattern.Predicate, object: TriplePattern.Object): Set<String>","dev.tesserakt.sparql.runtime.query.bindingNamesOf"]},{"name":"inner class Processor","description":"dev.tesserakt.sparql.runtime.query.QueryState.Processor","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-query-state/-processor/index.html","searchKeys":["Processor","inner class Processor","dev.tesserakt.sparql.runtime.query.QueryState.Processor"]},{"name":"interface MappingArray","description":"dev.tesserakt.sparql.runtime.collection.MappingArray","location":"sparql/runtime/dev.tesserakt.sparql.runtime.collection/-mapping-array/index.html","searchKeys":["MappingArray","interface MappingArray","dev.tesserakt.sparql.runtime.collection.MappingArray"]},{"name":"interface MutableFilterState","description":"dev.tesserakt.sparql.runtime.query.MutableFilterState","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-mutable-filter-state/index.html","searchKeys":["MutableFilterState","interface MutableFilterState","dev.tesserakt.sparql.runtime.query.MutableFilterState"]},{"name":"interface MutableJoinState","description":"dev.tesserakt.sparql.runtime.query.MutableJoinState","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-mutable-join-state/index.html","searchKeys":["MutableJoinState","interface MutableJoinState","dev.tesserakt.sparql.runtime.query.MutableJoinState"]},{"name":"interface OptimisedStream<E : Any> : Stream<E> ","description":"dev.tesserakt.sparql.runtime.stream.OptimisedStream","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-optimised-stream/index.html","searchKeys":["OptimisedStream","interface OptimisedStream<E : Any> : Stream<E> ","dev.tesserakt.sparql.runtime.stream.OptimisedStream"]},{"name":"interface QueryContext","description":"dev.tesserakt.sparql.runtime.evaluation.QueryContext","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-query-context/index.html","searchKeys":["QueryContext","interface QueryContext","dev.tesserakt.sparql.runtime.evaluation.QueryContext"]},{"name":"interface StatelessFilter","description":"dev.tesserakt.sparql.runtime.query.StatelessFilter","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-stateless-filter/index.html","searchKeys":["StatelessFilter","interface StatelessFilter","dev.tesserakt.sparql.runtime.query.StatelessFilter"]},{"name":"interface Stream<out E : Any> : Iterable<E> ","description":"dev.tesserakt.sparql.runtime.stream.Stream","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream/index.html","searchKeys":["Stream","interface Stream<out E : Any> : Iterable<E> ","dev.tesserakt.sparql.runtime.stream.Stream"]},{"name":"object Companion","description":"dev.tesserakt.sparql.runtime.collection.MultiHashMappingArray.Companion","location":"sparql/runtime/dev.tesserakt.sparql.runtime.collection/-multi-hash-mapping-array/-companion/index.html","searchKeys":["Companion","object Companion","dev.tesserakt.sparql.runtime.collection.MultiHashMappingArray.Companion"]},{"name":"object Companion","description":"dev.tesserakt.sparql.runtime.evaluation.BindingIdentifier.Companion","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-binding-identifier/-companion/index.html","searchKeys":["Companion","object Companion","dev.tesserakt.sparql.runtime.evaluation.BindingIdentifier.Companion"]},{"name":"object Companion","description":"dev.tesserakt.sparql.runtime.evaluation.Mapping.Companion","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-mapping/-companion/index.html","searchKeys":["Companion","object Companion","dev.tesserakt.sparql.runtime.evaluation.Mapping.Companion"]},{"name":"object Companion","description":"dev.tesserakt.sparql.runtime.evaluation.TermIdentifier.Companion","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-term-identifier/-companion/index.html","searchKeys":["Companion","object Companion","dev.tesserakt.sparql.runtime.evaluation.TermIdentifier.Companion"]},{"name":"object Companion","description":"dev.tesserakt.sparql.runtime.query.ExclusionFilterState.Companion","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-exclusion-filter-state/-companion/index.html","searchKeys":["Companion","object Companion","dev.tesserakt.sparql.runtime.query.ExclusionFilterState.Companion"]},{"name":"object Companion","description":"dev.tesserakt.sparql.runtime.query.FilterExpression.Companion","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-filter-expression/-companion/index.html","searchKeys":["Companion","object Companion","dev.tesserakt.sparql.runtime.query.FilterExpression.Companion"]},{"name":"object Companion","description":"dev.tesserakt.sparql.runtime.query.FilterExpression.ComparisonEval.Companion","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-filter-expression/-comparison-eval/-companion/index.html","searchKeys":["Companion","object Companion","dev.tesserakt.sparql.runtime.query.FilterExpression.ComparisonEval.Companion"]},{"name":"object Companion","description":"dev.tesserakt.sparql.runtime.query.FilterExpression.Operation.Companion","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-filter-expression/-operation/-companion/index.html","searchKeys":["Companion","object Companion","dev.tesserakt.sparql.runtime.query.FilterExpression.Operation.Companion"]},{"name":"object Companion","description":"dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Companion","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-graph-pattern-filter-state/-companion/index.html","searchKeys":["Companion","object Companion","dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Companion"]},{"name":"object Companion","description":"dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateful.Companion","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-graph-pattern-filter-state/-stateful/-companion/index.html","searchKeys":["Companion","object Companion","dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateful.Companion"]},{"name":"object Companion","description":"dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateless.Companion","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-graph-pattern-filter-state/-stateless/-companion/index.html","searchKeys":["Companion","object Companion","dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateless.Companion"]},{"name":"object Companion","description":"dev.tesserakt.sparql.runtime.query.InclusionFilterState.Companion","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-inclusion-filter-state/-companion/index.html","searchKeys":["Companion","object Companion","dev.tesserakt.sparql.runtime.query.InclusionFilterState.Companion"]},{"name":"object Companion","description":"dev.tesserakt.sparql.runtime.query.JoinTree.Companion","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/-companion/index.html","searchKeys":["Companion","object Companion","dev.tesserakt.sparql.runtime.query.JoinTree.Companion"]},{"name":"object Companion","description":"dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Companion","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/-dynamic/-companion/index.html","searchKeys":["Companion","object Companion","dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Companion"]},{"name":"object Companion","description":"dev.tesserakt.sparql.runtime.query.JoinTree.None.Companion","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/-none/-companion/index.html","searchKeys":["Companion","object Companion","dev.tesserakt.sparql.runtime.query.JoinTree.None.Companion"]},{"name":"object Companion","description":"dev.tesserakt.sparql.runtime.query.QueryState.ResultChange.Companion","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-query-state/-result-change/-companion/index.html","searchKeys":["Companion","object Companion","dev.tesserakt.sparql.runtime.query.QueryState.ResultChange.Companion"]},{"name":"object Companion","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.Companion","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-companion/index.html","searchKeys":["Companion","object Companion","dev.tesserakt.sparql.runtime.query.RepeatingPathState.Companion"]},{"name":"object Companion","description":"dev.tesserakt.sparql.runtime.query.TriplePatternState.Companion","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-triple-pattern-state/-companion/index.html","searchKeys":["Companion","object Companion","dev.tesserakt.sparql.runtime.query.TriplePatternState.Companion"]},{"name":"object Companion","description":"dev.tesserakt.sparql.runtime.query.UnionState.Companion","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-union-state/-companion/index.html","searchKeys":["Companion","object Companion","dev.tesserakt.sparql.runtime.query.UnionState.Companion"]},{"name":"object Companion","description":"dev.tesserakt.sparql.runtime.stream.CollectedStream.Companion","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-collected-stream/-companion/index.html","searchKeys":["Companion","object Companion","dev.tesserakt.sparql.runtime.stream.CollectedStream.Companion"]},{"name":"object Companion","description":"dev.tesserakt.sparql.util.Bitmask.Companion","location":"sparql/runtime/dev.tesserakt.sparql.util/-bitmask/-companion/index.html","searchKeys":["Companion","object Companion","dev.tesserakt.sparql.util.Bitmask.Companion"]},{"name":"object Companion","description":"dev.tesserakt.sparql.util.SegmentsList.Companion","location":"sparql/runtime/dev.tesserakt.sparql.util/-segments-list/-companion/index.html","searchKeys":["Companion","object Companion","dev.tesserakt.sparql.util.SegmentsList.Companion"]},{"name":"object Compat","description":"dev.tesserakt.sparql.runtime.compat.Compat","location":"sparql/runtime/dev.tesserakt.sparql.runtime.compat/-compat/index.html","searchKeys":["Compat","object Compat","dev.tesserakt.sparql.runtime.compat.Compat"]},{"name":"object EmptyStream : Stream<Nothing> , OptimisedStream<Nothing> ","description":"dev.tesserakt.sparql.runtime.stream.EmptyStream","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-empty-stream/index.html","searchKeys":["EmptyStream","object EmptyStream : Stream<Nothing> , OptimisedStream<Nothing> ","dev.tesserakt.sparql.runtime.stream.EmptyStream"]},{"name":"object GlobalQueryContext : QueryContext","description":"dev.tesserakt.sparql.runtime.evaluation.GlobalQueryContext","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-global-query-context/index.html","searchKeys":["GlobalQueryContext","object GlobalQueryContext : QueryContext","dev.tesserakt.sparql.runtime.evaluation.GlobalQueryContext"]},{"name":"object InnerFilterScopeCompat","description":"dev.tesserakt.sparql.runtime.compat.InnerFilterScopeCompat","location":"sparql/runtime/dev.tesserakt.sparql.runtime.compat/-inner-filter-scope-compat/index.html","searchKeys":["InnerFilterScopeCompat","object InnerFilterScopeCompat","dev.tesserakt.sparql.runtime.compat.InnerFilterScopeCompat"]},{"name":"object Iterator : Iterator<Nothing> ","description":"dev.tesserakt.sparql.runtime.stream.EmptyStream.Iterator","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-empty-stream/-iterator/index.html","searchKeys":["Iterator","object Iterator : Iterator<Nothing> ","dev.tesserakt.sparql.runtime.stream.EmptyStream.Iterator"]},{"name":"object RuntimeStatistics","description":"dev.tesserakt.sparql.runtime.RuntimeStatistics","location":"sparql/runtime/dev.tesserakt.sparql.runtime/-runtime-statistics/index.html","searchKeys":["RuntimeStatistics","object RuntimeStatistics","dev.tesserakt.sparql.runtime.RuntimeStatistics"]},{"name":"object Unbound : FilterExpression.OperationValue","description":"dev.tesserakt.sparql.runtime.query.FilterExpression.OperationValue.Unbound","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-filter-expression/-operation-value/-unbound/index.html","searchKeys":["Unbound","object Unbound : FilterExpression.OperationValue","dev.tesserakt.sparql.runtime.query.FilterExpression.OperationValue.Unbound"]},{"name":"open fun debugInformation(): String","description":"dev.tesserakt.sparql.runtime.query.JoinTree.debugInformation","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/debug-information.html","searchKeys":["debugInformation","open fun debugInformation(): String","dev.tesserakt.sparql.runtime.query.JoinTree.debugInformation"]},{"name":"open fun join(deltas: OptimisedStream<MappingDelta>): Stream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node.join","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/-dynamic/-node/join.html","searchKeys":["join","open fun join(deltas: OptimisedStream<MappingDelta>): Stream<MappingDelta>","dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node.join"]},{"name":"open fun peek(delta: DataDeletion): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.TriplePatternState.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-triple-pattern-state/peek.html","searchKeys":["peek","open fun peek(delta: DataDeletion): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.TriplePatternState.peek"]},{"name":"open operator override fun compareTo(other: Cardinality): Int","description":"dev.tesserakt.sparql.util.Cardinality.compareTo","location":"sparql/runtime/dev.tesserakt.sparql.util/-cardinality/compare-to.html","searchKeys":["compareTo","open operator override fun compareTo(other: Cardinality): Int","dev.tesserakt.sparql.util.Cardinality.compareTo"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"dev.tesserakt.sparql.runtime.evaluation.BindingIdentifierSet.equals","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-binding-identifier-set/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","dev.tesserakt.sparql.runtime.evaluation.BindingIdentifierSet.equals"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"dev.tesserakt.sparql.runtime.evaluation.BindingsImpl.equals","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-bindings-impl/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","dev.tesserakt.sparql.runtime.evaluation.BindingsImpl.equals"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"dev.tesserakt.sparql.runtime.query.FilterExpression.OperationValue.Unbound.equals","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-filter-expression/-operation-value/-unbound/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","dev.tesserakt.sparql.runtime.query.FilterExpression.OperationValue.Unbound.equals"]},{"name":"open operator override fun hasNext(): Boolean","description":"dev.tesserakt.sparql.runtime.evaluation.BindingIdentifierSet.IdIterator.hasNext","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-binding-identifier-set/-id-iterator/has-next.html","searchKeys":["hasNext","open operator override fun hasNext(): Boolean","dev.tesserakt.sparql.runtime.evaluation.BindingIdentifierSet.IdIterator.hasNext"]},{"name":"open operator override fun hasNext(): Boolean","description":"dev.tesserakt.sparql.runtime.stream.EmptyStream.Iterator.hasNext","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-empty-stream/-iterator/has-next.html","searchKeys":["hasNext","open operator override fun hasNext(): Boolean","dev.tesserakt.sparql.runtime.stream.EmptyStream.Iterator.hasNext"]},{"name":"open operator override fun hasNext(): Boolean","description":"dev.tesserakt.sparql.runtime.stream.StreamWithIndex.Iter.hasNext","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-with-index/-iter/has-next.html","searchKeys":["hasNext","open operator override fun hasNext(): Boolean","dev.tesserakt.sparql.runtime.stream.StreamWithIndex.Iter.hasNext"]},{"name":"open operator override fun iterator(): EmptyStream.Iterator","description":"dev.tesserakt.sparql.runtime.stream.EmptyStream.iterator","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-empty-stream/iterator.html","searchKeys":["iterator","open operator override fun iterator(): EmptyStream.Iterator","dev.tesserakt.sparql.runtime.stream.EmptyStream.iterator"]},{"name":"open operator override fun iterator(): Iterator<E>","description":"dev.tesserakt.sparql.runtime.stream.BufferedStream.iterator","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-buffered-stream/iterator.html","searchKeys":["iterator","open operator override fun iterator(): Iterator<E>","dev.tesserakt.sparql.runtime.stream.BufferedStream.iterator"]},{"name":"open operator override fun iterator(): Iterator<E>","description":"dev.tesserakt.sparql.runtime.stream.SingleStream.iterator","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-single-stream/iterator.html","searchKeys":["iterator","open operator override fun iterator(): Iterator<E>","dev.tesserakt.sparql.runtime.stream.SingleStream.iterator"]},{"name":"open operator override fun iterator(): Iterator<E>","description":"dev.tesserakt.sparql.runtime.stream.SingleUseStreamView.iterator","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-single-use-stream-view/iterator.html","searchKeys":["iterator","open operator override fun iterator(): Iterator<E>","dev.tesserakt.sparql.runtime.stream.SingleUseStreamView.iterator"]},{"name":"open operator override fun iterator(): Iterator<E>","description":"dev.tesserakt.sparql.runtime.stream.StreamChain.iterator","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-chain/iterator.html","searchKeys":["iterator","open operator override fun iterator(): Iterator<E>","dev.tesserakt.sparql.runtime.stream.StreamChain.iterator"]},{"name":"open operator override fun iterator(): Iterator<E>","description":"dev.tesserakt.sparql.runtime.stream.StreamReduction.iterator","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-reduction/iterator.html","searchKeys":["iterator","open operator override fun iterator(): Iterator<E>","dev.tesserakt.sparql.runtime.stream.StreamReduction.iterator"]},{"name":"open operator override fun iterator(): Iterator<I>","description":"dev.tesserakt.sparql.runtime.stream.StreamFilter.iterator","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-filter/iterator.html","searchKeys":["iterator","open operator override fun iterator(): Iterator<I>","dev.tesserakt.sparql.runtime.stream.StreamFilter.iterator"]},{"name":"open operator override fun iterator(): Iterator<Int>","description":"dev.tesserakt.sparql.util.Bitmask.iterator","location":"sparql/runtime/dev.tesserakt.sparql.util/-bitmask/iterator.html","searchKeys":["iterator","open operator override fun iterator(): Iterator<Int>","dev.tesserakt.sparql.util.Bitmask.iterator"]},{"name":"open operator override fun iterator(): Iterator<Map.Entry<T, Int>>","description":"dev.tesserakt.sparql.util.Counter.iterator","location":"sparql/runtime/dev.tesserakt.sparql.util/-counter/iterator.html","searchKeys":["iterator","open operator override fun iterator(): Iterator<Map.Entry<T, Int>>","dev.tesserakt.sparql.util.Counter.iterator"]},{"name":"open operator override fun iterator(): Iterator<Mapping>","description":"dev.tesserakt.sparql.runtime.stream.StreamMultiJoin.iterator","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-multi-join/iterator.html","searchKeys":["iterator","open operator override fun iterator(): Iterator<Mapping>","dev.tesserakt.sparql.runtime.stream.StreamMultiJoin.iterator"]},{"name":"open operator override fun iterator(): Iterator<Mapping>","description":"dev.tesserakt.sparql.runtime.stream.StreamSingleJoin.iterator","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-single-join/iterator.html","searchKeys":["iterator","open operator override fun iterator(): Iterator<Mapping>","dev.tesserakt.sparql.runtime.stream.StreamSingleJoin.iterator"]},{"name":"open operator override fun iterator(): Iterator<O>","description":"dev.tesserakt.sparql.runtime.stream.StreamMapping.iterator","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-mapping/iterator.html","searchKeys":["iterator","open operator override fun iterator(): Iterator<O>","dev.tesserakt.sparql.runtime.stream.StreamMapping.iterator"]},{"name":"open operator override fun iterator(): Iterator<O>","description":"dev.tesserakt.sparql.runtime.stream.StreamMappingNullable.iterator","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-mapping-nullable/iterator.html","searchKeys":["iterator","open operator override fun iterator(): Iterator<O>","dev.tesserakt.sparql.runtime.stream.StreamMappingNullable.iterator"]},{"name":"open operator override fun iterator(): Iterator<O>","description":"dev.tesserakt.sparql.runtime.stream.StreamTransform.iterator","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-transform/iterator.html","searchKeys":["iterator","open operator override fun iterator(): Iterator<O>","dev.tesserakt.sparql.runtime.stream.StreamTransform.iterator"]},{"name":"open operator override fun iterator(): Iterator<O>","description":"dev.tesserakt.sparql.runtime.stream.StreamTransformNullable.iterator","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-transform-nullable/iterator.html","searchKeys":["iterator","open operator override fun iterator(): Iterator<O>","dev.tesserakt.sparql.runtime.stream.StreamTransformNullable.iterator"]},{"name":"open operator override fun iterator(): Iterator<Pair<A, B>>","description":"dev.tesserakt.sparql.runtime.stream.StreamProduct.iterator","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-product/iterator.html","searchKeys":["iterator","open operator override fun iterator(): Iterator<Pair<A, B>>","dev.tesserakt.sparql.runtime.stream.StreamProduct.iterator"]},{"name":"open operator override fun iterator(): Iterator<Pair<Int, I>>","description":"dev.tesserakt.sparql.runtime.stream.StreamWithIndex.iterator","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-with-index/iterator.html","searchKeys":["iterator","open operator override fun iterator(): Iterator<Pair<Int, I>>","dev.tesserakt.sparql.runtime.stream.StreamWithIndex.iterator"]},{"name":"open operator override fun iterator(): Iterator<Pair<String, Quad.Term>>","description":"dev.tesserakt.sparql.runtime.evaluation.BindingsImpl.iterator","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-bindings-impl/iterator.html","searchKeys":["iterator","open operator override fun iterator(): Iterator<Pair<String, Quad.Term>>","dev.tesserakt.sparql.runtime.evaluation.BindingsImpl.iterator"]},{"name":"open operator override fun next(): BindingIdentifier","description":"dev.tesserakt.sparql.runtime.evaluation.BindingIdentifierSet.IdIterator.next","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-binding-identifier-set/-id-iterator/next.html","searchKeys":["next","open operator override fun next(): BindingIdentifier","dev.tesserakt.sparql.runtime.evaluation.BindingIdentifierSet.IdIterator.next"]},{"name":"open operator override fun next(): Nothing","description":"dev.tesserakt.sparql.runtime.stream.EmptyStream.Iterator.next","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-empty-stream/-iterator/next.html","searchKeys":["next","open operator override fun next(): Nothing","dev.tesserakt.sparql.runtime.stream.EmptyStream.Iterator.next"]},{"name":"open operator override fun next(): Pair<Int, I>","description":"dev.tesserakt.sparql.runtime.stream.StreamWithIndex.Iter.next","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-with-index/-iter/next.html","searchKeys":["next","open operator override fun next(): Pair<Int, I>","dev.tesserakt.sparql.runtime.stream.StreamWithIndex.Iter.next"]},{"name":"open override fun add(mapping: Mapping)","description":"dev.tesserakt.sparql.runtime.collection.MultiHashMappingArray.add","location":"sparql/runtime/dev.tesserakt.sparql.runtime.collection/-multi-hash-mapping-array/add.html","searchKeys":["add","open override fun add(mapping: Mapping)","dev.tesserakt.sparql.runtime.collection.MultiHashMappingArray.add"]},{"name":"open override fun add(mapping: Mapping)","description":"dev.tesserakt.sparql.runtime.collection.SimpleMappingArray.add","location":"sparql/runtime/dev.tesserakt.sparql.runtime.collection/-simple-mapping-array/add.html","searchKeys":["add","open override fun add(mapping: Mapping)","dev.tesserakt.sparql.runtime.collection.SimpleMappingArray.add"]},{"name":"open override fun addAll(mappings: Iterable<Mapping>)","description":"dev.tesserakt.sparql.runtime.collection.MultiHashMappingArray.addAll","location":"sparql/runtime/dev.tesserakt.sparql.runtime.collection/-multi-hash-mapping-array/add-all.html","searchKeys":["addAll","open override fun addAll(mappings: Iterable<Mapping>)","dev.tesserakt.sparql.runtime.collection.MultiHashMappingArray.addAll"]},{"name":"open override fun addAll(mappings: Iterable<Mapping>)","description":"dev.tesserakt.sparql.runtime.collection.SimpleMappingArray.addAll","location":"sparql/runtime/dev.tesserakt.sparql.runtime.collection/-simple-mapping-array/add-all.html","searchKeys":["addAll","open override fun addAll(mappings: Iterable<Mapping>)","dev.tesserakt.sparql.runtime.collection.SimpleMappingArray.addAll"]},{"name":"open override fun debugInformation(): String","description":"dev.tesserakt.sparql.runtime.query.ExclusionFilterState.Broad.debugInformation","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-exclusion-filter-state/-broad/debug-information.html","searchKeys":["debugInformation","open override fun debugInformation(): String","dev.tesserakt.sparql.runtime.query.ExclusionFilterState.Broad.debugInformation"]},{"name":"open override fun debugInformation(): String","description":"dev.tesserakt.sparql.runtime.query.ExclusionFilterState.Narrow.debugInformation","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-exclusion-filter-state/-narrow/debug-information.html","searchKeys":["debugInformation","open override fun debugInformation(): String","dev.tesserakt.sparql.runtime.query.ExclusionFilterState.Narrow.debugInformation"]},{"name":"open override fun debugInformation(): String","description":"dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateful.MultiFilter.debugInformation","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-graph-pattern-filter-state/-stateful/-multi-filter/debug-information.html","searchKeys":["debugInformation","open override fun debugInformation(): String","dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateful.MultiFilter.debugInformation"]},{"name":"open override fun debugInformation(): String","description":"dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateful.SingleFilter.debugInformation","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-graph-pattern-filter-state/-stateful/-single-filter/debug-information.html","searchKeys":["debugInformation","open override fun debugInformation(): String","dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateful.SingleFilter.debugInformation"]},{"name":"open override fun debugInformation(): String","description":"dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateful.Unfiltered.debugInformation","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-graph-pattern-filter-state/-stateful/-unfiltered/debug-information.html","searchKeys":["debugInformation","open override fun debugInformation(): String","dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateful.Unfiltered.debugInformation"]},{"name":"open override fun debugInformation(): String","description":"dev.tesserakt.sparql.runtime.query.InclusionFilterState.Broad.debugInformation","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-inclusion-filter-state/-broad/debug-information.html","searchKeys":["debugInformation","open override fun debugInformation(): String","dev.tesserakt.sparql.runtime.query.InclusionFilterState.Broad.debugInformation"]},{"name":"open override fun debugInformation(): String","description":"dev.tesserakt.sparql.runtime.query.InclusionFilterState.Narrow.debugInformation","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-inclusion-filter-state/-narrow/debug-information.html","searchKeys":["debugInformation","open override fun debugInformation(): String","dev.tesserakt.sparql.runtime.query.InclusionFilterState.Narrow.debugInformation"]},{"name":"open override fun debugInformation(): String","description":"dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node.Connected.debugInformation","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/-dynamic/-node/-connected/debug-information.html","searchKeys":["debugInformation","open override fun debugInformation(): String","dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node.Connected.debugInformation"]},{"name":"open override fun debugInformation(): String","description":"dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node.Disconnected.debugInformation","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/-dynamic/-node/-disconnected/debug-information.html","searchKeys":["debugInformation","open override fun debugInformation(): String","dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node.Disconnected.debugInformation"]},{"name":"open override fun debugInformation(): String","description":"dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node.Leaf.debugInformation","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/-dynamic/-node/-leaf/debug-information.html","searchKeys":["debugInformation","open override fun debugInformation(): String","dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node.Leaf.debugInformation"]},{"name":"open override fun debugInformation(): String","description":"dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.debugInformation","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/-dynamic/debug-information.html","searchKeys":["debugInformation","open override fun debugInformation(): String","dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.debugInformation"]},{"name":"open override fun debugInformation(): String","description":"dev.tesserakt.sparql.runtime.query.JoinTree.None.debugInformation","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/-none/debug-information.html","searchKeys":["debugInformation","open override fun debugInformation(): String","dev.tesserakt.sparql.runtime.query.JoinTree.None.debugInformation"]},{"name":"open override fun eval(input: FilterExpression.OperationValue): FilterExpression.OperationValue","description":"dev.tesserakt.sparql.runtime.query.FilterExpression.ComparisonEval.EQ.eval","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-filter-expression/-comparison-eval/-e-q/eval.html","searchKeys":["eval","open override fun eval(input: FilterExpression.OperationValue): FilterExpression.OperationValue","dev.tesserakt.sparql.runtime.query.FilterExpression.ComparisonEval.EQ.eval"]},{"name":"open override fun eval(input: FilterExpression.OperationValue): FilterExpression.OperationValue","description":"dev.tesserakt.sparql.runtime.query.FilterExpression.ComparisonEval.GT.eval","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-filter-expression/-comparison-eval/-g-t/eval.html","searchKeys":["eval","open override fun eval(input: FilterExpression.OperationValue): FilterExpression.OperationValue","dev.tesserakt.sparql.runtime.query.FilterExpression.ComparisonEval.GT.eval"]},{"name":"open override fun eval(input: FilterExpression.OperationValue): FilterExpression.OperationValue","description":"dev.tesserakt.sparql.runtime.query.FilterExpression.ComparisonEval.GTEQ.eval","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-filter-expression/-comparison-eval/-g-t-e-q/eval.html","searchKeys":["eval","open override fun eval(input: FilterExpression.OperationValue): FilterExpression.OperationValue","dev.tesserakt.sparql.runtime.query.FilterExpression.ComparisonEval.GTEQ.eval"]},{"name":"open override fun eval(input: FilterExpression.OperationValue): FilterExpression.OperationValue","description":"dev.tesserakt.sparql.runtime.query.FilterExpression.ComparisonEval.LT.eval","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-filter-expression/-comparison-eval/-l-t/eval.html","searchKeys":["eval","open override fun eval(input: FilterExpression.OperationValue): FilterExpression.OperationValue","dev.tesserakt.sparql.runtime.query.FilterExpression.ComparisonEval.LT.eval"]},{"name":"open override fun eval(input: FilterExpression.OperationValue): FilterExpression.OperationValue","description":"dev.tesserakt.sparql.runtime.query.FilterExpression.ComparisonEval.LTEQ.eval","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-filter-expression/-comparison-eval/-l-t-e-q/eval.html","searchKeys":["eval","open override fun eval(input: FilterExpression.OperationValue): FilterExpression.OperationValue","dev.tesserakt.sparql.runtime.query.FilterExpression.ComparisonEval.LTEQ.eval"]},{"name":"open override fun eval(input: FilterExpression.OperationValue): FilterExpression.OperationValue","description":"dev.tesserakt.sparql.runtime.query.FilterExpression.ComparisonEval.NEQ.eval","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-filter-expression/-comparison-eval/-n-e-q/eval.html","searchKeys":["eval","open override fun eval(input: FilterExpression.OperationValue): FilterExpression.OperationValue","dev.tesserakt.sparql.runtime.query.FilterExpression.ComparisonEval.NEQ.eval"]},{"name":"open override fun eval(lhs: Double, rhs: Double): Double","description":"dev.tesserakt.sparql.runtime.query.FilterExpression.MathOpEval.Div.eval","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-filter-expression/-math-op-eval/-div/eval.html","searchKeys":["eval","open override fun eval(lhs: Double, rhs: Double): Double","dev.tesserakt.sparql.runtime.query.FilterExpression.MathOpEval.Div.eval"]},{"name":"open override fun eval(lhs: Double, rhs: Double): Double","description":"dev.tesserakt.sparql.runtime.query.FilterExpression.MathOpEval.Mul.eval","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-filter-expression/-math-op-eval/-mul/eval.html","searchKeys":["eval","open override fun eval(lhs: Double, rhs: Double): Double","dev.tesserakt.sparql.runtime.query.FilterExpression.MathOpEval.Mul.eval"]},{"name":"open override fun eval(lhs: Double, rhs: Double): Double","description":"dev.tesserakt.sparql.runtime.query.FilterExpression.MathOpEval.Sub.eval","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-filter-expression/-math-op-eval/-sub/eval.html","searchKeys":["eval","open override fun eval(lhs: Double, rhs: Double): Double","dev.tesserakt.sparql.runtime.query.FilterExpression.MathOpEval.Sub.eval"]},{"name":"open override fun eval(lhs: Double, rhs: Double): Double","description":"dev.tesserakt.sparql.runtime.query.FilterExpression.MathOpEval.Sum.eval","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-filter-expression/-math-op-eval/-sum/eval.html","searchKeys":["eval","open override fun eval(lhs: Double, rhs: Double): Double","dev.tesserakt.sparql.runtime.query.FilterExpression.MathOpEval.Sum.eval"]},{"name":"open override fun filter(input: Stream<MappingDelta>): Stream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.ExclusionFilterState.Broad.filter","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-exclusion-filter-state/-broad/filter.html","searchKeys":["filter","open override fun filter(input: Stream<MappingDelta>): Stream<MappingDelta>","dev.tesserakt.sparql.runtime.query.ExclusionFilterState.Broad.filter"]},{"name":"open override fun filter(input: Stream<MappingDelta>): Stream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.ExclusionFilterState.Narrow.filter","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-exclusion-filter-state/-narrow/filter.html","searchKeys":["filter","open override fun filter(input: Stream<MappingDelta>): Stream<MappingDelta>","dev.tesserakt.sparql.runtime.query.ExclusionFilterState.Narrow.filter"]},{"name":"open override fun filter(input: Stream<MappingDelta>): Stream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.ExpressionFilter.filter","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-expression-filter/filter.html","searchKeys":["filter","open override fun filter(input: Stream<MappingDelta>): Stream<MappingDelta>","dev.tesserakt.sparql.runtime.query.ExpressionFilter.filter"]},{"name":"open override fun filter(input: Stream<MappingDelta>): Stream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateful.MultiFilter.filter","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-graph-pattern-filter-state/-stateful/-multi-filter/filter.html","searchKeys":["filter","open override fun filter(input: Stream<MappingDelta>): Stream<MappingDelta>","dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateful.MultiFilter.filter"]},{"name":"open override fun filter(input: Stream<MappingDelta>): Stream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateful.SingleFilter.filter","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-graph-pattern-filter-state/-stateful/-single-filter/filter.html","searchKeys":["filter","open override fun filter(input: Stream<MappingDelta>): Stream<MappingDelta>","dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateful.SingleFilter.filter"]},{"name":"open override fun filter(input: Stream<MappingDelta>): Stream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateful.Unfiltered.filter","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-graph-pattern-filter-state/-stateful/-unfiltered/filter.html","searchKeys":["filter","open override fun filter(input: Stream<MappingDelta>): Stream<MappingDelta>","dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateful.Unfiltered.filter"]},{"name":"open override fun filter(input: Stream<MappingDelta>): Stream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateless.MultiFilter.filter","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-graph-pattern-filter-state/-stateless/-multi-filter/filter.html","searchKeys":["filter","open override fun filter(input: Stream<MappingDelta>): Stream<MappingDelta>","dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateless.MultiFilter.filter"]},{"name":"open override fun filter(input: Stream<MappingDelta>): Stream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateless.SingleFilter.filter","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-graph-pattern-filter-state/-stateless/-single-filter/filter.html","searchKeys":["filter","open override fun filter(input: Stream<MappingDelta>): Stream<MappingDelta>","dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateless.SingleFilter.filter"]},{"name":"open override fun filter(input: Stream<MappingDelta>): Stream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateless.Unfiltered.filter","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-graph-pattern-filter-state/-stateless/-unfiltered/filter.html","searchKeys":["filter","open override fun filter(input: Stream<MappingDelta>): Stream<MappingDelta>","dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateless.Unfiltered.filter"]},{"name":"open override fun filter(input: Stream<MappingDelta>): Stream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.InclusionFilterState.Broad.filter","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-inclusion-filter-state/-broad/filter.html","searchKeys":["filter","open override fun filter(input: Stream<MappingDelta>): Stream<MappingDelta>","dev.tesserakt.sparql.runtime.query.InclusionFilterState.Broad.filter"]},{"name":"open override fun filter(input: Stream<MappingDelta>): Stream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.InclusionFilterState.Narrow.filter","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-inclusion-filter-state/-narrow/filter.html","searchKeys":["filter","open override fun filter(input: Stream<MappingDelta>): Stream<MappingDelta>","dev.tesserakt.sparql.runtime.query.InclusionFilterState.Narrow.filter"]},{"name":"open override fun filter(input: Stream<MappingDelta>, delta: DataDelta): Stream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.ExclusionFilterState.Broad.filter","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-exclusion-filter-state/-broad/filter.html","searchKeys":["filter","open override fun filter(input: Stream<MappingDelta>, delta: DataDelta): Stream<MappingDelta>","dev.tesserakt.sparql.runtime.query.ExclusionFilterState.Broad.filter"]},{"name":"open override fun filter(input: Stream<MappingDelta>, delta: DataDelta): Stream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.ExclusionFilterState.Narrow.filter","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-exclusion-filter-state/-narrow/filter.html","searchKeys":["filter","open override fun filter(input: Stream<MappingDelta>, delta: DataDelta): Stream<MappingDelta>","dev.tesserakt.sparql.runtime.query.ExclusionFilterState.Narrow.filter"]},{"name":"open override fun filter(input: Stream<MappingDelta>, delta: DataDelta): Stream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateful.MultiFilter.filter","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-graph-pattern-filter-state/-stateful/-multi-filter/filter.html","searchKeys":["filter","open override fun filter(input: Stream<MappingDelta>, delta: DataDelta): Stream<MappingDelta>","dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateful.MultiFilter.filter"]},{"name":"open override fun filter(input: Stream<MappingDelta>, delta: DataDelta): Stream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateful.SingleFilter.filter","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-graph-pattern-filter-state/-stateful/-single-filter/filter.html","searchKeys":["filter","open override fun filter(input: Stream<MappingDelta>, delta: DataDelta): Stream<MappingDelta>","dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateful.SingleFilter.filter"]},{"name":"open override fun filter(input: Stream<MappingDelta>, delta: DataDelta): Stream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateful.Unfiltered.filter","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-graph-pattern-filter-state/-stateful/-unfiltered/filter.html","searchKeys":["filter","open override fun filter(input: Stream<MappingDelta>, delta: DataDelta): Stream<MappingDelta>","dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateful.Unfiltered.filter"]},{"name":"open override fun filter(input: Stream<MappingDelta>, delta: DataDelta): Stream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.InclusionFilterState.Broad.filter","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-inclusion-filter-state/-broad/filter.html","searchKeys":["filter","open override fun filter(input: Stream<MappingDelta>, delta: DataDelta): Stream<MappingDelta>","dev.tesserakt.sparql.runtime.query.InclusionFilterState.Broad.filter"]},{"name":"open override fun filter(input: Stream<MappingDelta>, delta: DataDelta): Stream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.InclusionFilterState.Narrow.filter","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-inclusion-filter-state/-narrow/filter.html","searchKeys":["filter","open override fun filter(input: Stream<MappingDelta>, delta: DataDelta): Stream<MappingDelta>","dev.tesserakt.sparql.runtime.query.InclusionFilterState.Narrow.filter"]},{"name":"open override fun hashCode(): Int","description":"dev.tesserakt.sparql.runtime.evaluation.BindingIdentifierSet.hashCode","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-binding-identifier-set/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","dev.tesserakt.sparql.runtime.evaluation.BindingIdentifierSet.hashCode"]},{"name":"open override fun hashCode(): Int","description":"dev.tesserakt.sparql.runtime.evaluation.BindingsImpl.hashCode","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-bindings-impl/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","dev.tesserakt.sparql.runtime.evaluation.BindingsImpl.hashCode"]},{"name":"open override fun iter(mapping: Mapping): CollectedStream<Mapping>","description":"dev.tesserakt.sparql.runtime.collection.SimpleMappingArray.iter","location":"sparql/runtime/dev.tesserakt.sparql.runtime.collection/-simple-mapping-array/iter.html","searchKeys":["iter","open override fun iter(mapping: Mapping): CollectedStream<Mapping>","dev.tesserakt.sparql.runtime.collection.SimpleMappingArray.iter"]},{"name":"open override fun iter(mapping: Mapping): OptimisedStream<Mapping>","description":"dev.tesserakt.sparql.runtime.collection.MultiHashMappingArray.iter","location":"sparql/runtime/dev.tesserakt.sparql.runtime.collection/-multi-hash-mapping-array/iter.html","searchKeys":["iter","open override fun iter(mapping: Mapping): OptimisedStream<Mapping>","dev.tesserakt.sparql.runtime.collection.MultiHashMappingArray.iter"]},{"name":"open override fun iter(mappings: List<Mapping>): List<CollectedStream<Mapping>>","description":"dev.tesserakt.sparql.runtime.collection.SimpleMappingArray.iter","location":"sparql/runtime/dev.tesserakt.sparql.runtime.collection/-simple-mapping-array/iter.html","searchKeys":["iter","open override fun iter(mappings: List<Mapping>): List<CollectedStream<Mapping>>","dev.tesserakt.sparql.runtime.collection.SimpleMappingArray.iter"]},{"name":"open override fun iter(mappings: List<Mapping>): List<OptimisedStream<Mapping>>","description":"dev.tesserakt.sparql.runtime.collection.MultiHashMappingArray.iter","location":"sparql/runtime/dev.tesserakt.sparql.runtime.collection/-multi-hash-mapping-array/iter.html","searchKeys":["iter","open override fun iter(mappings: List<Mapping>): List<OptimisedStream<Mapping>>","dev.tesserakt.sparql.runtime.collection.MultiHashMappingArray.iter"]},{"name":"open override fun join(delta: MappingDelta): Stream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.GroupPatternState.join","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-group-pattern-state/join.html","searchKeys":["join","open override fun join(delta: MappingDelta): Stream<MappingDelta>","dev.tesserakt.sparql.runtime.query.GroupPatternState.join"]},{"name":"open override fun join(delta: MappingDelta): Stream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node.Connected.join","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/-dynamic/-node/-connected/join.html","searchKeys":["join","open override fun join(delta: MappingDelta): Stream<MappingDelta>","dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node.Connected.join"]},{"name":"open override fun join(delta: MappingDelta): Stream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node.Disconnected.join","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/-dynamic/-node/-disconnected/join.html","searchKeys":["join","open override fun join(delta: MappingDelta): Stream<MappingDelta>","dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node.Disconnected.join"]},{"name":"open override fun join(delta: MappingDelta): Stream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node.Leaf.join","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/-dynamic/-node/-leaf/join.html","searchKeys":["join","open override fun join(delta: MappingDelta): Stream<MappingDelta>","dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node.Leaf.join"]},{"name":"open override fun join(delta: MappingDelta): Stream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.join","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/-dynamic/join.html","searchKeys":["join","open override fun join(delta: MappingDelta): Stream<MappingDelta>","dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.join"]},{"name":"open override fun join(delta: MappingDelta): Stream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.JoinTree.Empty.join","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/-empty/join.html","searchKeys":["join","open override fun join(delta: MappingDelta): Stream<MappingDelta>","dev.tesserakt.sparql.runtime.query.JoinTree.Empty.join"]},{"name":"open override fun join(delta: MappingDelta): Stream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.JoinTree.None.join","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/-none/join.html","searchKeys":["join","open override fun join(delta: MappingDelta): Stream<MappingDelta>","dev.tesserakt.sparql.runtime.query.JoinTree.None.join"]},{"name":"open override fun join(delta: MappingDelta): Stream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.TriplePatternState.AltPatternState.join","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-triple-pattern-state/-alt-pattern-state/join.html","searchKeys":["join","open override fun join(delta: MappingDelta): Stream<MappingDelta>","dev.tesserakt.sparql.runtime.query.TriplePatternState.AltPatternState.join"]},{"name":"open override fun join(delta: MappingDelta): Stream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.TriplePatternState.RepeatingPatternState.join","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-triple-pattern-state/-repeating-pattern-state/join.html","searchKeys":["join","open override fun join(delta: MappingDelta): Stream<MappingDelta>","dev.tesserakt.sparql.runtime.query.TriplePatternState.RepeatingPatternState.join"]},{"name":"open override fun join(delta: MappingDelta): Stream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.TriplePatternState.SequencePatternState.join","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-triple-pattern-state/-sequence-pattern-state/join.html","searchKeys":["join","open override fun join(delta: MappingDelta): Stream<MappingDelta>","dev.tesserakt.sparql.runtime.query.TriplePatternState.SequencePatternState.join"]},{"name":"open override fun join(delta: MappingDelta): Stream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.TriplePatternState.SimpleAltPatternState.join","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-triple-pattern-state/-simple-alt-pattern-state/join.html","searchKeys":["join","open override fun join(delta: MappingDelta): Stream<MappingDelta>","dev.tesserakt.sparql.runtime.query.TriplePatternState.SimpleAltPatternState.join"]},{"name":"open override fun join(delta: MappingDelta): Stream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.TriplePatternState.UnboundedSequencePatternState.join","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-triple-pattern-state/-unbounded-sequence-pattern-state/join.html","searchKeys":["join","open override fun join(delta: MappingDelta): Stream<MappingDelta>","dev.tesserakt.sparql.runtime.query.TriplePatternState.UnboundedSequencePatternState.join"]},{"name":"open override fun join(delta: MappingDelta): Stream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.UnionState.join","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-union-state/join.html","searchKeys":["join","open override fun join(delta: MappingDelta): Stream<MappingDelta>","dev.tesserakt.sparql.runtime.query.UnionState.join"]},{"name":"open override fun join(mappings: OptimisedStream<Mapping>): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulBindingExact.join","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateful-binding-exact/join.html","searchKeys":["join","open override fun join(mappings: OptimisedStream<Mapping>): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulBindingExact.join"]},{"name":"open override fun join(mappings: OptimisedStream<Mapping>): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulBindings.join","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateful-bindings/join.html","searchKeys":["join","open override fun join(mappings: OptimisedStream<Mapping>): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulBindings.join"]},{"name":"open override fun join(mappings: OptimisedStream<Mapping>): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulExact.join","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateful-exact/join.html","searchKeys":["join","open override fun join(mappings: OptimisedStream<Mapping>): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulExact.join"]},{"name":"open override fun join(mappings: OptimisedStream<Mapping>): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulExactBinding.join","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateful-exact-binding/join.html","searchKeys":["join","open override fun join(mappings: OptimisedStream<Mapping>): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulExactBinding.join"]},{"name":"open override fun join(mappings: OptimisedStream<Mapping>): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessBindingExact.join","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateless-binding-exact/join.html","searchKeys":["join","open override fun join(mappings: OptimisedStream<Mapping>): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessBindingExact.join"]},{"name":"open override fun join(mappings: OptimisedStream<Mapping>): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessBindings.join","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateless-bindings/join.html","searchKeys":["join","open override fun join(mappings: OptimisedStream<Mapping>): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessBindings.join"]},{"name":"open override fun join(mappings: OptimisedStream<Mapping>): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessExact.join","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateless-exact/join.html","searchKeys":["join","open override fun join(mappings: OptimisedStream<Mapping>): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessExact.join"]},{"name":"open override fun join(mappings: OptimisedStream<Mapping>): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessExactBinding.join","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateless-exact-binding/join.html","searchKeys":["join","open override fun join(mappings: OptimisedStream<Mapping>): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessExactBinding.join"]},{"name":"open override fun join(mappings: OptimisedStream<Mapping>): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulBindingExact.join","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateful-binding-exact/join.html","searchKeys":["join","open override fun join(mappings: OptimisedStream<Mapping>): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulBindingExact.join"]},{"name":"open override fun join(mappings: OptimisedStream<Mapping>): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulBindings.join","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateful-bindings/join.html","searchKeys":["join","open override fun join(mappings: OptimisedStream<Mapping>): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulBindings.join"]},{"name":"open override fun join(mappings: OptimisedStream<Mapping>): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulExact.join","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateful-exact/join.html","searchKeys":["join","open override fun join(mappings: OptimisedStream<Mapping>): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulExact.join"]},{"name":"open override fun join(mappings: OptimisedStream<Mapping>): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulExactBinding.join","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateful-exact-binding/join.html","searchKeys":["join","open override fun join(mappings: OptimisedStream<Mapping>): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulExactBinding.join"]},{"name":"open override fun join(mappings: OptimisedStream<Mapping>): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessBindingExact.join","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateless-binding-exact/join.html","searchKeys":["join","open override fun join(mappings: OptimisedStream<Mapping>): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessBindingExact.join"]},{"name":"open override fun join(mappings: OptimisedStream<Mapping>): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessBindings.join","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateless-bindings/join.html","searchKeys":["join","open override fun join(mappings: OptimisedStream<Mapping>): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessBindings.join"]},{"name":"open override fun join(mappings: OptimisedStream<Mapping>): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessExact.join","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateless-exact/join.html","searchKeys":["join","open override fun join(mappings: OptimisedStream<Mapping>): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessExact.join"]},{"name":"open override fun join(mappings: OptimisedStream<Mapping>): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessExactBinding.join","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateless-exact-binding/join.html","searchKeys":["join","open override fun join(mappings: OptimisedStream<Mapping>): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessExactBinding.join"]},{"name":"open override fun join(mappings: OptimisedStream<Mapping>, ignore: Iterable<Mapping>): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulBindingExact.join","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateful-binding-exact/join.html","searchKeys":["join","open override fun join(mappings: OptimisedStream<Mapping>, ignore: Iterable<Mapping>): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulBindingExact.join"]},{"name":"open override fun join(mappings: OptimisedStream<Mapping>, ignore: Iterable<Mapping>): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulBindings.join","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateful-bindings/join.html","searchKeys":["join","open override fun join(mappings: OptimisedStream<Mapping>, ignore: Iterable<Mapping>): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulBindings.join"]},{"name":"open override fun join(mappings: OptimisedStream<Mapping>, ignore: Iterable<Mapping>): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulExact.join","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateful-exact/join.html","searchKeys":["join","open override fun join(mappings: OptimisedStream<Mapping>, ignore: Iterable<Mapping>): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulExact.join"]},{"name":"open override fun join(mappings: OptimisedStream<Mapping>, ignore: Iterable<Mapping>): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulExactBinding.join","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateful-exact-binding/join.html","searchKeys":["join","open override fun join(mappings: OptimisedStream<Mapping>, ignore: Iterable<Mapping>): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulExactBinding.join"]},{"name":"open override fun join(mappings: OptimisedStream<Mapping>, ignore: Iterable<Mapping>): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessBindingExact.join","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateless-binding-exact/join.html","searchKeys":["join","open override fun join(mappings: OptimisedStream<Mapping>, ignore: Iterable<Mapping>): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessBindingExact.join"]},{"name":"open override fun join(mappings: OptimisedStream<Mapping>, ignore: Iterable<Mapping>): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessBindings.join","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateless-bindings/join.html","searchKeys":["join","open override fun join(mappings: OptimisedStream<Mapping>, ignore: Iterable<Mapping>): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessBindings.join"]},{"name":"open override fun join(mappings: OptimisedStream<Mapping>, ignore: Iterable<Mapping>): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessExact.join","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateless-exact/join.html","searchKeys":["join","open override fun join(mappings: OptimisedStream<Mapping>, ignore: Iterable<Mapping>): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessExact.join"]},{"name":"open override fun join(mappings: OptimisedStream<Mapping>, ignore: Iterable<Mapping>): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessExactBinding.join","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateless-exact-binding/join.html","searchKeys":["join","open override fun join(mappings: OptimisedStream<Mapping>, ignore: Iterable<Mapping>): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessExactBinding.join"]},{"name":"open override fun join(mappings: OptimisedStream<Mapping>, ignore: Iterable<Mapping>): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulBindingExact.join","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateful-binding-exact/join.html","searchKeys":["join","open override fun join(mappings: OptimisedStream<Mapping>, ignore: Iterable<Mapping>): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulBindingExact.join"]},{"name":"open override fun join(mappings: OptimisedStream<Mapping>, ignore: Iterable<Mapping>): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulBindings.join","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateful-bindings/join.html","searchKeys":["join","open override fun join(mappings: OptimisedStream<Mapping>, ignore: Iterable<Mapping>): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulBindings.join"]},{"name":"open override fun join(mappings: OptimisedStream<Mapping>, ignore: Iterable<Mapping>): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulExact.join","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateful-exact/join.html","searchKeys":["join","open override fun join(mappings: OptimisedStream<Mapping>, ignore: Iterable<Mapping>): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulExact.join"]},{"name":"open override fun join(mappings: OptimisedStream<Mapping>, ignore: Iterable<Mapping>): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulExactBinding.join","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateful-exact-binding/join.html","searchKeys":["join","open override fun join(mappings: OptimisedStream<Mapping>, ignore: Iterable<Mapping>): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulExactBinding.join"]},{"name":"open override fun join(mappings: OptimisedStream<Mapping>, ignore: Iterable<Mapping>): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessBindingExact.join","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateless-binding-exact/join.html","searchKeys":["join","open override fun join(mappings: OptimisedStream<Mapping>, ignore: Iterable<Mapping>): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessBindingExact.join"]},{"name":"open override fun join(mappings: OptimisedStream<Mapping>, ignore: Iterable<Mapping>): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessBindings.join","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateless-bindings/join.html","searchKeys":["join","open override fun join(mappings: OptimisedStream<Mapping>, ignore: Iterable<Mapping>): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessBindings.join"]},{"name":"open override fun join(mappings: OptimisedStream<Mapping>, ignore: Iterable<Mapping>): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessExact.join","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateless-exact/join.html","searchKeys":["join","open override fun join(mappings: OptimisedStream<Mapping>, ignore: Iterable<Mapping>): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessExact.join"]},{"name":"open override fun join(mappings: OptimisedStream<Mapping>, ignore: Iterable<Mapping>): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessExactBinding.join","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateless-exact-binding/join.html","searchKeys":["join","open override fun join(mappings: OptimisedStream<Mapping>, ignore: Iterable<Mapping>): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessExactBinding.join"]},{"name":"open override fun peek(addition: DataAddition): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulBindingExact.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateful-binding-exact/peek.html","searchKeys":["peek","open override fun peek(addition: DataAddition): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulBindingExact.peek"]},{"name":"open override fun peek(addition: DataAddition): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulBindings.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateful-bindings/peek.html","searchKeys":["peek","open override fun peek(addition: DataAddition): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulBindings.peek"]},{"name":"open override fun peek(addition: DataAddition): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulExact.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateful-exact/peek.html","searchKeys":["peek","open override fun peek(addition: DataAddition): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulExact.peek"]},{"name":"open override fun peek(addition: DataAddition): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulExactBinding.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateful-exact-binding/peek.html","searchKeys":["peek","open override fun peek(addition: DataAddition): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulExactBinding.peek"]},{"name":"open override fun peek(addition: DataAddition): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessBindingExact.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateless-binding-exact/peek.html","searchKeys":["peek","open override fun peek(addition: DataAddition): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessBindingExact.peek"]},{"name":"open override fun peek(addition: DataAddition): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessBindings.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateless-bindings/peek.html","searchKeys":["peek","open override fun peek(addition: DataAddition): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessBindings.peek"]},{"name":"open override fun peek(addition: DataAddition): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessExact.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateless-exact/peek.html","searchKeys":["peek","open override fun peek(addition: DataAddition): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessExact.peek"]},{"name":"open override fun peek(addition: DataAddition): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessExactBinding.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateless-exact-binding/peek.html","searchKeys":["peek","open override fun peek(addition: DataAddition): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessExactBinding.peek"]},{"name":"open override fun peek(addition: DataAddition): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulBindingExact.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateful-binding-exact/peek.html","searchKeys":["peek","open override fun peek(addition: DataAddition): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulBindingExact.peek"]},{"name":"open override fun peek(addition: DataAddition): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulBindings.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateful-bindings/peek.html","searchKeys":["peek","open override fun peek(addition: DataAddition): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulBindings.peek"]},{"name":"open override fun peek(addition: DataAddition): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulExact.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateful-exact/peek.html","searchKeys":["peek","open override fun peek(addition: DataAddition): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulExact.peek"]},{"name":"open override fun peek(addition: DataAddition): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulExactBinding.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateful-exact-binding/peek.html","searchKeys":["peek","open override fun peek(addition: DataAddition): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulExactBinding.peek"]},{"name":"open override fun peek(addition: DataAddition): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessBindingExact.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateless-binding-exact/peek.html","searchKeys":["peek","open override fun peek(addition: DataAddition): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessBindingExact.peek"]},{"name":"open override fun peek(addition: DataAddition): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessBindings.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateless-bindings/peek.html","searchKeys":["peek","open override fun peek(addition: DataAddition): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessBindings.peek"]},{"name":"open override fun peek(addition: DataAddition): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessExact.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateless-exact/peek.html","searchKeys":["peek","open override fun peek(addition: DataAddition): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessExact.peek"]},{"name":"open override fun peek(addition: DataAddition): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessExactBinding.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateless-exact-binding/peek.html","searchKeys":["peek","open override fun peek(addition: DataAddition): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessExactBinding.peek"]},{"name":"open override fun peek(deletion: DataDeletion): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulBindingExact.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateful-binding-exact/peek.html","searchKeys":["peek","open override fun peek(deletion: DataDeletion): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulBindingExact.peek"]},{"name":"open override fun peek(deletion: DataDeletion): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulBindings.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateful-bindings/peek.html","searchKeys":["peek","open override fun peek(deletion: DataDeletion): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulBindings.peek"]},{"name":"open override fun peek(deletion: DataDeletion): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulExact.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateful-exact/peek.html","searchKeys":["peek","open override fun peek(deletion: DataDeletion): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulExact.peek"]},{"name":"open override fun peek(deletion: DataDeletion): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulExactBinding.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateful-exact-binding/peek.html","searchKeys":["peek","open override fun peek(deletion: DataDeletion): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulExactBinding.peek"]},{"name":"open override fun peek(deletion: DataDeletion): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessBindingExact.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateless-binding-exact/peek.html","searchKeys":["peek","open override fun peek(deletion: DataDeletion): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessBindingExact.peek"]},{"name":"open override fun peek(deletion: DataDeletion): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessBindings.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateless-bindings/peek.html","searchKeys":["peek","open override fun peek(deletion: DataDeletion): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessBindings.peek"]},{"name":"open override fun peek(deletion: DataDeletion): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessExact.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateless-exact/peek.html","searchKeys":["peek","open override fun peek(deletion: DataDeletion): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessExact.peek"]},{"name":"open override fun peek(deletion: DataDeletion): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessExactBinding.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateless-exact-binding/peek.html","searchKeys":["peek","open override fun peek(deletion: DataDeletion): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessExactBinding.peek"]},{"name":"open override fun peek(deletion: DataDeletion): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulBindingExact.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateful-binding-exact/peek.html","searchKeys":["peek","open override fun peek(deletion: DataDeletion): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulBindingExact.peek"]},{"name":"open override fun peek(deletion: DataDeletion): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulBindings.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateful-bindings/peek.html","searchKeys":["peek","open override fun peek(deletion: DataDeletion): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulBindings.peek"]},{"name":"open override fun peek(deletion: DataDeletion): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulExact.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateful-exact/peek.html","searchKeys":["peek","open override fun peek(deletion: DataDeletion): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulExact.peek"]},{"name":"open override fun peek(deletion: DataDeletion): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulExactBinding.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateful-exact-binding/peek.html","searchKeys":["peek","open override fun peek(deletion: DataDeletion): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulExactBinding.peek"]},{"name":"open override fun peek(deletion: DataDeletion): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessBindingExact.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateless-binding-exact/peek.html","searchKeys":["peek","open override fun peek(deletion: DataDeletion): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessBindingExact.peek"]},{"name":"open override fun peek(deletion: DataDeletion): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessBindings.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateless-bindings/peek.html","searchKeys":["peek","open override fun peek(deletion: DataDeletion): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessBindings.peek"]},{"name":"open override fun peek(deletion: DataDeletion): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessExact.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateless-exact/peek.html","searchKeys":["peek","open override fun peek(deletion: DataDeletion): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessExact.peek"]},{"name":"open override fun peek(deletion: DataDeletion): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessExactBinding.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateless-exact-binding/peek.html","searchKeys":["peek","open override fun peek(deletion: DataDeletion): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessExactBinding.peek"]},{"name":"open override fun peek(delta: DataAddition): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.TriplePatternState.AltPatternState.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-triple-pattern-state/-alt-pattern-state/peek.html","searchKeys":["peek","open override fun peek(delta: DataAddition): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.TriplePatternState.AltPatternState.peek"]},{"name":"open override fun peek(delta: DataAddition): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.TriplePatternState.RepeatingPatternState.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-triple-pattern-state/-repeating-pattern-state/peek.html","searchKeys":["peek","open override fun peek(delta: DataAddition): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.TriplePatternState.RepeatingPatternState.peek"]},{"name":"open override fun peek(delta: DataAddition): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.TriplePatternState.SequencePatternState.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-triple-pattern-state/-sequence-pattern-state/peek.html","searchKeys":["peek","open override fun peek(delta: DataAddition): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.TriplePatternState.SequencePatternState.peek"]},{"name":"open override fun peek(delta: DataAddition): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.TriplePatternState.SimpleAltPatternState.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-triple-pattern-state/-simple-alt-pattern-state/peek.html","searchKeys":["peek","open override fun peek(delta: DataAddition): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.TriplePatternState.SimpleAltPatternState.peek"]},{"name":"open override fun peek(delta: DataAddition): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.TriplePatternState.UnboundedSequencePatternState.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-triple-pattern-state/-unbounded-sequence-pattern-state/peek.html","searchKeys":["peek","open override fun peek(delta: DataAddition): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.TriplePatternState.UnboundedSequencePatternState.peek"]},{"name":"open override fun peek(delta: DataDeletion): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.TriplePatternState.AltPatternState.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-triple-pattern-state/-alt-pattern-state/peek.html","searchKeys":["peek","open override fun peek(delta: DataDeletion): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.TriplePatternState.AltPatternState.peek"]},{"name":"open override fun peek(delta: DataDeletion): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.TriplePatternState.RepeatingPatternState.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-triple-pattern-state/-repeating-pattern-state/peek.html","searchKeys":["peek","open override fun peek(delta: DataDeletion): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.TriplePatternState.RepeatingPatternState.peek"]},{"name":"open override fun peek(delta: DataDeletion): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.TriplePatternState.SimpleAltPatternState.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-triple-pattern-state/-simple-alt-pattern-state/peek.html","searchKeys":["peek","open override fun peek(delta: DataDeletion): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.TriplePatternState.SimpleAltPatternState.peek"]},{"name":"open override fun peek(delta: DataDelta): OptimisedStream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.ExclusionFilterState.Broad.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-exclusion-filter-state/-broad/peek.html","searchKeys":["peek","open override fun peek(delta: DataDelta): OptimisedStream<MappingDelta>","dev.tesserakt.sparql.runtime.query.ExclusionFilterState.Broad.peek"]},{"name":"open override fun peek(delta: DataDelta): OptimisedStream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.ExclusionFilterState.Narrow.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-exclusion-filter-state/-narrow/peek.html","searchKeys":["peek","open override fun peek(delta: DataDelta): OptimisedStream<MappingDelta>","dev.tesserakt.sparql.runtime.query.ExclusionFilterState.Narrow.peek"]},{"name":"open override fun peek(delta: DataDelta): OptimisedStream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.GroupPatternState.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-group-pattern-state/peek.html","searchKeys":["peek","open override fun peek(delta: DataDelta): OptimisedStream<MappingDelta>","dev.tesserakt.sparql.runtime.query.GroupPatternState.peek"]},{"name":"open override fun peek(delta: DataDelta): OptimisedStream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.InclusionFilterState.Broad.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-inclusion-filter-state/-broad/peek.html","searchKeys":["peek","open override fun peek(delta: DataDelta): OptimisedStream<MappingDelta>","dev.tesserakt.sparql.runtime.query.InclusionFilterState.Broad.peek"]},{"name":"open override fun peek(delta: DataDelta): OptimisedStream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.InclusionFilterState.Narrow.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-inclusion-filter-state/-narrow/peek.html","searchKeys":["peek","open override fun peek(delta: DataDelta): OptimisedStream<MappingDelta>","dev.tesserakt.sparql.runtime.query.InclusionFilterState.Narrow.peek"]},{"name":"open override fun peek(delta: DataDelta): OptimisedStream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node.Connected.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/-dynamic/-node/-connected/peek.html","searchKeys":["peek","open override fun peek(delta: DataDelta): OptimisedStream<MappingDelta>","dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node.Connected.peek"]},{"name":"open override fun peek(delta: DataDelta): OptimisedStream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node.Disconnected.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/-dynamic/-node/-disconnected/peek.html","searchKeys":["peek","open override fun peek(delta: DataDelta): OptimisedStream<MappingDelta>","dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node.Disconnected.peek"]},{"name":"open override fun peek(delta: DataDelta): OptimisedStream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node.Leaf.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/-dynamic/-node/-leaf/peek.html","searchKeys":["peek","open override fun peek(delta: DataDelta): OptimisedStream<MappingDelta>","dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node.Leaf.peek"]},{"name":"open override fun peek(delta: DataDelta): OptimisedStream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/-dynamic/peek.html","searchKeys":["peek","open override fun peek(delta: DataDelta): OptimisedStream<MappingDelta>","dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.peek"]},{"name":"open override fun peek(delta: DataDelta): OptimisedStream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.JoinTree.Empty.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/-empty/peek.html","searchKeys":["peek","open override fun peek(delta: DataDelta): OptimisedStream<MappingDelta>","dev.tesserakt.sparql.runtime.query.JoinTree.Empty.peek"]},{"name":"open override fun peek(delta: DataDelta): OptimisedStream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.JoinTree.None.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/-none/peek.html","searchKeys":["peek","open override fun peek(delta: DataDelta): OptimisedStream<MappingDelta>","dev.tesserakt.sparql.runtime.query.JoinTree.None.peek"]},{"name":"open override fun peek(delta: DataDelta): OptimisedStream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.UnionState.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-union-state/peek.html","searchKeys":["peek","open override fun peek(delta: DataDelta): OptimisedStream<MappingDelta>","dev.tesserakt.sparql.runtime.query.UnionState.peek"]},{"name":"open override fun peek(parent: MutableJoinState, delta: DataDelta): Stream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateful.MultiFilter.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-graph-pattern-filter-state/-stateful/-multi-filter/peek.html","searchKeys":["peek","open override fun peek(parent: MutableJoinState, delta: DataDelta): Stream<MappingDelta>","dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateful.MultiFilter.peek"]},{"name":"open override fun peek(parent: MutableJoinState, delta: DataDelta): Stream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateful.SingleFilter.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-graph-pattern-filter-state/-stateful/-single-filter/peek.html","searchKeys":["peek","open override fun peek(parent: MutableJoinState, delta: DataDelta): Stream<MappingDelta>","dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateful.SingleFilter.peek"]},{"name":"open override fun peek(parent: MutableJoinState, delta: DataDelta): Stream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateful.Unfiltered.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-graph-pattern-filter-state/-stateful/-unfiltered/peek.html","searchKeys":["peek","open override fun peek(parent: MutableJoinState, delta: DataDelta): Stream<MappingDelta>","dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateful.Unfiltered.peek"]},{"name":"open override fun peek(quad: Quad): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.TriplePatternState.BindingPatternState.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-triple-pattern-state/-binding-pattern-state/peek.html","searchKeys":["peek","open override fun peek(quad: Quad): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.TriplePatternState.BindingPatternState.peek"]},{"name":"open override fun peek(quad: Quad): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.TriplePatternState.ExactPatternState.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-triple-pattern-state/-exact-pattern-state/peek.html","searchKeys":["peek","open override fun peek(quad: Quad): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.TriplePatternState.ExactPatternState.peek"]},{"name":"open override fun peek(quad: Quad): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.TriplePatternState.NegatedPatternState.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-triple-pattern-state/-negated-pattern-state/peek.html","searchKeys":["peek","open override fun peek(quad: Quad): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.TriplePatternState.NegatedPatternState.peek"]},{"name":"open override fun process(change: QueryState.ResultChange<BindingsImpl>): QueryState.ResultChange<BindingsImpl>","description":"dev.tesserakt.sparql.runtime.query.SelectQueryState.process","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-select-query-state/process.html","searchKeys":["process","open override fun process(change: QueryState.ResultChange<BindingsImpl>): QueryState.ResultChange<BindingsImpl>","dev.tesserakt.sparql.runtime.query.SelectQueryState.process"]},{"name":"open override fun process(delta: DataDelta)","description":"dev.tesserakt.sparql.runtime.query.ExclusionFilterState.Broad.process","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-exclusion-filter-state/-broad/process.html","searchKeys":["process","open override fun process(delta: DataDelta)","dev.tesserakt.sparql.runtime.query.ExclusionFilterState.Broad.process"]},{"name":"open override fun process(delta: DataDelta)","description":"dev.tesserakt.sparql.runtime.query.ExclusionFilterState.Narrow.process","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-exclusion-filter-state/-narrow/process.html","searchKeys":["process","open override fun process(delta: DataDelta)","dev.tesserakt.sparql.runtime.query.ExclusionFilterState.Narrow.process"]},{"name":"open override fun process(delta: DataDelta)","description":"dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateful.MultiFilter.process","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-graph-pattern-filter-state/-stateful/-multi-filter/process.html","searchKeys":["process","open override fun process(delta: DataDelta)","dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateful.MultiFilter.process"]},{"name":"open override fun process(delta: DataDelta)","description":"dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateful.SingleFilter.process","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-graph-pattern-filter-state/-stateful/-single-filter/process.html","searchKeys":["process","open override fun process(delta: DataDelta)","dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateful.SingleFilter.process"]},{"name":"open override fun process(delta: DataDelta)","description":"dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateful.Unfiltered.process","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-graph-pattern-filter-state/-stateful/-unfiltered/process.html","searchKeys":["process","open override fun process(delta: DataDelta)","dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateful.Unfiltered.process"]},{"name":"open override fun process(delta: DataDelta)","description":"dev.tesserakt.sparql.runtime.query.GroupPatternState.process","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-group-pattern-state/process.html","searchKeys":["process","open override fun process(delta: DataDelta)","dev.tesserakt.sparql.runtime.query.GroupPatternState.process"]},{"name":"open override fun process(delta: DataDelta)","description":"dev.tesserakt.sparql.runtime.query.InclusionFilterState.Broad.process","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-inclusion-filter-state/-broad/process.html","searchKeys":["process","open override fun process(delta: DataDelta)","dev.tesserakt.sparql.runtime.query.InclusionFilterState.Broad.process"]},{"name":"open override fun process(delta: DataDelta)","description":"dev.tesserakt.sparql.runtime.query.InclusionFilterState.Narrow.process","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-inclusion-filter-state/-narrow/process.html","searchKeys":["process","open override fun process(delta: DataDelta)","dev.tesserakt.sparql.runtime.query.InclusionFilterState.Narrow.process"]},{"name":"open override fun process(delta: DataDelta)","description":"dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node.Connected.process","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/-dynamic/-node/-connected/process.html","searchKeys":["process","open override fun process(delta: DataDelta)","dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node.Connected.process"]},{"name":"open override fun process(delta: DataDelta)","description":"dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node.Disconnected.process","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/-dynamic/-node/-disconnected/process.html","searchKeys":["process","open override fun process(delta: DataDelta)","dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node.Disconnected.process"]},{"name":"open override fun process(delta: DataDelta)","description":"dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node.Leaf.process","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/-dynamic/-node/-leaf/process.html","searchKeys":["process","open override fun process(delta: DataDelta)","dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node.Leaf.process"]},{"name":"open override fun process(delta: DataDelta)","description":"dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.process","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/-dynamic/process.html","searchKeys":["process","open override fun process(delta: DataDelta)","dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.process"]},{"name":"open override fun process(delta: DataDelta)","description":"dev.tesserakt.sparql.runtime.query.JoinTree.Empty.process","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/-empty/process.html","searchKeys":["process","open override fun process(delta: DataDelta)","dev.tesserakt.sparql.runtime.query.JoinTree.Empty.process"]},{"name":"open override fun process(delta: DataDelta)","description":"dev.tesserakt.sparql.runtime.query.JoinTree.None.process","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/-none/process.html","searchKeys":["process","open override fun process(delta: DataDelta)","dev.tesserakt.sparql.runtime.query.JoinTree.None.process"]},{"name":"open override fun process(delta: DataDelta)","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulBindingExact.process","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateful-binding-exact/process.html","searchKeys":["process","open override fun process(delta: DataDelta)","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulBindingExact.process"]},{"name":"open override fun process(delta: DataDelta)","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulBindings.process","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateful-bindings/process.html","searchKeys":["process","open override fun process(delta: DataDelta)","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulBindings.process"]},{"name":"open override fun process(delta: DataDelta)","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulExact.process","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateful-exact/process.html","searchKeys":["process","open override fun process(delta: DataDelta)","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulExact.process"]},{"name":"open override fun process(delta: DataDelta)","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulExactBinding.process","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateful-exact-binding/process.html","searchKeys":["process","open override fun process(delta: DataDelta)","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulExactBinding.process"]},{"name":"open override fun process(delta: DataDelta)","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessBindingExact.process","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateless-binding-exact/process.html","searchKeys":["process","open override fun process(delta: DataDelta)","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessBindingExact.process"]},{"name":"open override fun process(delta: DataDelta)","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessBindings.process","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateless-bindings/process.html","searchKeys":["process","open override fun process(delta: DataDelta)","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessBindings.process"]},{"name":"open override fun process(delta: DataDelta)","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessExact.process","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateless-exact/process.html","searchKeys":["process","open override fun process(delta: DataDelta)","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessExact.process"]},{"name":"open override fun process(delta: DataDelta)","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessExactBinding.process","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateless-exact-binding/process.html","searchKeys":["process","open override fun process(delta: DataDelta)","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessExactBinding.process"]},{"name":"open override fun process(delta: DataDelta)","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulBindingExact.process","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateful-binding-exact/process.html","searchKeys":["process","open override fun process(delta: DataDelta)","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulBindingExact.process"]},{"name":"open override fun process(delta: DataDelta)","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulBindings.process","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateful-bindings/process.html","searchKeys":["process","open override fun process(delta: DataDelta)","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulBindings.process"]},{"name":"open override fun process(delta: DataDelta)","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulExact.process","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateful-exact/process.html","searchKeys":["process","open override fun process(delta: DataDelta)","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulExact.process"]},{"name":"open override fun process(delta: DataDelta)","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulExactBinding.process","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateful-exact-binding/process.html","searchKeys":["process","open override fun process(delta: DataDelta)","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulExactBinding.process"]},{"name":"open override fun process(delta: DataDelta)","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessBindingExact.process","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateless-binding-exact/process.html","searchKeys":["process","open override fun process(delta: DataDelta)","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessBindingExact.process"]},{"name":"open override fun process(delta: DataDelta)","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessBindings.process","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateless-bindings/process.html","searchKeys":["process","open override fun process(delta: DataDelta)","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessBindings.process"]},{"name":"open override fun process(delta: DataDelta)","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessExact.process","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateless-exact/process.html","searchKeys":["process","open override fun process(delta: DataDelta)","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessExact.process"]},{"name":"open override fun process(delta: DataDelta)","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessExactBinding.process","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateless-exact-binding/process.html","searchKeys":["process","open override fun process(delta: DataDelta)","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessExactBinding.process"]},{"name":"open override fun process(delta: DataDelta)","description":"dev.tesserakt.sparql.runtime.query.TriplePatternState.AltPatternState.process","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-triple-pattern-state/-alt-pattern-state/process.html","searchKeys":["process","open override fun process(delta: DataDelta)","dev.tesserakt.sparql.runtime.query.TriplePatternState.AltPatternState.process"]},{"name":"open override fun process(delta: DataDelta)","description":"dev.tesserakt.sparql.runtime.query.TriplePatternState.RepeatingPatternState.process","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-triple-pattern-state/-repeating-pattern-state/process.html","searchKeys":["process","open override fun process(delta: DataDelta)","dev.tesserakt.sparql.runtime.query.TriplePatternState.RepeatingPatternState.process"]},{"name":"open override fun process(delta: DataDelta)","description":"dev.tesserakt.sparql.runtime.query.TriplePatternState.SequencePatternState.process","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-triple-pattern-state/-sequence-pattern-state/process.html","searchKeys":["process","open override fun process(delta: DataDelta)","dev.tesserakt.sparql.runtime.query.TriplePatternState.SequencePatternState.process"]},{"name":"open override fun process(delta: DataDelta)","description":"dev.tesserakt.sparql.runtime.query.TriplePatternState.SimpleAltPatternState.process","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-triple-pattern-state/-simple-alt-pattern-state/process.html","searchKeys":["process","open override fun process(delta: DataDelta)","dev.tesserakt.sparql.runtime.query.TriplePatternState.SimpleAltPatternState.process"]},{"name":"open override fun process(delta: DataDelta)","description":"dev.tesserakt.sparql.runtime.query.TriplePatternState.UnboundedSequencePatternState.process","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-triple-pattern-state/-unbounded-sequence-pattern-state/process.html","searchKeys":["process","open override fun process(delta: DataDelta)","dev.tesserakt.sparql.runtime.query.TriplePatternState.UnboundedSequencePatternState.process"]},{"name":"open override fun process(delta: DataDelta)","description":"dev.tesserakt.sparql.runtime.query.UnionState.process","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-union-state/process.html","searchKeys":["process","open override fun process(delta: DataDelta)","dev.tesserakt.sparql.runtime.query.UnionState.process"]},{"name":"open override fun remove(mapping: Mapping)","description":"dev.tesserakt.sparql.runtime.collection.MultiHashMappingArray.remove","location":"sparql/runtime/dev.tesserakt.sparql.runtime.collection/-multi-hash-mapping-array/remove.html","searchKeys":["remove","open override fun remove(mapping: Mapping)","dev.tesserakt.sparql.runtime.collection.MultiHashMappingArray.remove"]},{"name":"open override fun remove(mapping: Mapping)","description":"dev.tesserakt.sparql.runtime.collection.SimpleMappingArray.remove","location":"sparql/runtime/dev.tesserakt.sparql.runtime.collection/-simple-mapping-array/remove.html","searchKeys":["remove","open override fun remove(mapping: Mapping)","dev.tesserakt.sparql.runtime.collection.SimpleMappingArray.remove"]},{"name":"open override fun removeAll(mappings: Iterable<Mapping>)","description":"dev.tesserakt.sparql.runtime.collection.MultiHashMappingArray.removeAll","location":"sparql/runtime/dev.tesserakt.sparql.runtime.collection/-multi-hash-mapping-array/remove-all.html","searchKeys":["removeAll","open override fun removeAll(mappings: Iterable<Mapping>)","dev.tesserakt.sparql.runtime.collection.MultiHashMappingArray.removeAll"]},{"name":"open override fun removeAll(mappings: Iterable<Mapping>)","description":"dev.tesserakt.sparql.runtime.collection.SimpleMappingArray.removeAll","location":"sparql/runtime/dev.tesserakt.sparql.runtime.collection/-simple-mapping-array/remove-all.html","searchKeys":["removeAll","open override fun removeAll(mappings: Iterable<Mapping>)","dev.tesserakt.sparql.runtime.collection.SimpleMappingArray.removeAll"]},{"name":"open override fun resolveBinding(id: Int): String","description":"dev.tesserakt.sparql.runtime.evaluation.GlobalQueryContext.resolveBinding","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-global-query-context/resolve-binding.html","searchKeys":["resolveBinding","open override fun resolveBinding(id: Int): String","dev.tesserakt.sparql.runtime.evaluation.GlobalQueryContext.resolveBinding"]},{"name":"open override fun resolveBinding(id: Int): String","description":"dev.tesserakt.sparql.runtime.evaluation.QueryContextImpl.resolveBinding","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-query-context-impl/resolve-binding.html","searchKeys":["resolveBinding","open override fun resolveBinding(id: Int): String","dev.tesserakt.sparql.runtime.evaluation.QueryContextImpl.resolveBinding"]},{"name":"open override fun resolveBinding(value: String): Int","description":"dev.tesserakt.sparql.runtime.evaluation.GlobalQueryContext.resolveBinding","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-global-query-context/resolve-binding.html","searchKeys":["resolveBinding","open override fun resolveBinding(value: String): Int","dev.tesserakt.sparql.runtime.evaluation.GlobalQueryContext.resolveBinding"]},{"name":"open override fun resolveBinding(value: String): Int","description":"dev.tesserakt.sparql.runtime.evaluation.QueryContextImpl.resolveBinding","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-query-context-impl/resolve-binding.html","searchKeys":["resolveBinding","open override fun resolveBinding(value: String): Int","dev.tesserakt.sparql.runtime.evaluation.QueryContextImpl.resolveBinding"]},{"name":"open override fun resolveTerm(id: Int): Quad.Term","description":"dev.tesserakt.sparql.runtime.evaluation.GlobalQueryContext.resolveTerm","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-global-query-context/resolve-term.html","searchKeys":["resolveTerm","open override fun resolveTerm(id: Int): Quad.Term","dev.tesserakt.sparql.runtime.evaluation.GlobalQueryContext.resolveTerm"]},{"name":"open override fun resolveTerm(id: Int): Quad.Term","description":"dev.tesserakt.sparql.runtime.evaluation.QueryContextImpl.resolveTerm","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-query-context-impl/resolve-term.html","searchKeys":["resolveTerm","open override fun resolveTerm(id: Int): Quad.Term","dev.tesserakt.sparql.runtime.evaluation.QueryContextImpl.resolveTerm"]},{"name":"open override fun resolveTerm(value: Quad.Term): Int","description":"dev.tesserakt.sparql.runtime.evaluation.GlobalQueryContext.resolveTerm","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-global-query-context/resolve-term.html","searchKeys":["resolveTerm","open override fun resolveTerm(value: Quad.Term): Int","dev.tesserakt.sparql.runtime.evaluation.GlobalQueryContext.resolveTerm"]},{"name":"open override fun resolveTerm(value: Quad.Term): Int","description":"dev.tesserakt.sparql.runtime.evaluation.QueryContextImpl.resolveTerm","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-query-context-impl/resolve-term.html","searchKeys":["resolveTerm","open override fun resolveTerm(value: Quad.Term): Int","dev.tesserakt.sparql.runtime.evaluation.QueryContextImpl.resolveTerm"]},{"name":"open override fun supportsEfficientIteration(): Boolean","description":"dev.tesserakt.sparql.runtime.stream.OptimisedStream.supportsEfficientIteration","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-optimised-stream/supports-efficient-iteration.html","searchKeys":["supportsEfficientIteration","open override fun supportsEfficientIteration(): Boolean","dev.tesserakt.sparql.runtime.stream.OptimisedStream.supportsEfficientIteration"]},{"name":"open override fun supportsEfficientIteration(): Boolean","description":"dev.tesserakt.sparql.runtime.stream.OptimisedStreamView.supportsEfficientIteration","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-optimised-stream-view/supports-efficient-iteration.html","searchKeys":["supportsEfficientIteration","open override fun supportsEfficientIteration(): Boolean","dev.tesserakt.sparql.runtime.stream.OptimisedStreamView.supportsEfficientIteration"]},{"name":"open override fun supportsEfficientIteration(): Boolean","description":"dev.tesserakt.sparql.runtime.stream.StreamChain.supportsEfficientIteration","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-chain/supports-efficient-iteration.html","searchKeys":["supportsEfficientIteration","open override fun supportsEfficientIteration(): Boolean","dev.tesserakt.sparql.runtime.stream.StreamChain.supportsEfficientIteration"]},{"name":"open override fun supportsEfficientIteration(): Boolean","description":"dev.tesserakt.sparql.runtime.stream.StreamFilter.supportsEfficientIteration","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-filter/supports-efficient-iteration.html","searchKeys":["supportsEfficientIteration","open override fun supportsEfficientIteration(): Boolean","dev.tesserakt.sparql.runtime.stream.StreamFilter.supportsEfficientIteration"]},{"name":"open override fun supportsEfficientIteration(): Boolean","description":"dev.tesserakt.sparql.runtime.stream.StreamMapping.supportsEfficientIteration","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-mapping/supports-efficient-iteration.html","searchKeys":["supportsEfficientIteration","open override fun supportsEfficientIteration(): Boolean","dev.tesserakt.sparql.runtime.stream.StreamMapping.supportsEfficientIteration"]},{"name":"open override fun supportsEfficientIteration(): Boolean","description":"dev.tesserakt.sparql.runtime.stream.StreamMappingNullable.supportsEfficientIteration","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-mapping-nullable/supports-efficient-iteration.html","searchKeys":["supportsEfficientIteration","open override fun supportsEfficientIteration(): Boolean","dev.tesserakt.sparql.runtime.stream.StreamMappingNullable.supportsEfficientIteration"]},{"name":"open override fun supportsEfficientIteration(): Boolean","description":"dev.tesserakt.sparql.runtime.stream.StreamMultiJoin.supportsEfficientIteration","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-multi-join/supports-efficient-iteration.html","searchKeys":["supportsEfficientIteration","open override fun supportsEfficientIteration(): Boolean","dev.tesserakt.sparql.runtime.stream.StreamMultiJoin.supportsEfficientIteration"]},{"name":"open override fun supportsEfficientIteration(): Boolean","description":"dev.tesserakt.sparql.runtime.stream.StreamProduct.supportsEfficientIteration","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-product/supports-efficient-iteration.html","searchKeys":["supportsEfficientIteration","open override fun supportsEfficientIteration(): Boolean","dev.tesserakt.sparql.runtime.stream.StreamProduct.supportsEfficientIteration"]},{"name":"open override fun supportsEfficientIteration(): Boolean","description":"dev.tesserakt.sparql.runtime.stream.StreamReduction.supportsEfficientIteration","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-reduction/supports-efficient-iteration.html","searchKeys":["supportsEfficientIteration","open override fun supportsEfficientIteration(): Boolean","dev.tesserakt.sparql.runtime.stream.StreamReduction.supportsEfficientIteration"]},{"name":"open override fun supportsEfficientIteration(): Boolean","description":"dev.tesserakt.sparql.runtime.stream.StreamSingleJoin.supportsEfficientIteration","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-single-join/supports-efficient-iteration.html","searchKeys":["supportsEfficientIteration","open override fun supportsEfficientIteration(): Boolean","dev.tesserakt.sparql.runtime.stream.StreamSingleJoin.supportsEfficientIteration"]},{"name":"open override fun supportsEfficientIteration(): Boolean","description":"dev.tesserakt.sparql.runtime.stream.StreamTransform.supportsEfficientIteration","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-transform/supports-efficient-iteration.html","searchKeys":["supportsEfficientIteration","open override fun supportsEfficientIteration(): Boolean","dev.tesserakt.sparql.runtime.stream.StreamTransform.supportsEfficientIteration"]},{"name":"open override fun supportsEfficientIteration(): Boolean","description":"dev.tesserakt.sparql.runtime.stream.StreamTransformNullable.supportsEfficientIteration","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-transform-nullable/supports-efficient-iteration.html","searchKeys":["supportsEfficientIteration","open override fun supportsEfficientIteration(): Boolean","dev.tesserakt.sparql.runtime.stream.StreamTransformNullable.supportsEfficientIteration"]},{"name":"open override fun supportsEfficientIteration(): Boolean","description":"dev.tesserakt.sparql.runtime.stream.StreamWithIndex.supportsEfficientIteration","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-with-index/supports-efficient-iteration.html","searchKeys":["supportsEfficientIteration","open override fun supportsEfficientIteration(): Boolean","dev.tesserakt.sparql.runtime.stream.StreamWithIndex.supportsEfficientIteration"]},{"name":"open override fun supportsReuse(): Boolean","description":"dev.tesserakt.sparql.runtime.stream.BufferedStream.supportsReuse","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-buffered-stream/supports-reuse.html","searchKeys":["supportsReuse","open override fun supportsReuse(): Boolean","dev.tesserakt.sparql.runtime.stream.BufferedStream.supportsReuse"]},{"name":"open override fun supportsReuse(): Boolean","description":"dev.tesserakt.sparql.runtime.stream.CollectedStream.supportsReuse","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-collected-stream/supports-reuse.html","searchKeys":["supportsReuse","open override fun supportsReuse(): Boolean","dev.tesserakt.sparql.runtime.stream.CollectedStream.supportsReuse"]},{"name":"open override fun supportsReuse(): Boolean","description":"dev.tesserakt.sparql.runtime.stream.EmptyStream.supportsReuse","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-empty-stream/supports-reuse.html","searchKeys":["supportsReuse","open override fun supportsReuse(): Boolean","dev.tesserakt.sparql.runtime.stream.EmptyStream.supportsReuse"]},{"name":"open override fun supportsReuse(): Boolean","description":"dev.tesserakt.sparql.runtime.stream.SingleStream.supportsReuse","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-single-stream/supports-reuse.html","searchKeys":["supportsReuse","open override fun supportsReuse(): Boolean","dev.tesserakt.sparql.runtime.stream.SingleStream.supportsReuse"]},{"name":"open override fun supportsReuse(): Boolean","description":"dev.tesserakt.sparql.runtime.stream.SingleUseStreamView.supportsReuse","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-single-use-stream-view/supports-reuse.html","searchKeys":["supportsReuse","open override fun supportsReuse(): Boolean","dev.tesserakt.sparql.runtime.stream.SingleUseStreamView.supportsReuse"]},{"name":"open override fun supportsReuse(): Boolean","description":"dev.tesserakt.sparql.runtime.stream.StreamChain.supportsReuse","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-chain/supports-reuse.html","searchKeys":["supportsReuse","open override fun supportsReuse(): Boolean","dev.tesserakt.sparql.runtime.stream.StreamChain.supportsReuse"]},{"name":"open override fun supportsReuse(): Boolean","description":"dev.tesserakt.sparql.runtime.stream.StreamFilter.supportsReuse","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-filter/supports-reuse.html","searchKeys":["supportsReuse","open override fun supportsReuse(): Boolean","dev.tesserakt.sparql.runtime.stream.StreamFilter.supportsReuse"]},{"name":"open override fun supportsReuse(): Boolean","description":"dev.tesserakt.sparql.runtime.stream.StreamMapping.supportsReuse","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-mapping/supports-reuse.html","searchKeys":["supportsReuse","open override fun supportsReuse(): Boolean","dev.tesserakt.sparql.runtime.stream.StreamMapping.supportsReuse"]},{"name":"open override fun supportsReuse(): Boolean","description":"dev.tesserakt.sparql.runtime.stream.StreamMappingNullable.supportsReuse","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-mapping-nullable/supports-reuse.html","searchKeys":["supportsReuse","open override fun supportsReuse(): Boolean","dev.tesserakt.sparql.runtime.stream.StreamMappingNullable.supportsReuse"]},{"name":"open override fun supportsReuse(): Boolean","description":"dev.tesserakt.sparql.runtime.stream.StreamMultiJoin.supportsReuse","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-multi-join/supports-reuse.html","searchKeys":["supportsReuse","open override fun supportsReuse(): Boolean","dev.tesserakt.sparql.runtime.stream.StreamMultiJoin.supportsReuse"]},{"name":"open override fun supportsReuse(): Boolean","description":"dev.tesserakt.sparql.runtime.stream.StreamProduct.supportsReuse","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-product/supports-reuse.html","searchKeys":["supportsReuse","open override fun supportsReuse(): Boolean","dev.tesserakt.sparql.runtime.stream.StreamProduct.supportsReuse"]},{"name":"open override fun supportsReuse(): Boolean","description":"dev.tesserakt.sparql.runtime.stream.StreamReduction.supportsReuse","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-reduction/supports-reuse.html","searchKeys":["supportsReuse","open override fun supportsReuse(): Boolean","dev.tesserakt.sparql.runtime.stream.StreamReduction.supportsReuse"]},{"name":"open override fun supportsReuse(): Boolean","description":"dev.tesserakt.sparql.runtime.stream.StreamSingleJoin.supportsReuse","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-single-join/supports-reuse.html","searchKeys":["supportsReuse","open override fun supportsReuse(): Boolean","dev.tesserakt.sparql.runtime.stream.StreamSingleJoin.supportsReuse"]},{"name":"open override fun supportsReuse(): Boolean","description":"dev.tesserakt.sparql.runtime.stream.StreamTransform.supportsReuse","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-transform/supports-reuse.html","searchKeys":["supportsReuse","open override fun supportsReuse(): Boolean","dev.tesserakt.sparql.runtime.stream.StreamTransform.supportsReuse"]},{"name":"open override fun supportsReuse(): Boolean","description":"dev.tesserakt.sparql.runtime.stream.StreamTransformNullable.supportsReuse","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-transform-nullable/supports-reuse.html","searchKeys":["supportsReuse","open override fun supportsReuse(): Boolean","dev.tesserakt.sparql.runtime.stream.StreamTransformNullable.supportsReuse"]},{"name":"open override fun supportsReuse(): Boolean","description":"dev.tesserakt.sparql.runtime.stream.StreamWithIndex.supportsReuse","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-with-index/supports-reuse.html","searchKeys":["supportsReuse","open override fun supportsReuse(): Boolean","dev.tesserakt.sparql.runtime.stream.StreamWithIndex.supportsReuse"]},{"name":"open override fun toString(): String","description":"dev.tesserakt.sparql.runtime.collection.MultiHashMappingArray.toString","location":"sparql/runtime/dev.tesserakt.sparql.runtime.collection/-multi-hash-mapping-array/to-string.html","searchKeys":["toString","open override fun toString(): String","dev.tesserakt.sparql.runtime.collection.MultiHashMappingArray.toString"]},{"name":"open override fun toString(): String","description":"dev.tesserakt.sparql.runtime.collection.SimpleMappingArray.toString","location":"sparql/runtime/dev.tesserakt.sparql.runtime.collection/-simple-mapping-array/to-string.html","searchKeys":["toString","open override fun toString(): String","dev.tesserakt.sparql.runtime.collection.SimpleMappingArray.toString"]},{"name":"open override fun toString(): String","description":"dev.tesserakt.sparql.runtime.evaluation.BindingsImpl.toString","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-bindings-impl/to-string.html","searchKeys":["toString","open override fun toString(): String","dev.tesserakt.sparql.runtime.evaluation.BindingsImpl.toString"]},{"name":"open override fun toString(): String","description":"dev.tesserakt.sparql.runtime.evaluation.DataAddition.toString","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-data-addition/to-string.html","searchKeys":["toString","open override fun toString(): String","dev.tesserakt.sparql.runtime.evaluation.DataAddition.toString"]},{"name":"open override fun toString(): String","description":"dev.tesserakt.sparql.runtime.evaluation.DataDeletion.toString","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-data-deletion/to-string.html","searchKeys":["toString","open override fun toString(): String","dev.tesserakt.sparql.runtime.evaluation.DataDeletion.toString"]},{"name":"open override fun toString(): String","description":"dev.tesserakt.sparql.runtime.evaluation.MappingAddition.toString","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-mapping-addition/to-string.html","searchKeys":["toString","open override fun toString(): String","dev.tesserakt.sparql.runtime.evaluation.MappingAddition.toString"]},{"name":"open override fun toString(): String","description":"dev.tesserakt.sparql.runtime.evaluation.MappingDeletion.toString","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-mapping-deletion/to-string.html","searchKeys":["toString","open override fun toString(): String","dev.tesserakt.sparql.runtime.evaluation.MappingDeletion.toString"]},{"name":"open override fun toString(): String","description":"dev.tesserakt.sparql.runtime.query.JoinTree.Empty.toString","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/-empty/to-string.html","searchKeys":["toString","open override fun toString(): String","dev.tesserakt.sparql.runtime.query.JoinTree.Empty.toString"]},{"name":"open override fun toString(): String","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulBindingExact.toString","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateful-binding-exact/to-string.html","searchKeys":["toString","open override fun toString(): String","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulBindingExact.toString"]},{"name":"open override fun toString(): String","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulBindings.toString","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateful-bindings/to-string.html","searchKeys":["toString","open override fun toString(): String","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulBindings.toString"]},{"name":"open override fun toString(): String","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulExactBinding.toString","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateful-exact-binding/to-string.html","searchKeys":["toString","open override fun toString(): String","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulExactBinding.toString"]},{"name":"open override fun toString(): String","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessBindingExact.toString","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateless-binding-exact/to-string.html","searchKeys":["toString","open override fun toString(): String","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessBindingExact.toString"]},{"name":"open override fun toString(): String","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessBindings.toString","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateless-bindings/to-string.html","searchKeys":["toString","open override fun toString(): String","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessBindings.toString"]},{"name":"open override fun toString(): String","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessExactBinding.toString","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateless-exact-binding/to-string.html","searchKeys":["toString","open override fun toString(): String","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessExactBinding.toString"]},{"name":"open override fun toString(): String","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulBindingExact.toString","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateful-binding-exact/to-string.html","searchKeys":["toString","open override fun toString(): String","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulBindingExact.toString"]},{"name":"open override fun toString(): String","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulBindings.toString","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateful-bindings/to-string.html","searchKeys":["toString","open override fun toString(): String","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulBindings.toString"]},{"name":"open override fun toString(): String","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulExactBinding.toString","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateful-exact-binding/to-string.html","searchKeys":["toString","open override fun toString(): String","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulExactBinding.toString"]},{"name":"open override fun toString(): String","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessBindingExact.toString","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateless-binding-exact/to-string.html","searchKeys":["toString","open override fun toString(): String","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessBindingExact.toString"]},{"name":"open override fun toString(): String","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessBindings.toString","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateless-bindings/to-string.html","searchKeys":["toString","open override fun toString(): String","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessBindings.toString"]},{"name":"open override fun toString(): String","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessExactBinding.toString","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateless-exact-binding/to-string.html","searchKeys":["toString","open override fun toString(): String","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessExactBinding.toString"]},{"name":"open override fun toString(): String","description":"dev.tesserakt.sparql.util.Bitmask.toString","location":"sparql/runtime/dev.tesserakt.sparql.util/-bitmask/to-string.html","searchKeys":["toString","open override fun toString(): String","dev.tesserakt.sparql.util.Bitmask.toString"]},{"name":"open override fun toString(): String","description":"dev.tesserakt.sparql.util.Cardinality.toString","location":"sparql/runtime/dev.tesserakt.sparql.util/-cardinality/to-string.html","searchKeys":["toString","open override fun toString(): String","dev.tesserakt.sparql.util.Cardinality.toString"]},{"name":"open override fun toString(): String","description":"dev.tesserakt.sparql.util.Counter.toString","location":"sparql/runtime/dev.tesserakt.sparql.util/-counter/to-string.html","searchKeys":["toString","open override fun toString(): String","dev.tesserakt.sparql.util.Counter.toString"]},{"name":"open override fun toString(): String","description":"dev.tesserakt.sparql.util.SegmentsList.Segment.toString","location":"sparql/runtime/dev.tesserakt.sparql.util/-segments-list/-segment/to-string.html","searchKeys":["toString","open override fun toString(): String","dev.tesserakt.sparql.util.SegmentsList.Segment.toString"]},{"name":"open override fun toString(): String","description":"dev.tesserakt.sparql.util.SegmentsList.toString","location":"sparql/runtime/dev.tesserakt.sparql.util/-segments-list/to-string.html","searchKeys":["toString","open override fun toString(): String","dev.tesserakt.sparql.util.SegmentsList.toString"]},{"name":"open override val bindings: Set<String>","description":"dev.tesserakt.sparql.runtime.query.GroupPatternState.bindings","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-group-pattern-state/bindings.html","searchKeys":["bindings","open override val bindings: Set<String>","dev.tesserakt.sparql.runtime.query.GroupPatternState.bindings"]},{"name":"open override val bindings: Set<String>","description":"dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node.Connected.bindings","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/-dynamic/-node/-connected/bindings.html","searchKeys":["bindings","open override val bindings: Set<String>","dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node.Connected.bindings"]},{"name":"open override val bindings: Set<String>","description":"dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node.Disconnected.bindings","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/-dynamic/-node/-disconnected/bindings.html","searchKeys":["bindings","open override val bindings: Set<String>","dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node.Disconnected.bindings"]},{"name":"open override val bindings: Set<String>","description":"dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node.Leaf.bindings","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/-dynamic/-node/-leaf/bindings.html","searchKeys":["bindings","open override val bindings: Set<String>","dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node.Leaf.bindings"]},{"name":"open override val bindings: Set<String>","description":"dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.bindings","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/-dynamic/bindings.html","searchKeys":["bindings","open override val bindings: Set<String>","dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.bindings"]},{"name":"open override val bindings: Set<String>","description":"dev.tesserakt.sparql.runtime.query.JoinTree.Empty.bindings","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/-empty/bindings.html","searchKeys":["bindings","open override val bindings: Set<String>","dev.tesserakt.sparql.runtime.query.JoinTree.Empty.bindings"]},{"name":"open override val bindings: Set<String>","description":"dev.tesserakt.sparql.runtime.query.JoinTree.None.bindings","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/-none/bindings.html","searchKeys":["bindings","open override val bindings: Set<String>","dev.tesserakt.sparql.runtime.query.JoinTree.None.bindings"]},{"name":"open override val bindings: Set<String>","description":"dev.tesserakt.sparql.runtime.query.UnionState.bindings","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-union-state/bindings.html","searchKeys":["bindings","open override val bindings: Set<String>","dev.tesserakt.sparql.runtime.query.UnionState.bindings"]},{"name":"open override val cardinality: Cardinality","description":"dev.tesserakt.sparql.runtime.collection.MultiHashMappingArray.cardinality","location":"sparql/runtime/dev.tesserakt.sparql.runtime.collection/-multi-hash-mapping-array/cardinality.html","searchKeys":["cardinality","open override val cardinality: Cardinality","dev.tesserakt.sparql.runtime.collection.MultiHashMappingArray.cardinality"]},{"name":"open override val cardinality: Cardinality","description":"dev.tesserakt.sparql.runtime.collection.SimpleMappingArray.cardinality","location":"sparql/runtime/dev.tesserakt.sparql.runtime.collection/-simple-mapping-array/cardinality.html","searchKeys":["cardinality","open override val cardinality: Cardinality","dev.tesserakt.sparql.runtime.collection.SimpleMappingArray.cardinality"]},{"name":"open override val cardinality: Cardinality","description":"dev.tesserakt.sparql.runtime.query.GroupPatternState.cardinality","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-group-pattern-state/cardinality.html","searchKeys":["cardinality","open override val cardinality: Cardinality","dev.tesserakt.sparql.runtime.query.GroupPatternState.cardinality"]},{"name":"open override val cardinality: Cardinality","description":"dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node.Connected.cardinality","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/-dynamic/-node/-connected/cardinality.html","searchKeys":["cardinality","open override val cardinality: Cardinality","dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node.Connected.cardinality"]},{"name":"open override val cardinality: Cardinality","description":"dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node.Disconnected.cardinality","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/-dynamic/-node/-disconnected/cardinality.html","searchKeys":["cardinality","open override val cardinality: Cardinality","dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node.Disconnected.cardinality"]},{"name":"open override val cardinality: Cardinality","description":"dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node.Leaf.cardinality","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/-dynamic/-node/-leaf/cardinality.html","searchKeys":["cardinality","open override val cardinality: Cardinality","dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node.Leaf.cardinality"]},{"name":"open override val cardinality: Cardinality","description":"dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.cardinality","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/-dynamic/cardinality.html","searchKeys":["cardinality","open override val cardinality: Cardinality","dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.cardinality"]},{"name":"open override val cardinality: Cardinality","description":"dev.tesserakt.sparql.runtime.query.JoinTree.Empty.cardinality","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/-empty/cardinality.html","searchKeys":["cardinality","open override val cardinality: Cardinality","dev.tesserakt.sparql.runtime.query.JoinTree.Empty.cardinality"]},{"name":"open override val cardinality: Cardinality","description":"dev.tesserakt.sparql.runtime.query.JoinTree.None.cardinality","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/-none/cardinality.html","searchKeys":["cardinality","open override val cardinality: Cardinality","dev.tesserakt.sparql.runtime.query.JoinTree.None.cardinality"]},{"name":"open override val cardinality: Cardinality","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulBindingExact.cardinality","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateful-binding-exact/cardinality.html","searchKeys":["cardinality","open override val cardinality: Cardinality","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulBindingExact.cardinality"]},{"name":"open override val cardinality: Cardinality","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulBindings.cardinality","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateful-bindings/cardinality.html","searchKeys":["cardinality","open override val cardinality: Cardinality","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulBindings.cardinality"]},{"name":"open override val cardinality: Cardinality","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulExact.cardinality","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateful-exact/cardinality.html","searchKeys":["cardinality","open override val cardinality: Cardinality","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulExact.cardinality"]},{"name":"open override val cardinality: Cardinality","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulExactBinding.cardinality","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateful-exact-binding/cardinality.html","searchKeys":["cardinality","open override val cardinality: Cardinality","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulExactBinding.cardinality"]},{"name":"open override val cardinality: Cardinality","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessBindingExact.cardinality","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateless-binding-exact/cardinality.html","searchKeys":["cardinality","open override val cardinality: Cardinality","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessBindingExact.cardinality"]},{"name":"open override val cardinality: Cardinality","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessBindings.cardinality","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateless-bindings/cardinality.html","searchKeys":["cardinality","open override val cardinality: Cardinality","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessBindings.cardinality"]},{"name":"open override val cardinality: Cardinality","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessExact.cardinality","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateless-exact/cardinality.html","searchKeys":["cardinality","open override val cardinality: Cardinality","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessExact.cardinality"]},{"name":"open override val cardinality: Cardinality","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessExactBinding.cardinality","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateless-exact-binding/cardinality.html","searchKeys":["cardinality","open override val cardinality: Cardinality","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessExactBinding.cardinality"]},{"name":"open override val cardinality: Cardinality","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulBindingExact.cardinality","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateful-binding-exact/cardinality.html","searchKeys":["cardinality","open override val cardinality: Cardinality","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulBindingExact.cardinality"]},{"name":"open override val cardinality: Cardinality","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulBindings.cardinality","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateful-bindings/cardinality.html","searchKeys":["cardinality","open override val cardinality: Cardinality","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulBindings.cardinality"]},{"name":"open override val cardinality: Cardinality","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulExact.cardinality","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateful-exact/cardinality.html","searchKeys":["cardinality","open override val cardinality: Cardinality","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulExact.cardinality"]},{"name":"open override val cardinality: Cardinality","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulExactBinding.cardinality","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateful-exact-binding/cardinality.html","searchKeys":["cardinality","open override val cardinality: Cardinality","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulExactBinding.cardinality"]},{"name":"open override val cardinality: Cardinality","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessBindingExact.cardinality","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateless-binding-exact/cardinality.html","searchKeys":["cardinality","open override val cardinality: Cardinality","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessBindingExact.cardinality"]},{"name":"open override val cardinality: Cardinality","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessBindings.cardinality","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateless-bindings/cardinality.html","searchKeys":["cardinality","open override val cardinality: Cardinality","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessBindings.cardinality"]},{"name":"open override val cardinality: Cardinality","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessExact.cardinality","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateless-exact/cardinality.html","searchKeys":["cardinality","open override val cardinality: Cardinality","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessExact.cardinality"]},{"name":"open override val cardinality: Cardinality","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessExactBinding.cardinality","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateless-exact-binding/cardinality.html","searchKeys":["cardinality","open override val cardinality: Cardinality","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessExactBinding.cardinality"]},{"name":"open override val cardinality: Cardinality","description":"dev.tesserakt.sparql.runtime.query.TriplePatternState.AltPatternState.cardinality","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-triple-pattern-state/-alt-pattern-state/cardinality.html","searchKeys":["cardinality","open override val cardinality: Cardinality","dev.tesserakt.sparql.runtime.query.TriplePatternState.AltPatternState.cardinality"]},{"name":"open override val cardinality: Cardinality","description":"dev.tesserakt.sparql.runtime.query.TriplePatternState.ArrayBackedPatternState.cardinality","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-triple-pattern-state/-array-backed-pattern-state/cardinality.html","searchKeys":["cardinality","open override val cardinality: Cardinality","dev.tesserakt.sparql.runtime.query.TriplePatternState.ArrayBackedPatternState.cardinality"]},{"name":"open override val cardinality: Cardinality","description":"dev.tesserakt.sparql.runtime.query.TriplePatternState.RepeatingPatternState.cardinality","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-triple-pattern-state/-repeating-pattern-state/cardinality.html","searchKeys":["cardinality","open override val cardinality: Cardinality","dev.tesserakt.sparql.runtime.query.TriplePatternState.RepeatingPatternState.cardinality"]},{"name":"open override val cardinality: Cardinality","description":"dev.tesserakt.sparql.runtime.query.TriplePatternState.SequencePatternState.cardinality","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-triple-pattern-state/-sequence-pattern-state/cardinality.html","searchKeys":["cardinality","open override val cardinality: Cardinality","dev.tesserakt.sparql.runtime.query.TriplePatternState.SequencePatternState.cardinality"]},{"name":"open override val cardinality: Cardinality","description":"dev.tesserakt.sparql.runtime.query.TriplePatternState.SimpleAltPatternState.cardinality","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-triple-pattern-state/-simple-alt-pattern-state/cardinality.html","searchKeys":["cardinality","open override val cardinality: Cardinality","dev.tesserakt.sparql.runtime.query.TriplePatternState.SimpleAltPatternState.cardinality"]},{"name":"open override val cardinality: Cardinality","description":"dev.tesserakt.sparql.runtime.query.TriplePatternState.UnboundedSequencePatternState.cardinality","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-triple-pattern-state/-unbounded-sequence-pattern-state/cardinality.html","searchKeys":["cardinality","open override val cardinality: Cardinality","dev.tesserakt.sparql.runtime.query.TriplePatternState.UnboundedSequencePatternState.cardinality"]},{"name":"open override val cardinality: Cardinality","description":"dev.tesserakt.sparql.runtime.query.UnionState.cardinality","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-union-state/cardinality.html","searchKeys":["cardinality","open override val cardinality: Cardinality","dev.tesserakt.sparql.runtime.query.UnionState.cardinality"]},{"name":"open override val cardinality: Cardinality","description":"dev.tesserakt.sparql.runtime.stream.BufferedStream.cardinality","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-buffered-stream/cardinality.html","searchKeys":["cardinality","open override val cardinality: Cardinality","dev.tesserakt.sparql.runtime.stream.BufferedStream.cardinality"]},{"name":"open override val cardinality: Cardinality","description":"dev.tesserakt.sparql.runtime.stream.CollectedStream.cardinality","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-collected-stream/cardinality.html","searchKeys":["cardinality","open override val cardinality: Cardinality","dev.tesserakt.sparql.runtime.stream.CollectedStream.cardinality"]},{"name":"open override val cardinality: Cardinality","description":"dev.tesserakt.sparql.runtime.stream.EmptyStream.cardinality","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-empty-stream/cardinality.html","searchKeys":["cardinality","open override val cardinality: Cardinality","dev.tesserakt.sparql.runtime.stream.EmptyStream.cardinality"]},{"name":"open override val cardinality: Cardinality","description":"dev.tesserakt.sparql.runtime.stream.SingleStream.cardinality","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-single-stream/cardinality.html","searchKeys":["cardinality","open override val cardinality: Cardinality","dev.tesserakt.sparql.runtime.stream.SingleStream.cardinality"]},{"name":"open override val cardinality: Cardinality","description":"dev.tesserakt.sparql.runtime.stream.SingleUseStreamView.cardinality","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-single-use-stream-view/cardinality.html","searchKeys":["cardinality","open override val cardinality: Cardinality","dev.tesserakt.sparql.runtime.stream.SingleUseStreamView.cardinality"]},{"name":"open override val cardinality: Cardinality","description":"dev.tesserakt.sparql.runtime.stream.StreamChain.cardinality","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-chain/cardinality.html","searchKeys":["cardinality","open override val cardinality: Cardinality","dev.tesserakt.sparql.runtime.stream.StreamChain.cardinality"]},{"name":"open override val cardinality: Cardinality","description":"dev.tesserakt.sparql.runtime.stream.StreamFilter.cardinality","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-filter/cardinality.html","searchKeys":["cardinality","open override val cardinality: Cardinality","dev.tesserakt.sparql.runtime.stream.StreamFilter.cardinality"]},{"name":"open override val cardinality: Cardinality","description":"dev.tesserakt.sparql.runtime.stream.StreamMapping.cardinality","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-mapping/cardinality.html","searchKeys":["cardinality","open override val cardinality: Cardinality","dev.tesserakt.sparql.runtime.stream.StreamMapping.cardinality"]},{"name":"open override val cardinality: Cardinality","description":"dev.tesserakt.sparql.runtime.stream.StreamMappingNullable.cardinality","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-mapping-nullable/cardinality.html","searchKeys":["cardinality","open override val cardinality: Cardinality","dev.tesserakt.sparql.runtime.stream.StreamMappingNullable.cardinality"]},{"name":"open override val cardinality: Cardinality","description":"dev.tesserakt.sparql.runtime.stream.StreamMultiJoin.cardinality","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-multi-join/cardinality.html","searchKeys":["cardinality","open override val cardinality: Cardinality","dev.tesserakt.sparql.runtime.stream.StreamMultiJoin.cardinality"]},{"name":"open override val cardinality: Cardinality","description":"dev.tesserakt.sparql.runtime.stream.StreamProduct.cardinality","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-product/cardinality.html","searchKeys":["cardinality","open override val cardinality: Cardinality","dev.tesserakt.sparql.runtime.stream.StreamProduct.cardinality"]},{"name":"open override val cardinality: Cardinality","description":"dev.tesserakt.sparql.runtime.stream.StreamReduction.cardinality","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-reduction/cardinality.html","searchKeys":["cardinality","open override val cardinality: Cardinality","dev.tesserakt.sparql.runtime.stream.StreamReduction.cardinality"]},{"name":"open override val cardinality: Cardinality","description":"dev.tesserakt.sparql.runtime.stream.StreamSingleJoin.cardinality","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-single-join/cardinality.html","searchKeys":["cardinality","open override val cardinality: Cardinality","dev.tesserakt.sparql.runtime.stream.StreamSingleJoin.cardinality"]},{"name":"open override val cardinality: Cardinality","description":"dev.tesserakt.sparql.runtime.stream.StreamTransform.cardinality","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-transform/cardinality.html","searchKeys":["cardinality","open override val cardinality: Cardinality","dev.tesserakt.sparql.runtime.stream.StreamTransform.cardinality"]},{"name":"open override val cardinality: Cardinality","description":"dev.tesserakt.sparql.runtime.stream.StreamTransformNullable.cardinality","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-transform-nullable/cardinality.html","searchKeys":["cardinality","open override val cardinality: Cardinality","dev.tesserakt.sparql.runtime.stream.StreamTransformNullable.cardinality"]},{"name":"open override val cardinality: Cardinality","description":"dev.tesserakt.sparql.runtime.stream.StreamWithIndex.cardinality","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-with-index/cardinality.html","searchKeys":["cardinality","open override val cardinality: Cardinality","dev.tesserakt.sparql.runtime.stream.StreamWithIndex.cardinality"]},{"name":"open override val description: String","description":"dev.tesserakt.sparql.runtime.stream.BufferedStream.description","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-buffered-stream/description.html","searchKeys":["description","open override val description: String","dev.tesserakt.sparql.runtime.stream.BufferedStream.description"]},{"name":"open override val description: String","description":"dev.tesserakt.sparql.runtime.stream.CollectedStream.description","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-collected-stream/description.html","searchKeys":["description","open override val description: String","dev.tesserakt.sparql.runtime.stream.CollectedStream.description"]},{"name":"open override val description: String","description":"dev.tesserakt.sparql.runtime.stream.EmptyStream.description","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-empty-stream/description.html","searchKeys":["description","open override val description: String","dev.tesserakt.sparql.runtime.stream.EmptyStream.description"]},{"name":"open override val description: String","description":"dev.tesserakt.sparql.runtime.stream.OptimisedStreamView.description","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-optimised-stream-view/description.html","searchKeys":["description","open override val description: String","dev.tesserakt.sparql.runtime.stream.OptimisedStreamView.description"]},{"name":"open override val description: String","description":"dev.tesserakt.sparql.runtime.stream.SingleStream.description","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-single-stream/description.html","searchKeys":["description","open override val description: String","dev.tesserakt.sparql.runtime.stream.SingleStream.description"]},{"name":"open override val description: String","description":"dev.tesserakt.sparql.runtime.stream.SingleUseStreamView.description","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-single-use-stream-view/description.html","searchKeys":["description","open override val description: String","dev.tesserakt.sparql.runtime.stream.SingleUseStreamView.description"]},{"name":"open override val description: String","description":"dev.tesserakt.sparql.runtime.stream.StreamChain.description","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-chain/description.html","searchKeys":["description","open override val description: String","dev.tesserakt.sparql.runtime.stream.StreamChain.description"]},{"name":"open override val description: String","description":"dev.tesserakt.sparql.runtime.stream.StreamFilter.description","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-filter/description.html","searchKeys":["description","open override val description: String","dev.tesserakt.sparql.runtime.stream.StreamFilter.description"]},{"name":"open override val description: String","description":"dev.tesserakt.sparql.runtime.stream.StreamMapping.description","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-mapping/description.html","searchKeys":["description","open override val description: String","dev.tesserakt.sparql.runtime.stream.StreamMapping.description"]},{"name":"open override val description: String","description":"dev.tesserakt.sparql.runtime.stream.StreamMappingNullable.description","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-mapping-nullable/description.html","searchKeys":["description","open override val description: String","dev.tesserakt.sparql.runtime.stream.StreamMappingNullable.description"]},{"name":"open override val description: String","description":"dev.tesserakt.sparql.runtime.stream.StreamMultiJoin.description","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-multi-join/description.html","searchKeys":["description","open override val description: String","dev.tesserakt.sparql.runtime.stream.StreamMultiJoin.description"]},{"name":"open override val description: String","description":"dev.tesserakt.sparql.runtime.stream.StreamProduct.description","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-product/description.html","searchKeys":["description","open override val description: String","dev.tesserakt.sparql.runtime.stream.StreamProduct.description"]},{"name":"open override val description: String","description":"dev.tesserakt.sparql.runtime.stream.StreamReduction.description","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-reduction/description.html","searchKeys":["description","open override val description: String","dev.tesserakt.sparql.runtime.stream.StreamReduction.description"]},{"name":"open override val description: String","description":"dev.tesserakt.sparql.runtime.stream.StreamSingleJoin.description","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-single-join/description.html","searchKeys":["description","open override val description: String","dev.tesserakt.sparql.runtime.stream.StreamSingleJoin.description"]},{"name":"open override val description: String","description":"dev.tesserakt.sparql.runtime.stream.StreamTransform.description","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-transform/description.html","searchKeys":["description","open override val description: String","dev.tesserakt.sparql.runtime.stream.StreamTransform.description"]},{"name":"open override val description: String","description":"dev.tesserakt.sparql.runtime.stream.StreamTransformNullable.description","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-transform-nullable/description.html","searchKeys":["description","open override val description: String","dev.tesserakt.sparql.runtime.stream.StreamTransformNullable.description"]},{"name":"open override val description: String","description":"dev.tesserakt.sparql.runtime.stream.StreamWithIndex.description","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-with-index/description.html","searchKeys":["description","open override val description: String","dev.tesserakt.sparql.runtime.stream.StreamWithIndex.description"]},{"name":"open override val mappings: ArrayList<Mapping>","description":"dev.tesserakt.sparql.runtime.collection.SimpleMappingArray.mappings","location":"sparql/runtime/dev.tesserakt.sparql.runtime.collection/-simple-mapping-array/mappings.html","searchKeys":["mappings","open override val mappings: ArrayList<Mapping>","dev.tesserakt.sparql.runtime.collection.SimpleMappingArray.mappings"]},{"name":"open override val mappings: List<Mapping>","description":"dev.tesserakt.sparql.runtime.collection.MultiHashMappingArray.mappings","location":"sparql/runtime/dev.tesserakt.sparql.runtime.collection/-multi-hash-mapping-array/mappings.html","searchKeys":["mappings","open override val mappings: List<Mapping>","dev.tesserakt.sparql.runtime.collection.MultiHashMappingArray.mappings"]},{"name":"open override val origin: DataDelta?","description":"dev.tesserakt.sparql.runtime.evaluation.MappingAddition.origin","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-mapping-addition/origin.html","searchKeys":["origin","open override val origin: DataDelta?","dev.tesserakt.sparql.runtime.evaluation.MappingAddition.origin"]},{"name":"open override val origin: DataDelta?","description":"dev.tesserakt.sparql.runtime.evaluation.MappingDeletion.origin","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-mapping-deletion/origin.html","searchKeys":["origin","open override val origin: DataDelta?","dev.tesserakt.sparql.runtime.evaluation.MappingDeletion.origin"]},{"name":"open override val value: Mapping","description":"dev.tesserakt.sparql.runtime.evaluation.MappingAddition.value","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-mapping-addition/value.html","searchKeys":["value","open override val value: Mapping","dev.tesserakt.sparql.runtime.evaluation.MappingAddition.value"]},{"name":"open override val value: Mapping","description":"dev.tesserakt.sparql.runtime.evaluation.MappingDeletion.value","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-mapping-deletion/value.html","searchKeys":["value","open override val value: Mapping","dev.tesserakt.sparql.runtime.evaluation.MappingDeletion.value"]},{"name":"open override val value: Quad","description":"dev.tesserakt.sparql.runtime.evaluation.DataAddition.value","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-data-addition/value.html","searchKeys":["value","open override val value: Quad","dev.tesserakt.sparql.runtime.evaluation.DataAddition.value"]},{"name":"open override val value: Quad","description":"dev.tesserakt.sparql.runtime.evaluation.DataDeletion.value","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-data-deletion/value.html","searchKeys":["value","open override val value: Quad","dev.tesserakt.sparql.runtime.evaluation.DataDeletion.value"]},{"name":"open override val value: T","description":"dev.tesserakt.sparql.runtime.query.QueryState.ResultChange.New.value","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-query-state/-result-change/-new/value.html","searchKeys":["value","open override val value: T","dev.tesserakt.sparql.runtime.query.QueryState.ResultChange.New.value"]},{"name":"open override val value: T","description":"dev.tesserakt.sparql.runtime.query.QueryState.ResultChange.Removed.value","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-query-state/-result-change/-removed/value.html","searchKeys":["value","open override val value: T","dev.tesserakt.sparql.runtime.query.QueryState.ResultChange.Removed.value"]},{"name":"operator fun <E : Any> invoke(stream: Stream<E>): CollectedStream<E>","description":"dev.tesserakt.sparql.runtime.stream.CollectedStream.Companion.invoke","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-collected-stream/-companion/invoke.html","searchKeys":["invoke","operator fun <E : Any> invoke(stream: Stream<E>): CollectedStream<E>","dev.tesserakt.sparql.runtime.stream.CollectedStream.Companion.invoke"]},{"name":"operator fun MappingDelta.plus(other: MappingDelta): MappingDelta?","description":"dev.tesserakt.sparql.runtime.evaluation.plus","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/plus.html","searchKeys":["plus","operator fun MappingDelta.plus(other: MappingDelta): MappingDelta?","dev.tesserakt.sparql.runtime.evaluation.plus"]},{"name":"operator fun contains(element: Int): Boolean","description":"dev.tesserakt.sparql.runtime.evaluation.BindingIdentifierSet.contains","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-binding-identifier-set/contains.html","searchKeys":["contains","operator fun contains(element: Int): Boolean","dev.tesserakt.sparql.runtime.evaluation.BindingIdentifierSet.contains"]},{"name":"operator fun contains(index: Int): Boolean","description":"dev.tesserakt.sparql.util.Bitmask.contains","location":"sparql/runtime/dev.tesserakt.sparql.util/-bitmask/contains.html","searchKeys":["contains","operator fun contains(index: Int): Boolean","dev.tesserakt.sparql.util.Bitmask.contains"]},{"name":"operator fun contains(value: T): Boolean","description":"dev.tesserakt.sparql.util.Counter.contains","location":"sparql/runtime/dev.tesserakt.sparql.util/-counter/contains.html","searchKeys":["contains","operator fun contains(value: T): Boolean","dev.tesserakt.sparql.util.Counter.contains"]},{"name":"operator fun get(index: Int): Boolean","description":"dev.tesserakt.sparql.util.Bitmask.get","location":"sparql/runtime/dev.tesserakt.sparql.util/-bitmask/get.html","searchKeys":["get","operator fun get(index: Int): Boolean","dev.tesserakt.sparql.util.Bitmask.get"]},{"name":"operator fun get(value: T): Int","description":"dev.tesserakt.sparql.util.Counter.get","location":"sparql/runtime/dev.tesserakt.sparql.util/-counter/get.html","searchKeys":["get","operator fun get(value: T): Int","dev.tesserakt.sparql.util.Counter.get"]},{"name":"operator fun invoke(context: QueryContext, parent: GroupPatternState, filter: Filter.Exists): InclusionFilterState","description":"dev.tesserakt.sparql.runtime.query.InclusionFilterState.Companion.invoke","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-inclusion-filter-state/-companion/invoke.html","searchKeys":["invoke","operator fun invoke(context: QueryContext, parent: GroupPatternState, filter: Filter.Exists): InclusionFilterState","dev.tesserakt.sparql.runtime.query.InclusionFilterState.Companion.invoke"]},{"name":"operator fun invoke(context: QueryContext, parent: GroupPatternState, filter: Filter.NotExists): ExclusionFilterState","description":"dev.tesserakt.sparql.runtime.query.ExclusionFilterState.Companion.invoke","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-exclusion-filter-state/-companion/invoke.html","searchKeys":["invoke","operator fun invoke(context: QueryContext, parent: GroupPatternState, filter: Filter.NotExists): ExclusionFilterState","dev.tesserakt.sparql.runtime.query.ExclusionFilterState.Companion.invoke"]},{"name":"operator fun invoke(context: QueryContext, parent: GroupPatternState, filters: List<Filter>): GraphPatternFilterState","description":"dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Companion.invoke","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-graph-pattern-filter-state/-companion/invoke.html","searchKeys":["invoke","operator fun invoke(context: QueryContext, parent: GroupPatternState, filters: List<Filter>): GraphPatternFilterState","dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Companion.invoke"]},{"name":"operator fun invoke(context: QueryContext, patterns: List<TriplePattern>): JoinTree","description":"dev.tesserakt.sparql.runtime.query.JoinTree.Companion.invoke","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/-companion/invoke.html","searchKeys":["invoke","operator fun invoke(context: QueryContext, patterns: List<TriplePattern>): JoinTree","dev.tesserakt.sparql.runtime.query.JoinTree.Companion.invoke"]},{"name":"operator fun invoke(context: QueryContext, patterns: List<TriplePattern>): JoinTree.Dynamic<TriplePatternState<*>>","description":"dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Companion.invoke","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/-dynamic/-companion/invoke.html","searchKeys":["invoke","operator fun invoke(context: QueryContext, patterns: List<TriplePattern>): JoinTree.Dynamic<TriplePatternState<*>>","dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Companion.invoke"]},{"name":"operator fun invoke(context: QueryContext, patterns: List<TriplePattern>): JoinTree.None<TriplePatternState<*>>","description":"dev.tesserakt.sparql.runtime.query.JoinTree.None.Companion.invoke","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/-none/-companion/invoke.html","searchKeys":["invoke","operator fun invoke(context: QueryContext, patterns: List<TriplePattern>): JoinTree.None<TriplePatternState<*>>","dev.tesserakt.sparql.runtime.query.JoinTree.None.Companion.invoke"]},{"name":"operator fun invoke(context: QueryContext, unions: List<Union>): JoinTree","description":"dev.tesserakt.sparql.runtime.query.JoinTree.Companion.invoke","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/-companion/invoke.html","searchKeys":["invoke","operator fun invoke(context: QueryContext, unions: List<Union>): JoinTree","dev.tesserakt.sparql.runtime.query.JoinTree.Companion.invoke"]},{"name":"operator fun invoke(context: QueryContext, unions: List<Union>): JoinTree.Dynamic<UnionState>","description":"dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Companion.invoke","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/-dynamic/-companion/invoke.html","searchKeys":["invoke","operator fun invoke(context: QueryContext, unions: List<Union>): JoinTree.Dynamic<UnionState>","dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Companion.invoke"]},{"name":"operator fun invoke(context: QueryContext, unions: List<Union>): JoinTree.None<UnionState>","description":"dev.tesserakt.sparql.runtime.query.JoinTree.None.Companion.invoke","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/-none/-companion/invoke.html","searchKeys":["invoke","operator fun invoke(context: QueryContext, unions: List<Union>): JoinTree.None<UnionState>","dev.tesserakt.sparql.runtime.query.JoinTree.None.Companion.invoke"]},{"name":"operator fun invoke(filters: List<MutableFilterState>): GraphPatternFilterState.Stateful","description":"dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateful.Companion.invoke","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-graph-pattern-filter-state/-stateful/-companion/invoke.html","searchKeys":["invoke","operator fun invoke(filters: List<MutableFilterState>): GraphPatternFilterState.Stateful","dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateful.Companion.invoke"]},{"name":"operator fun invoke(filters: List<StatelessFilter>): GraphPatternFilterState.Stateless","description":"dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateless.Companion.invoke","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-graph-pattern-filter-state/-stateless/-companion/invoke.html","searchKeys":["invoke","operator fun invoke(filters: List<StatelessFilter>): GraphPatternFilterState.Stateless","dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateless.Companion.invoke"]},{"name":"operator fun plus(other: Cardinality): Cardinality","description":"dev.tesserakt.sparql.util.Cardinality.plus","location":"sparql/runtime/dev.tesserakt.sparql.util/-cardinality/plus.html","searchKeys":["plus","operator fun plus(other: Cardinality): Cardinality","dev.tesserakt.sparql.util.Cardinality.plus"]},{"name":"operator fun plus(other: Mapping): Mapping","description":"dev.tesserakt.sparql.runtime.evaluation.Mapping.plus","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-mapping/plus.html","searchKeys":["plus","operator fun plus(other: Mapping): Mapping","dev.tesserakt.sparql.runtime.evaluation.Mapping.plus"]},{"name":"operator fun plus(other: Number): Cardinality","description":"dev.tesserakt.sparql.util.Cardinality.plus","location":"sparql/runtime/dev.tesserakt.sparql.util/-cardinality/plus.html","searchKeys":["plus","operator fun plus(other: Number): Cardinality","dev.tesserakt.sparql.util.Cardinality.plus"]},{"name":"operator fun times(other: Cardinality): Cardinality","description":"dev.tesserakt.sparql.util.Cardinality.times","location":"sparql/runtime/dev.tesserakt.sparql.util/-cardinality/times.html","searchKeys":["times","operator fun times(other: Cardinality): Cardinality","dev.tesserakt.sparql.util.Cardinality.times"]},{"name":"operator fun times(other: Number): Cardinality","description":"dev.tesserakt.sparql.util.Cardinality.times","location":"sparql/runtime/dev.tesserakt.sparql.util/-cardinality/times.html","searchKeys":["times","operator fun times(other: Number): Cardinality","dev.tesserakt.sparql.util.Cardinality.times"]},{"name":"override fun eval(input: FilterExpression.OperationValue): FilterExpression.OperationValue","description":"dev.tesserakt.sparql.runtime.query.FilterExpression.MathOpEval.eval","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-filter-expression/-math-op-eval/eval.html","searchKeys":["eval","override fun eval(input: FilterExpression.OperationValue): FilterExpression.OperationValue","dev.tesserakt.sparql.runtime.query.FilterExpression.MathOpEval.eval"]},{"name":"override fun join(delta: MappingDelta): Stream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.TriplePatternState.ArrayBackedPatternState.join","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-triple-pattern-state/-array-backed-pattern-state/join.html","searchKeys":["join","override fun join(delta: MappingDelta): Stream<MappingDelta>","dev.tesserakt.sparql.runtime.query.TriplePatternState.ArrayBackedPatternState.join"]},{"name":"override fun peek(delta: DataAddition): Stream<Mapping>","description":"dev.tesserakt.sparql.runtime.query.TriplePatternState.ArrayBackedPatternState.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-triple-pattern-state/-array-backed-pattern-state/peek.html","searchKeys":["peek","override fun peek(delta: DataAddition): Stream<Mapping>","dev.tesserakt.sparql.runtime.query.TriplePatternState.ArrayBackedPatternState.peek"]},{"name":"override fun peek(delta: DataDelta): OptimisedStream<MappingDelta>","description":"dev.tesserakt.sparql.runtime.query.TriplePatternState.peek","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-triple-pattern-state/peek.html","searchKeys":["peek","override fun peek(delta: DataDelta): OptimisedStream<MappingDelta>","dev.tesserakt.sparql.runtime.query.TriplePatternState.peek"]},{"name":"override fun process(delta: DataDelta)","description":"dev.tesserakt.sparql.runtime.query.TriplePatternState.ArrayBackedPatternState.process","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-triple-pattern-state/-array-backed-pattern-state/process.html","searchKeys":["process","override fun process(delta: DataDelta)","dev.tesserakt.sparql.runtime.query.TriplePatternState.ArrayBackedPatternState.process"]},{"name":"override fun toString(): String","description":"dev.tesserakt.sparql.runtime.query.TriplePatternState.toString","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-triple-pattern-state/to-string.html","searchKeys":["toString","override fun toString(): String","dev.tesserakt.sparql.runtime.query.TriplePatternState.toString"]},{"name":"override val bindings: Set<String>","description":"dev.tesserakt.sparql.runtime.query.TriplePatternState.bindings","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-triple-pattern-state/bindings.html","searchKeys":["bindings","override val bindings: Set<String>","dev.tesserakt.sparql.runtime.query.TriplePatternState.bindings"]},{"name":"sealed class ArrayBackedPatternState<P : TriplePattern.Predicate> : TriplePatternState<P> ","description":"dev.tesserakt.sparql.runtime.query.TriplePatternState.ArrayBackedPatternState","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-triple-pattern-state/-array-backed-pattern-state/index.html","searchKeys":["ArrayBackedPatternState","sealed class ArrayBackedPatternState<P : TriplePattern.Predicate> : TriplePatternState<P> ","dev.tesserakt.sparql.runtime.query.TriplePatternState.ArrayBackedPatternState"]},{"name":"sealed class MathOpEval : FilterExpression.Operation","description":"dev.tesserakt.sparql.runtime.query.FilterExpression.MathOpEval","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-filter-expression/-math-op-eval/index.html","searchKeys":["MathOpEval","sealed class MathOpEval : FilterExpression.Operation","dev.tesserakt.sparql.runtime.query.FilterExpression.MathOpEval"]},{"name":"sealed class QueryState<ResultType, Q : QueryStructure>","description":"dev.tesserakt.sparql.runtime.query.QueryState","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-query-state/index.html","searchKeys":["QueryState","sealed class QueryState<ResultType, Q : QueryStructure>","dev.tesserakt.sparql.runtime.query.QueryState"]},{"name":"sealed class RepeatingPathState","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/index.html","searchKeys":["RepeatingPathState","sealed class RepeatingPathState","dev.tesserakt.sparql.runtime.query.RepeatingPathState"]},{"name":"sealed class TriplePatternState<P : TriplePattern.Predicate> : MutableJoinState","description":"dev.tesserakt.sparql.runtime.query.TriplePatternState","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-triple-pattern-state/index.html","searchKeys":["TriplePatternState","sealed class TriplePatternState<P : TriplePattern.Predicate> : MutableJoinState","dev.tesserakt.sparql.runtime.query.TriplePatternState"]},{"name":"sealed interface AdditionDelta : Delta","description":"dev.tesserakt.sparql.runtime.evaluation.AdditionDelta","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-addition-delta/index.html","searchKeys":["AdditionDelta","sealed interface AdditionDelta : Delta","dev.tesserakt.sparql.runtime.evaluation.AdditionDelta"]},{"name":"sealed interface ComparisonEval : FilterExpression.Operation","description":"dev.tesserakt.sparql.runtime.query.FilterExpression.ComparisonEval","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-filter-expression/-comparison-eval/index.html","searchKeys":["ComparisonEval","sealed interface ComparisonEval : FilterExpression.Operation","dev.tesserakt.sparql.runtime.query.FilterExpression.ComparisonEval"]},{"name":"sealed interface DataDelta : Delta","description":"dev.tesserakt.sparql.runtime.evaluation.DataDelta","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-data-delta/index.html","searchKeys":["DataDelta","sealed interface DataDelta : Delta","dev.tesserakt.sparql.runtime.evaluation.DataDelta"]},{"name":"sealed interface DeletionDelta : Delta","description":"dev.tesserakt.sparql.runtime.evaluation.DeletionDelta","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-deletion-delta/index.html","searchKeys":["DeletionDelta","sealed interface DeletionDelta : Delta","dev.tesserakt.sparql.runtime.evaluation.DeletionDelta"]},{"name":"sealed interface Delta","description":"dev.tesserakt.sparql.runtime.evaluation.Delta","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-delta/index.html","searchKeys":["Delta","sealed interface Delta","dev.tesserakt.sparql.runtime.evaluation.Delta"]},{"name":"sealed interface ExclusionFilterState : MutableFilterState","description":"dev.tesserakt.sparql.runtime.query.ExclusionFilterState","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-exclusion-filter-state/index.html","searchKeys":["ExclusionFilterState","sealed interface ExclusionFilterState : MutableFilterState","dev.tesserakt.sparql.runtime.query.ExclusionFilterState"]},{"name":"sealed interface InclusionFilterState : MutableFilterState","description":"dev.tesserakt.sparql.runtime.query.InclusionFilterState","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-inclusion-filter-state/index.html","searchKeys":["InclusionFilterState","sealed interface InclusionFilterState : MutableFilterState","dev.tesserakt.sparql.runtime.query.InclusionFilterState"]},{"name":"sealed interface JoinTree : MutableJoinState","description":"dev.tesserakt.sparql.runtime.query.JoinTree","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/index.html","searchKeys":["JoinTree","sealed interface JoinTree : MutableJoinState","dev.tesserakt.sparql.runtime.query.JoinTree"]},{"name":"sealed interface MappingDelta : Delta","description":"dev.tesserakt.sparql.runtime.evaluation.MappingDelta","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-mapping-delta/index.html","searchKeys":["MappingDelta","sealed interface MappingDelta : Delta","dev.tesserakt.sparql.runtime.evaluation.MappingDelta"]},{"name":"sealed interface Node<J : MutableJoinState>","description":"dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/-dynamic/-node/index.html","searchKeys":["Node","sealed interface Node<J : MutableJoinState>","dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node"]},{"name":"sealed interface OperationValue","description":"dev.tesserakt.sparql.runtime.query.FilterExpression.OperationValue","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-filter-expression/-operation-value/index.html","searchKeys":["OperationValue","sealed interface OperationValue","dev.tesserakt.sparql.runtime.query.FilterExpression.OperationValue"]},{"name":"sealed interface ResultChange<T>","description":"dev.tesserakt.sparql.runtime.query.QueryState.ResultChange","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-query-state/-result-change/index.html","searchKeys":["ResultChange","sealed interface ResultChange<T>","dev.tesserakt.sparql.runtime.query.QueryState.ResultChange"]},{"name":"sealed interface Stateful","description":"dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateful","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-graph-pattern-filter-state/-stateful/index.html","searchKeys":["Stateful","sealed interface Stateful","dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateful"]},{"name":"sealed interface Stateless","description":"dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateless","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-graph-pattern-filter-state/-stateless/index.html","searchKeys":["Stateless","sealed interface Stateless","dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateless"]},{"name":"val EMPTY: Mapping","description":"dev.tesserakt.sparql.runtime.evaluation.Mapping.Companion.EMPTY","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-mapping/-companion/-e-m-p-t-y.html","searchKeys":["EMPTY","val EMPTY: Mapping","dev.tesserakt.sparql.runtime.evaluation.Mapping.Companion.EMPTY"]},{"name":"val EmptyMapping: Mapping","description":"dev.tesserakt.sparql.runtime.evaluation.EmptyMapping","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-empty-mapping.html","searchKeys":["EmptyMapping","val EmptyMapping: Mapping","dev.tesserakt.sparql.runtime.evaluation.EmptyMapping"]},{"name":"val OneCardinality: Cardinality","description":"dev.tesserakt.sparql.util.OneCardinality","location":"sparql/runtime/dev.tesserakt.sparql.util/-one-cardinality.html","searchKeys":["OneCardinality","val OneCardinality: Cardinality","dev.tesserakt.sparql.util.OneCardinality"]},{"name":"val ZeroCardinality: Cardinality","description":"dev.tesserakt.sparql.util.ZeroCardinality","location":"sparql/runtime/dev.tesserakt.sparql.util/-zero-cardinality.html","searchKeys":["ZeroCardinality","val ZeroCardinality: Cardinality","dev.tesserakt.sparql.util.ZeroCardinality"]},{"name":"val bindings: Set<String>","description":"dev.tesserakt.sparql.runtime.query.BasicGraphPatternState.bindings","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-basic-graph-pattern-state/bindings.html","searchKeys":["bindings","val bindings: Set<String>","dev.tesserakt.sparql.runtime.query.BasicGraphPatternState.bindings"]},{"name":"val cardinality: Cardinality","description":"dev.tesserakt.sparql.runtime.query.BasicGraphPatternState.cardinality","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-basic-graph-pattern-state/cardinality.html","searchKeys":["cardinality","val cardinality: Cardinality","dev.tesserakt.sparql.runtime.query.BasicGraphPatternState.cardinality"]},{"name":"val context: QueryContext","description":"dev.tesserakt.sparql.runtime.query.BasicGraphPatternState.context","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-basic-graph-pattern-state/context.html","searchKeys":["context","val context: QueryContext","dev.tesserakt.sparql.runtime.query.BasicGraphPatternState.context"]},{"name":"val context: QueryContext","description":"dev.tesserakt.sparql.runtime.query.FilterExpression.ComparisonEval.EQ.context","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-filter-expression/-comparison-eval/-e-q/context.html","searchKeys":["context","val context: QueryContext","dev.tesserakt.sparql.runtime.query.FilterExpression.ComparisonEval.EQ.context"]},{"name":"val context: QueryContext","description":"dev.tesserakt.sparql.runtime.query.FilterExpression.ComparisonEval.GT.context","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-filter-expression/-comparison-eval/-g-t/context.html","searchKeys":["context","val context: QueryContext","dev.tesserakt.sparql.runtime.query.FilterExpression.ComparisonEval.GT.context"]},{"name":"val context: QueryContext","description":"dev.tesserakt.sparql.runtime.query.FilterExpression.ComparisonEval.GTEQ.context","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-filter-expression/-comparison-eval/-g-t-e-q/context.html","searchKeys":["context","val context: QueryContext","dev.tesserakt.sparql.runtime.query.FilterExpression.ComparisonEval.GTEQ.context"]},{"name":"val context: QueryContext","description":"dev.tesserakt.sparql.runtime.query.FilterExpression.ComparisonEval.LT.context","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-filter-expression/-comparison-eval/-l-t/context.html","searchKeys":["context","val context: QueryContext","dev.tesserakt.sparql.runtime.query.FilterExpression.ComparisonEval.LT.context"]},{"name":"val context: QueryContext","description":"dev.tesserakt.sparql.runtime.query.FilterExpression.ComparisonEval.LTEQ.context","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-filter-expression/-comparison-eval/-l-t-e-q/context.html","searchKeys":["context","val context: QueryContext","dev.tesserakt.sparql.runtime.query.FilterExpression.ComparisonEval.LTEQ.context"]},{"name":"val context: QueryContext","description":"dev.tesserakt.sparql.runtime.query.FilterExpression.ComparisonEval.NEQ.context","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-filter-expression/-comparison-eval/-n-e-q/context.html","searchKeys":["context","val context: QueryContext","dev.tesserakt.sparql.runtime.query.FilterExpression.ComparisonEval.NEQ.context"]},{"name":"val context: QueryContext","description":"dev.tesserakt.sparql.runtime.query.FilterExpression.MathOpEval.context","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-filter-expression/-math-op-eval/context.html","searchKeys":["context","val context: QueryContext","dev.tesserakt.sparql.runtime.query.FilterExpression.MathOpEval.context"]},{"name":"val context: QueryContext","description":"dev.tesserakt.sparql.runtime.query.FilterExpression.context","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-filter-expression/context.html","searchKeys":["context","val context: QueryContext","dev.tesserakt.sparql.runtime.query.FilterExpression.context"]},{"name":"val context: QueryContext","description":"dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node.Disconnected.context","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/-dynamic/-node/-disconnected/context.html","searchKeys":["context","val context: QueryContext","dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node.Disconnected.context"]},{"name":"val context: QueryContext","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulBindingExact.context","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateful-binding-exact/context.html","searchKeys":["context","val context: QueryContext","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulBindingExact.context"]},{"name":"val context: QueryContext","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulBindings.context","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateful-bindings/context.html","searchKeys":["context","val context: QueryContext","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulBindings.context"]},{"name":"val context: QueryContext","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulExact.context","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateful-exact/context.html","searchKeys":["context","val context: QueryContext","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulExact.context"]},{"name":"val context: QueryContext","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulExactBinding.context","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateful-exact-binding/context.html","searchKeys":["context","val context: QueryContext","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulExactBinding.context"]},{"name":"val context: QueryContext","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessBindingExact.context","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateless-binding-exact/context.html","searchKeys":["context","val context: QueryContext","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessBindingExact.context"]},{"name":"val context: QueryContext","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessBindings.context","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateless-bindings/context.html","searchKeys":["context","val context: QueryContext","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessBindings.context"]},{"name":"val context: QueryContext","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessExact.context","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateless-exact/context.html","searchKeys":["context","val context: QueryContext","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessExact.context"]},{"name":"val context: QueryContext","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessExactBinding.context","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateless-exact-binding/context.html","searchKeys":["context","val context: QueryContext","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessExactBinding.context"]},{"name":"val context: QueryContext","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulBindingExact.context","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateful-binding-exact/context.html","searchKeys":["context","val context: QueryContext","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulBindingExact.context"]},{"name":"val context: QueryContext","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulBindings.context","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateful-bindings/context.html","searchKeys":["context","val context: QueryContext","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulBindings.context"]},{"name":"val context: QueryContext","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulExact.context","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateful-exact/context.html","searchKeys":["context","val context: QueryContext","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulExact.context"]},{"name":"val context: QueryContext","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulExactBinding.context","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateful-exact-binding/context.html","searchKeys":["context","val context: QueryContext","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulExactBinding.context"]},{"name":"val context: QueryContext","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessBindingExact.context","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateless-binding-exact/context.html","searchKeys":["context","val context: QueryContext","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessBindingExact.context"]},{"name":"val context: QueryContext","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessBindings.context","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateless-bindings/context.html","searchKeys":["context","val context: QueryContext","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessBindings.context"]},{"name":"val context: QueryContext","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessExact.context","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateless-exact/context.html","searchKeys":["context","val context: QueryContext","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessExact.context"]},{"name":"val context: QueryContext","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessExactBinding.context","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateless-exact-binding/context.html","searchKeys":["context","val context: QueryContext","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessExactBinding.context"]},{"name":"val context: QueryContext","description":"dev.tesserakt.sparql.runtime.query.TriplePatternState.context","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-triple-pattern-state/context.html","searchKeys":["context","val context: QueryContext","dev.tesserakt.sparql.runtime.query.TriplePatternState.context"]},{"name":"val context: QueryContextImpl","description":"dev.tesserakt.sparql.runtime.query.QueryState.Processor.context","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-query-state/-processor/context.html","searchKeys":["context","val context: QueryContextImpl","dev.tesserakt.sparql.runtime.query.QueryState.Processor.context"]},{"name":"val current: Set<T>","description":"dev.tesserakt.sparql.util.Counter.current","location":"sparql/runtime/dev.tesserakt.sparql.util/-counter/current.html","searchKeys":["current","val current: Set<T>","dev.tesserakt.sparql.util.Counter.current"]},{"name":"val end: Quad.Term","description":"dev.tesserakt.sparql.util.SegmentsList.Segment.end","location":"sparql/runtime/dev.tesserakt.sparql.util/-segments-list/-segment/end.html","searchKeys":["end","val end: Quad.Term","dev.tesserakt.sparql.util.SegmentsList.Segment.end"]},{"name":"val end: TriplePattern.Binding","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulBindings.end","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateful-bindings/end.html","searchKeys":["end","val end: TriplePattern.Binding","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulBindings.end"]},{"name":"val end: TriplePattern.Binding","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulExactBinding.end","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateful-exact-binding/end.html","searchKeys":["end","val end: TriplePattern.Binding","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulExactBinding.end"]},{"name":"val end: TriplePattern.Binding","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessBindings.end","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateless-bindings/end.html","searchKeys":["end","val end: TriplePattern.Binding","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessBindings.end"]},{"name":"val end: TriplePattern.Binding","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessExactBinding.end","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateless-exact-binding/end.html","searchKeys":["end","val end: TriplePattern.Binding","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessExactBinding.end"]},{"name":"val end: TriplePattern.Binding","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulBindings.end","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateful-bindings/end.html","searchKeys":["end","val end: TriplePattern.Binding","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulBindings.end"]},{"name":"val end: TriplePattern.Binding","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulExactBinding.end","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateful-exact-binding/end.html","searchKeys":["end","val end: TriplePattern.Binding","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulExactBinding.end"]},{"name":"val end: TriplePattern.Binding","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessBindings.end","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateless-bindings/end.html","searchKeys":["end","val end: TriplePattern.Binding","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessBindings.end"]},{"name":"val end: TriplePattern.Binding","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessExactBinding.end","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateless-exact-binding/end.html","searchKeys":["end","val end: TriplePattern.Binding","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessExactBinding.end"]},{"name":"val end: TriplePattern.Exact","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulBindingExact.end","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateful-binding-exact/end.html","searchKeys":["end","val end: TriplePattern.Exact","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulBindingExact.end"]},{"name":"val end: TriplePattern.Exact","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulExact.end","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateful-exact/end.html","searchKeys":["end","val end: TriplePattern.Exact","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulExact.end"]},{"name":"val end: TriplePattern.Exact","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessBindingExact.end","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateless-binding-exact/end.html","searchKeys":["end","val end: TriplePattern.Exact","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessBindingExact.end"]},{"name":"val end: TriplePattern.Exact","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessExact.end","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateless-exact/end.html","searchKeys":["end","val end: TriplePattern.Exact","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessExact.end"]},{"name":"val end: TriplePattern.Exact","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulBindingExact.end","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateful-binding-exact/end.html","searchKeys":["end","val end: TriplePattern.Exact","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulBindingExact.end"]},{"name":"val end: TriplePattern.Exact","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulExact.end","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateful-exact/end.html","searchKeys":["end","val end: TriplePattern.Exact","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulExact.end"]},{"name":"val end: TriplePattern.Exact","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessBindingExact.end","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateless-binding-exact/end.html","searchKeys":["end","val end: TriplePattern.Exact","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessBindingExact.end"]},{"name":"val end: TriplePattern.Exact","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessExact.end","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateless-exact/end.html","searchKeys":["end","val end: TriplePattern.Exact","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessExact.end"]},{"name":"val id: Int","description":"dev.tesserakt.sparql.runtime.evaluation.BindingIdentifier.id","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-binding-identifier/id.html","searchKeys":["id","val id: Int","dev.tesserakt.sparql.runtime.evaluation.BindingIdentifier.id"]},{"name":"val id: Int","description":"dev.tesserakt.sparql.runtime.evaluation.TermIdentifier.id","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-term-identifier/id.html","searchKeys":["id","val id: Int","dev.tesserakt.sparql.runtime.evaluation.TermIdentifier.id"]},{"name":"val inner: TriplePattern.StatelessPredicate","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessBindingExact.inner","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateless-binding-exact/inner.html","searchKeys":["inner","val inner: TriplePattern.StatelessPredicate","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessBindingExact.inner"]},{"name":"val inner: TriplePattern.StatelessPredicate","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessBindings.inner","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateless-bindings/inner.html","searchKeys":["inner","val inner: TriplePattern.StatelessPredicate","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessBindings.inner"]},{"name":"val inner: TriplePattern.StatelessPredicate","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessExact.inner","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateless-exact/inner.html","searchKeys":["inner","val inner: TriplePattern.StatelessPredicate","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessExact.inner"]},{"name":"val inner: TriplePattern.StatelessPredicate","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessExactBinding.inner","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateless-exact-binding/inner.html","searchKeys":["inner","val inner: TriplePattern.StatelessPredicate","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessExactBinding.inner"]},{"name":"val inner: TriplePattern.StatelessPredicate","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessBindingExact.inner","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateless-binding-exact/inner.html","searchKeys":["inner","val inner: TriplePattern.StatelessPredicate","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessBindingExact.inner"]},{"name":"val inner: TriplePattern.StatelessPredicate","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessBindings.inner","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateless-bindings/inner.html","searchKeys":["inner","val inner: TriplePattern.StatelessPredicate","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessBindings.inner"]},{"name":"val inner: TriplePattern.StatelessPredicate","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessExact.inner","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateless-exact/inner.html","searchKeys":["inner","val inner: TriplePattern.StatelessPredicate","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessExact.inner"]},{"name":"val inner: TriplePattern.StatelessPredicate","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessExactBinding.inner","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateless-exact-binding/inner.html","searchKeys":["inner","val inner: TriplePattern.StatelessPredicate","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessExactBinding.inner"]},{"name":"val input: Stream<E>","description":"dev.tesserakt.sparql.runtime.stream.OptimisedStreamView.input","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-optimised-stream-view/input.html","searchKeys":["input","val input: Stream<E>","dev.tesserakt.sparql.runtime.stream.OptimisedStreamView.input"]},{"name":"val left: L","description":"dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node.Disconnected.left","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/-dynamic/-node/-disconnected/left.html","searchKeys":["left","val left: L","dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node.Disconnected.left"]},{"name":"val lhs: FilterExpression.Operation","description":"dev.tesserakt.sparql.runtime.query.FilterExpression.MathOpEval.lhs","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-filter-expression/-math-op-eval/lhs.html","searchKeys":["lhs","val lhs: FilterExpression.Operation","dev.tesserakt.sparql.runtime.query.FilterExpression.MathOpEval.lhs"]},{"name":"val mapping: Mapping","description":"dev.tesserakt.sparql.runtime.query.FilterExpression.OperationValue.SingleMapping.mapping","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-filter-expression/-operation-value/-single-mapping/mapping.html","searchKeys":["mapping","val mapping: Mapping","dev.tesserakt.sparql.runtime.query.FilterExpression.OperationValue.SingleMapping.mapping"]},{"name":"val o: TriplePattern.Object","description":"dev.tesserakt.sparql.runtime.query.TriplePatternState.o","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-triple-pattern-state/o.html","searchKeys":["o","val o: TriplePattern.Object","dev.tesserakt.sparql.runtime.query.TriplePatternState.o"]},{"name":"val p: P","description":"dev.tesserakt.sparql.runtime.query.TriplePatternState.p","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-triple-pattern-state/p.html","searchKeys":["p","val p: P","dev.tesserakt.sparql.runtime.query.TriplePatternState.p"]},{"name":"val paths: Set<SegmentsList.Segment>","description":"dev.tesserakt.sparql.util.SegmentsList.paths","location":"sparql/runtime/dev.tesserakt.sparql.util/-segments-list/paths.html","searchKeys":["paths","val paths: Set<SegmentsList.Segment>","dev.tesserakt.sparql.util.SegmentsList.paths"]},{"name":"val pred: TriplePattern.Exact","description":"dev.tesserakt.sparql.runtime.query.TriplePatternState.ExactPatternState.pred","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-triple-pattern-state/-exact-pattern-state/pred.html","searchKeys":["pred","val pred: TriplePattern.Exact","dev.tesserakt.sparql.runtime.query.TriplePatternState.ExactPatternState.pred"]},{"name":"val pred: TriplePattern.Negated","description":"dev.tesserakt.sparql.runtime.query.TriplePatternState.NegatedPatternState.pred","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-triple-pattern-state/-negated-pattern-state/pred.html","searchKeys":["pred","val pred: TriplePattern.Negated","dev.tesserakt.sparql.runtime.query.TriplePatternState.NegatedPatternState.pred"]},{"name":"val rhs: FilterExpression.Operation","description":"dev.tesserakt.sparql.runtime.query.FilterExpression.MathOpEval.rhs","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-filter-expression/-math-op-eval/rhs.html","searchKeys":["rhs","val rhs: FilterExpression.Operation","dev.tesserakt.sparql.runtime.query.FilterExpression.MathOpEval.rhs"]},{"name":"val right: R","description":"dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node.Disconnected.right","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/-dynamic/-node/-disconnected/right.html","searchKeys":["right","val right: R","dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node.Disconnected.right"]},{"name":"val s: TriplePattern.Subject","description":"dev.tesserakt.sparql.runtime.query.TriplePatternState.s","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-triple-pattern-state/s.html","searchKeys":["s","val s: TriplePattern.Subject","dev.tesserakt.sparql.runtime.query.TriplePatternState.s"]},{"name":"val size: Int","description":"dev.tesserakt.sparql.runtime.collection.MultiHashMappingArray.size","location":"sparql/runtime/dev.tesserakt.sparql.runtime.collection/-multi-hash-mapping-array/size.html","searchKeys":["size","val size: Int","dev.tesserakt.sparql.runtime.collection.MultiHashMappingArray.size"]},{"name":"val size: Int","description":"dev.tesserakt.sparql.runtime.evaluation.BindingIdentifierSet.size","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-binding-identifier-set/size.html","searchKeys":["size","val size: Int","dev.tesserakt.sparql.runtime.evaluation.BindingIdentifierSet.size"]},{"name":"val source1: Stream<E>","description":"dev.tesserakt.sparql.runtime.stream.StreamChain.source1","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-chain/source1.html","searchKeys":["source1","val source1: Stream<E>","dev.tesserakt.sparql.runtime.stream.StreamChain.source1"]},{"name":"val source2: Stream<E>","description":"dev.tesserakt.sparql.runtime.stream.StreamChain.source2","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-chain/source2.html","searchKeys":["source2","val source2: Stream<E>","dev.tesserakt.sparql.runtime.stream.StreamChain.source2"]},{"name":"val start: Quad.Term","description":"dev.tesserakt.sparql.util.SegmentsList.Segment.start","location":"sparql/runtime/dev.tesserakt.sparql.util/-segments-list/-segment/start.html","searchKeys":["start","val start: Quad.Term","dev.tesserakt.sparql.util.SegmentsList.Segment.start"]},{"name":"val start: TriplePattern.Binding","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulBindingExact.start","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateful-binding-exact/start.html","searchKeys":["start","val start: TriplePattern.Binding","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulBindingExact.start"]},{"name":"val start: TriplePattern.Binding","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulBindings.start","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateful-bindings/start.html","searchKeys":["start","val start: TriplePattern.Binding","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulBindings.start"]},{"name":"val start: TriplePattern.Binding","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessBindingExact.start","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateless-binding-exact/start.html","searchKeys":["start","val start: TriplePattern.Binding","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessBindingExact.start"]},{"name":"val start: TriplePattern.Binding","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessBindings.start","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateless-bindings/start.html","searchKeys":["start","val start: TriplePattern.Binding","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessBindings.start"]},{"name":"val start: TriplePattern.Binding","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulBindingExact.start","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateful-binding-exact/start.html","searchKeys":["start","val start: TriplePattern.Binding","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulBindingExact.start"]},{"name":"val start: TriplePattern.Binding","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulBindings.start","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateful-bindings/start.html","searchKeys":["start","val start: TriplePattern.Binding","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulBindings.start"]},{"name":"val start: TriplePattern.Binding","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessBindingExact.start","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateless-binding-exact/start.html","searchKeys":["start","val start: TriplePattern.Binding","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessBindingExact.start"]},{"name":"val start: TriplePattern.Binding","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessBindings.start","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateless-bindings/start.html","searchKeys":["start","val start: TriplePattern.Binding","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessBindings.start"]},{"name":"val start: TriplePattern.Exact","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulExact.start","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateful-exact/start.html","searchKeys":["start","val start: TriplePattern.Exact","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulExact.start"]},{"name":"val start: TriplePattern.Exact","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulExactBinding.start","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateful-exact-binding/start.html","searchKeys":["start","val start: TriplePattern.Exact","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatefulExactBinding.start"]},{"name":"val start: TriplePattern.Exact","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessExact.start","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateless-exact/start.html","searchKeys":["start","val start: TriplePattern.Exact","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessExact.start"]},{"name":"val start: TriplePattern.Exact","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessExactBinding.start","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-one-or-more-stateless-exact-binding/start.html","searchKeys":["start","val start: TriplePattern.Exact","dev.tesserakt.sparql.runtime.query.RepeatingPathState.OneOrMoreStatelessExactBinding.start"]},{"name":"val start: TriplePattern.Exact","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulExact.start","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateful-exact/start.html","searchKeys":["start","val start: TriplePattern.Exact","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulExact.start"]},{"name":"val start: TriplePattern.Exact","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulExactBinding.start","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateful-exact-binding/start.html","searchKeys":["start","val start: TriplePattern.Exact","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatefulExactBinding.start"]},{"name":"val start: TriplePattern.Exact","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessExact.start","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateless-exact/start.html","searchKeys":["start","val start: TriplePattern.Exact","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessExact.start"]},{"name":"val start: TriplePattern.Exact","description":"dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessExactBinding.start","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-repeating-path-state/-zero-or-more-stateless-exact-binding/start.html","searchKeys":["start","val start: TriplePattern.Exact","dev.tesserakt.sparql.runtime.query.RepeatingPathState.ZeroOrMoreStatelessExactBinding.start"]},{"name":"val state: J","description":"dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node.Leaf.state","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/-dynamic/-node/-leaf/state.html","searchKeys":["state","val state: J","dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node.Leaf.state"]},{"name":"val term: Quad.Term","description":"dev.tesserakt.sparql.runtime.query.FilterExpression.OperationValue.SingleValue.term","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-filter-expression/-operation-value/-single-value/term.html","searchKeys":["term","val term: Quad.Term","dev.tesserakt.sparql.runtime.query.FilterExpression.OperationValue.SingleValue.term"]},{"name":"val term: TermIdentifier","description":"dev.tesserakt.sparql.runtime.query.FilterExpression.OperationValue.SingleValueIdentifier.term","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-filter-expression/-operation-value/-single-value-identifier/term.html","searchKeys":["term","val term: TermIdentifier","dev.tesserakt.sparql.runtime.query.FilterExpression.OperationValue.SingleValueIdentifier.term"]},{"name":"val variables: Set<String>","description":"dev.tesserakt.sparql.runtime.query.SelectQueryState.variables","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-select-query-state/variables.html","searchKeys":["variables","val variables: Set<String>","dev.tesserakt.sparql.runtime.query.SelectQueryState.variables"]},{"name":"value class BindingIdentifier(val id: Int)","description":"dev.tesserakt.sparql.runtime.evaluation.BindingIdentifier","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-binding-identifier/index.html","searchKeys":["BindingIdentifier","value class BindingIdentifier(val id: Int)","dev.tesserakt.sparql.runtime.evaluation.BindingIdentifier"]},{"name":"value class Cardinality(value: Double) : Comparable<Cardinality> ","description":"dev.tesserakt.sparql.util.Cardinality","location":"sparql/runtime/dev.tesserakt.sparql.util/-cardinality/index.html","searchKeys":["Cardinality","value class Cardinality(value: Double) : Comparable<Cardinality> ","dev.tesserakt.sparql.util.Cardinality"]},{"name":"value class CollectedStream<E : Any>(data: List<E>) : Stream<E> , OptimisedStream<E> , List<E> ","description":"dev.tesserakt.sparql.runtime.stream.CollectedStream","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-collected-stream/index.html","searchKeys":["CollectedStream","value class CollectedStream<E : Any>(data: List<E>) : Stream<E> , OptimisedStream<E> , List<E> ","dev.tesserakt.sparql.runtime.stream.CollectedStream"]},{"name":"value class Counter<T> : Iterable<Map.Entry<T, Int>> ","description":"dev.tesserakt.sparql.util.Counter","location":"sparql/runtime/dev.tesserakt.sparql.util/-counter/index.html","searchKeys":["Counter","value class Counter<T> : Iterable<Map.Entry<T, Int>> ","dev.tesserakt.sparql.util.Counter"]},{"name":"value class DataAddition(val value: Quad) : AdditionDelta, DataDelta","description":"dev.tesserakt.sparql.runtime.evaluation.DataAddition","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-data-addition/index.html","searchKeys":["DataAddition","value class DataAddition(val value: Quad) : AdditionDelta, DataDelta","dev.tesserakt.sparql.runtime.evaluation.DataAddition"]},{"name":"value class DataDeletion(val value: Quad) : DeletionDelta, DataDelta","description":"dev.tesserakt.sparql.runtime.evaluation.DataDeletion","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-data-deletion/index.html","searchKeys":["DataDeletion","value class DataDeletion(val value: Quad) : DeletionDelta, DataDelta","dev.tesserakt.sparql.runtime.evaluation.DataDeletion"]},{"name":"value class Dynamic<J : MutableJoinState> : JoinTree","description":"dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/-dynamic/index.html","searchKeys":["Dynamic","value class Dynamic<J : MutableJoinState> : JoinTree","dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic"]},{"name":"value class ExpressionFilter : StatelessFilter","description":"dev.tesserakt.sparql.runtime.query.ExpressionFilter","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-expression-filter/index.html","searchKeys":["ExpressionFilter","value class ExpressionFilter : StatelessFilter","dev.tesserakt.sparql.runtime.query.ExpressionFilter"]},{"name":"value class IdIterator(iterator: IntIterator) : Iterator<BindingIdentifier> ","description":"dev.tesserakt.sparql.runtime.evaluation.BindingIdentifierSet.IdIterator","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-binding-identifier-set/-id-iterator/index.html","searchKeys":["IdIterator","value class IdIterator(iterator: IntIterator) : Iterator<BindingIdentifier> ","dev.tesserakt.sparql.runtime.evaluation.BindingIdentifierSet.IdIterator"]},{"name":"value class Leaf<J : MutableJoinState>(val state: J) : JoinTree.Dynamic.Node<J> ","description":"dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node.Leaf","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/-dynamic/-node/-leaf/index.html","searchKeys":["Leaf","value class Leaf<J : MutableJoinState>(val state: J) : JoinTree.Dynamic.Node<J> ","dev.tesserakt.sparql.runtime.query.JoinTree.Dynamic.Node.Leaf"]},{"name":"value class Mapping","description":"dev.tesserakt.sparql.runtime.evaluation.Mapping","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-mapping/index.html","searchKeys":["Mapping","value class Mapping","dev.tesserakt.sparql.runtime.evaluation.Mapping"]},{"name":"value class MultiFilter(filters: CollectedStream<MutableFilterState>) : GraphPatternFilterState.Stateful","description":"dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateful.MultiFilter","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-graph-pattern-filter-state/-stateful/-multi-filter/index.html","searchKeys":["MultiFilter","value class MultiFilter(filters: CollectedStream<MutableFilterState>) : GraphPatternFilterState.Stateful","dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateful.MultiFilter"]},{"name":"value class MultiFilter(filters: CollectedStream<StatelessFilter>) : GraphPatternFilterState.Stateless","description":"dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateless.MultiFilter","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-graph-pattern-filter-state/-stateless/-multi-filter/index.html","searchKeys":["MultiFilter","value class MultiFilter(filters: CollectedStream<StatelessFilter>) : GraphPatternFilterState.Stateless","dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateless.MultiFilter"]},{"name":"value class New<T>(val value: T) : QueryState.ResultChange<T> ","description":"dev.tesserakt.sparql.runtime.query.QueryState.ResultChange.New","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-query-state/-result-change/-new/index.html","searchKeys":["New","value class New<T>(val value: T) : QueryState.ResultChange<T> ","dev.tesserakt.sparql.runtime.query.QueryState.ResultChange.New"]},{"name":"value class None<J : MutableJoinState>(states: List<J>) : JoinTree","description":"dev.tesserakt.sparql.runtime.query.JoinTree.None","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-join-tree/-none/index.html","searchKeys":["None","value class None<J : MutableJoinState>(states: List<J>) : JoinTree","dev.tesserakt.sparql.runtime.query.JoinTree.None"]},{"name":"value class OptimisedStreamView<E : Any>(val input: Stream<E>) : Stream<E> , OptimisedStream<E> ","description":"dev.tesserakt.sparql.runtime.stream.OptimisedStreamView","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-optimised-stream-view/index.html","searchKeys":["OptimisedStreamView","value class OptimisedStreamView<E : Any>(val input: Stream<E>) : Stream<E> , OptimisedStream<E> ","dev.tesserakt.sparql.runtime.stream.OptimisedStreamView"]},{"name":"value class Removed<T>(val value: T) : QueryState.ResultChange<T> ","description":"dev.tesserakt.sparql.runtime.query.QueryState.ResultChange.Removed","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-query-state/-result-change/-removed/index.html","searchKeys":["Removed","value class Removed<T>(val value: T) : QueryState.ResultChange<T> ","dev.tesserakt.sparql.runtime.query.QueryState.ResultChange.Removed"]},{"name":"value class SimpleMappingArray(val mappings: ArrayList<Mapping> = ArrayList()) : MappingArray","description":"dev.tesserakt.sparql.runtime.collection.SimpleMappingArray","location":"sparql/runtime/dev.tesserakt.sparql.runtime.collection/-simple-mapping-array/index.html","searchKeys":["SimpleMappingArray","value class SimpleMappingArray(val mappings: ArrayList<Mapping> = ArrayList()) : MappingArray","dev.tesserakt.sparql.runtime.collection.SimpleMappingArray"]},{"name":"value class SingleFilter(filter: MutableFilterState) : GraphPatternFilterState.Stateful","description":"dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateful.SingleFilter","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-graph-pattern-filter-state/-stateful/-single-filter/index.html","searchKeys":["SingleFilter","value class SingleFilter(filter: MutableFilterState) : GraphPatternFilterState.Stateful","dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateful.SingleFilter"]},{"name":"value class SingleFilter(filter: StatelessFilter) : GraphPatternFilterState.Stateless","description":"dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateless.SingleFilter","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-graph-pattern-filter-state/-stateless/-single-filter/index.html","searchKeys":["SingleFilter","value class SingleFilter(filter: StatelessFilter) : GraphPatternFilterState.Stateless","dev.tesserakt.sparql.runtime.query.GraphPatternFilterState.Stateless.SingleFilter"]},{"name":"value class SingleMapping(val mapping: Mapping) : FilterExpression.OperationValue","description":"dev.tesserakt.sparql.runtime.query.FilterExpression.OperationValue.SingleMapping","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-filter-expression/-operation-value/-single-mapping/index.html","searchKeys":["SingleMapping","value class SingleMapping(val mapping: Mapping) : FilterExpression.OperationValue","dev.tesserakt.sparql.runtime.query.FilterExpression.OperationValue.SingleMapping"]},{"name":"value class SingleStream<E : Any>(element: E) : Stream<E> , OptimisedStream<E> ","description":"dev.tesserakt.sparql.runtime.stream.SingleStream","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-single-stream/index.html","searchKeys":["SingleStream","value class SingleStream<E : Any>(element: E) : Stream<E> , OptimisedStream<E> ","dev.tesserakt.sparql.runtime.stream.SingleStream"]},{"name":"value class SingleValue(val term: Quad.Term) : FilterExpression.OperationValue","description":"dev.tesserakt.sparql.runtime.query.FilterExpression.OperationValue.SingleValue","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-filter-expression/-operation-value/-single-value/index.html","searchKeys":["SingleValue","value class SingleValue(val term: Quad.Term) : FilterExpression.OperationValue","dev.tesserakt.sparql.runtime.query.FilterExpression.OperationValue.SingleValue"]},{"name":"value class SingleValueIdentifier(val term: TermIdentifier) : FilterExpression.OperationValue","description":"dev.tesserakt.sparql.runtime.query.FilterExpression.OperationValue.SingleValueIdentifier","location":"sparql/runtime/dev.tesserakt.sparql.runtime.query/-filter-expression/-operation-value/-single-value-identifier/index.html","searchKeys":["SingleValueIdentifier","value class SingleValueIdentifier(val term: TermIdentifier) : FilterExpression.OperationValue","dev.tesserakt.sparql.runtime.query.FilterExpression.OperationValue.SingleValueIdentifier"]},{"name":"value class StreamWithIndex<I : Any>(parent: Stream<I>) : Stream<Pair<Int, I>> ","description":"dev.tesserakt.sparql.runtime.stream.StreamWithIndex","location":"sparql/runtime/dev.tesserakt.sparql.runtime.stream/-stream-with-index/index.html","searchKeys":["StreamWithIndex","value class StreamWithIndex<I : Any>(parent: Stream<I>) : Stream<Pair<Int, I>> ","dev.tesserakt.sparql.runtime.stream.StreamWithIndex"]},{"name":"value class TermIdentifier(val id: Int)","description":"dev.tesserakt.sparql.runtime.evaluation.TermIdentifier","location":"sparql/runtime/dev.tesserakt.sparql.runtime.evaluation/-term-identifier/index.html","searchKeys":["TermIdentifier","value class TermIdentifier(val id: Int)","dev.tesserakt.sparql.runtime.evaluation.TermIdentifier"]},{"name":"abstract class Serializer","description":"dev.tesserakt.rdf.serialization.common.Serializer","location":"serialization/common/dev.tesserakt.rdf.serialization.common/-serializer/index.html","searchKeys":["Serializer","abstract class Serializer","dev.tesserakt.rdf.serialization.common.Serializer"]},{"name":"abstract fun deserialize(input: DataSource): Iterator<Quad>","description":"dev.tesserakt.rdf.serialization.common.Serializer.deserialize","location":"serialization/common/dev.tesserakt.rdf.serialization.common/-serializer/deserialize.html","searchKeys":["deserialize","abstract fun deserialize(input: DataSource): Iterator<Quad>","dev.tesserakt.rdf.serialization.common.Serializer.deserialize"]},{"name":"abstract fun makeValidPrefixValue(content: String): String?","description":"dev.tesserakt.rdf.serialization.common.Prefixes.ValueTransformer.makeValidPrefixValue","location":"serialization/common/dev.tesserakt.rdf.serialization.common/-prefixes/-value-transformer/make-valid-prefix-value.html","searchKeys":["makeValidPrefixValue","abstract fun makeValidPrefixValue(content: String): String?","dev.tesserakt.rdf.serialization.common.Prefixes.ValueTransformer.makeValidPrefixValue"]},{"name":"abstract fun open(): DataSourceStream","description":"dev.tesserakt.rdf.serialization.common.DataSource.open","location":"serialization/common/dev.tesserakt.rdf.serialization.common/-data-source/open.html","searchKeys":["open","abstract fun open(): DataSourceStream","dev.tesserakt.rdf.serialization.common.DataSource.open"]},{"name":"abstract fun serialize(data: Iterator<Quad>): Iterator<String>","description":"dev.tesserakt.rdf.serialization.common.Serializer.serialize","location":"serialization/common/dev.tesserakt.rdf.serialization.common/-serializer/serialize.html","searchKeys":["serialize","abstract fun serialize(data: Iterator<Quad>): Iterator<String>","dev.tesserakt.rdf.serialization.common.Serializer.serialize"]},{"name":"actual fun DataSourceStream.read(count: Int): String?","description":"dev.tesserakt.rdf.serialization.core.read","location":"serialization/common/dev.tesserakt.rdf.serialization.core/read.html","searchKeys":["read","actual fun DataSourceStream.read(count: Int): String?","dev.tesserakt.rdf.serialization.core.read"]},{"name":"actual fun dataSourceStreamOf(text: String): DataSourceStream","description":"dev.tesserakt.rdf.serialization.core.dataSourceStreamOf","location":"serialization/common/dev.tesserakt.rdf.serialization.core/data-source-stream-of.html","searchKeys":["dataSourceStreamOf","actual fun dataSourceStreamOf(text: String): DataSourceStream","dev.tesserakt.rdf.serialization.core.dataSourceStreamOf"]},{"name":"annotation class DelicateSerializationApi","description":"dev.tesserakt.rdf.serialization.DelicateSerializationApi","location":"serialization/common/dev.tesserakt.rdf.serialization/-delicate-serialization-api/index.html","searchKeys":["DelicateSerializationApi","annotation class DelicateSerializationApi","dev.tesserakt.rdf.serialization.DelicateSerializationApi"]},{"name":"annotation class InternalSerializationApi","description":"dev.tesserakt.rdf.serialization.InternalSerializationApi","location":"serialization/common/dev.tesserakt.rdf.serialization/-internal-serialization-api/index.html","searchKeys":["InternalSerializationApi","annotation class InternalSerializationApi","dev.tesserakt.rdf.serialization.InternalSerializationApi"]},{"name":"constructor()","description":"dev.tesserakt.rdf.serialization.common.Serializer.Serializer","location":"serialization/common/dev.tesserakt.rdf.serialization.common/-serializer/-serializer.html","searchKeys":["Serializer","constructor()","dev.tesserakt.rdf.serialization.common.Serializer.Serializer"]},{"name":"constructor(content: String)","description":"dev.tesserakt.rdf.serialization.core.DataSourceStream.DataSourceStream","location":"serialization/common/dev.tesserakt.rdf.serialization.core/-data-source-stream/-data-source-stream.html","searchKeys":["DataSourceStream","constructor(content: String)","dev.tesserakt.rdf.serialization.core.DataSourceStream.DataSourceStream"]},{"name":"constructor(file: File)","description":"dev.tesserakt.rdf.serialization.common.FileDataSource.FileDataSource","location":"serialization/common/dev.tesserakt.rdf.serialization.common/-file-data-source/-file-data-source.html","searchKeys":["FileDataSource","constructor(file: File)","dev.tesserakt.rdf.serialization.common.FileDataSource.FileDataSource"]},{"name":"constructor(map: Map<String, String>)","description":"dev.tesserakt.rdf.serialization.common.Prefixes.Prefixes","location":"serialization/common/dev.tesserakt.rdf.serialization.common/-prefixes/-prefixes.html","searchKeys":["Prefixes","constructor(map: Map<String, String>)","dev.tesserakt.rdf.serialization.common.Prefixes.Prefixes"]},{"name":"constructor(prefix: String, value: String)","description":"dev.tesserakt.rdf.serialization.common.Prefixes.PrefixedTerm.PrefixedTerm","location":"serialization/common/dev.tesserakt.rdf.serialization.common/-prefixes/-prefixed-term/-prefixed-term.html","searchKeys":["PrefixedTerm","constructor(prefix: String, value: String)","dev.tesserakt.rdf.serialization.common.Prefixes.PrefixedTerm.PrefixedTerm"]},{"name":"constructor(stream: InputStream)","description":"dev.tesserakt.rdf.serialization.common.StreamDataSource.StreamDataSource","location":"serialization/common/dev.tesserakt.rdf.serialization.common/-stream-data-source/-stream-data-source.html","searchKeys":["StreamDataSource","constructor(stream: InputStream)","dev.tesserakt.rdf.serialization.common.StreamDataSource.StreamDataSource"]},{"name":"constructor(text: String)","description":"dev.tesserakt.rdf.serialization.common.TextDataSource.TextDataSource","location":"serialization/common/dev.tesserakt.rdf.serialization.common/-text-data-source/-text-data-source.html","searchKeys":["TextDataSource","constructor(text: String)","dev.tesserakt.rdf.serialization.common.TextDataSource.TextDataSource"]},{"name":"constructor(vararg ontology: Ontology)","description":"dev.tesserakt.rdf.serialization.common.Prefixes.Prefixes","location":"serialization/common/dev.tesserakt.rdf.serialization.common/-prefixes/-prefixes.html","searchKeys":["Prefixes","constructor(vararg ontology: Ontology)","dev.tesserakt.rdf.serialization.common.Prefixes.Prefixes"]},{"name":"data class PrefixedTerm(val prefix: String, val value: String)","description":"dev.tesserakt.rdf.serialization.common.Prefixes.PrefixedTerm","location":"serialization/common/dev.tesserakt.rdf.serialization.common/-prefixes/-prefixed-term/index.html","searchKeys":["PrefixedTerm","data class PrefixedTerm(val prefix: String, val value: String)","dev.tesserakt.rdf.serialization.common.Prefixes.PrefixedTerm"]},{"name":"data object DefaultValueValidator : Prefixes.ValueTransformer","description":"dev.tesserakt.rdf.serialization.common.Prefixes.DefaultValueValidator","location":"serialization/common/dev.tesserakt.rdf.serialization.common/-prefixes/-default-value-validator/index.html","searchKeys":["DefaultValueValidator","data object DefaultValueValidator : Prefixes.ValueTransformer","dev.tesserakt.rdf.serialization.common.Prefixes.DefaultValueValidator"]},{"name":"expect class DataSourceStream : AutoCloseable","description":"dev.tesserakt.rdf.serialization.core.DataSourceStream","location":"serialization/common/dev.tesserakt.rdf.serialization.core/-data-source-stream/index.html","searchKeys":["DataSourceStream","expect class DataSourceStream : AutoCloseable","dev.tesserakt.rdf.serialization.core.DataSourceStream"]},{"name":"expect class FileDataSource : DataSource","description":"dev.tesserakt.rdf.serialization.common.FileDataSource","location":"serialization/common/dev.tesserakt.rdf.serialization.common/-file-data-source/index.html","searchKeys":["FileDataSource","expect class FileDataSource : DataSource","dev.tesserakt.rdf.serialization.common.FileDataSource"]},{"name":"expect constructor(filepath: String)","description":"dev.tesserakt.rdf.serialization.common.FileDataSource.FileDataSource","location":"serialization/common/dev.tesserakt.rdf.serialization.common/-file-data-source/-file-data-source.html","searchKeys":["FileDataSource","expect constructor(filepath: String)","dev.tesserakt.rdf.serialization.common.FileDataSource.FileDataSource"]},{"name":"expect fun DataSourceStream.read(count: Int): String?","description":"dev.tesserakt.rdf.serialization.core.read","location":"serialization/common/dev.tesserakt.rdf.serialization.core/read.html","searchKeys":["read","expect fun DataSourceStream.read(count: Int): String?","dev.tesserakt.rdf.serialization.core.read"]},{"name":"expect open override fun close()","description":"dev.tesserakt.rdf.serialization.core.DataSourceStream.close","location":"serialization/common/dev.tesserakt.rdf.serialization.core/-data-source-stream/close.html","searchKeys":["close","expect open override fun close()","dev.tesserakt.rdf.serialization.core.DataSourceStream.close"]},{"name":"expect open override fun open(): DataSourceStream","description":"dev.tesserakt.rdf.serialization.common.FileDataSource.open","location":"serialization/common/dev.tesserakt.rdf.serialization.common/-file-data-source/open.html","searchKeys":["open","expect open override fun open(): DataSourceStream","dev.tesserakt.rdf.serialization.common.FileDataSource.open"]},{"name":"fun Iterator<String>.collect(): String","description":"dev.tesserakt.rdf.serialization.common.collect","location":"serialization/common/dev.tesserakt.rdf.serialization.common/collect.html","searchKeys":["collect","fun Iterator<String>.collect(): String","dev.tesserakt.rdf.serialization.common.collect"]},{"name":"fun Serializer.deserialize(input: String): Iterator<Quad>","description":"dev.tesserakt.rdf.serialization.common.deserialize","location":"serialization/common/dev.tesserakt.rdf.serialization.common/deserialize.html","searchKeys":["deserialize","fun Serializer.deserialize(input: String): Iterator<Quad>","dev.tesserakt.rdf.serialization.common.deserialize"]},{"name":"fun format(term: Quad.NamedTerm, transformer: Prefixes.ValueTransformer = DefaultValueValidator): Prefixes.PrefixedTerm?","description":"dev.tesserakt.rdf.serialization.common.Prefixes.format","location":"serialization/common/dev.tesserakt.rdf.serialization.common/-prefixes/format.html","searchKeys":["format","fun format(term: Quad.NamedTerm, transformer: Prefixes.ValueTransformer = DefaultValueValidator): Prefixes.PrefixedTerm?","dev.tesserakt.rdf.serialization.common.Prefixes.format"]},{"name":"fun interface ValueTransformer","description":"dev.tesserakt.rdf.serialization.common.Prefixes.ValueTransformer","location":"serialization/common/dev.tesserakt.rdf.serialization.common/-prefixes/-value-transformer/index.html","searchKeys":["ValueTransformer","fun interface ValueTransformer","dev.tesserakt.rdf.serialization.common.Prefixes.ValueTransformer"]},{"name":"interface DataSource","description":"dev.tesserakt.rdf.serialization.common.DataSource","location":"serialization/common/dev.tesserakt.rdf.serialization.common/-data-source/index.html","searchKeys":["DataSource","interface DataSource","dev.tesserakt.rdf.serialization.common.DataSource"]},{"name":"object Companion","description":"dev.tesserakt.rdf.serialization.common.Prefixes.Companion","location":"serialization/common/dev.tesserakt.rdf.serialization.common/-prefixes/-companion/index.html","searchKeys":["Companion","object Companion","dev.tesserakt.rdf.serialization.common.Prefixes.Companion"]},{"name":"open fun serialize(data: Collection<Quad>): Iterator<String>","description":"dev.tesserakt.rdf.serialization.common.Serializer.serialize","location":"serialization/common/dev.tesserakt.rdf.serialization.common/-serializer/serialize.html","searchKeys":["serialize","open fun serialize(data: Collection<Quad>): Iterator<String>","dev.tesserakt.rdf.serialization.common.Serializer.serialize"]},{"name":"open override fun isEmpty(): Boolean","description":"dev.tesserakt.rdf.serialization.common.Prefixes.isEmpty","location":"serialization/common/dev.tesserakt.rdf.serialization.common/-prefixes/is-empty.html","searchKeys":["isEmpty","open override fun isEmpty(): Boolean","dev.tesserakt.rdf.serialization.common.Prefixes.isEmpty"]},{"name":"open override fun makeValidPrefixValue(content: String): String?","description":"dev.tesserakt.rdf.serialization.common.Prefixes.DefaultValueValidator.makeValidPrefixValue","location":"serialization/common/dev.tesserakt.rdf.serialization.common/-prefixes/-default-value-validator/make-valid-prefix-value.html","searchKeys":["makeValidPrefixValue","open override fun makeValidPrefixValue(content: String): String?","dev.tesserakt.rdf.serialization.common.Prefixes.DefaultValueValidator.makeValidPrefixValue"]},{"name":"open override fun open(): DataSourceStream","description":"dev.tesserakt.rdf.serialization.common.StreamDataSource.open","location":"serialization/common/dev.tesserakt.rdf.serialization.common/-stream-data-source/open.html","searchKeys":["open","open override fun open(): DataSourceStream","dev.tesserakt.rdf.serialization.common.StreamDataSource.open"]},{"name":"open override fun open(): DataSourceStream","description":"dev.tesserakt.rdf.serialization.common.TextDataSource.open","location":"serialization/common/dev.tesserakt.rdf.serialization.common/-text-data-source/open.html","searchKeys":["open","open override fun open(): DataSourceStream","dev.tesserakt.rdf.serialization.common.TextDataSource.open"]},{"name":"open override val size: Int","description":"dev.tesserakt.rdf.serialization.common.Prefixes.size","location":"serialization/common/dev.tesserakt.rdf.serialization.common/-prefixes/size.html","searchKeys":["size","open override val size: Int","dev.tesserakt.rdf.serialization.common.Prefixes.size"]},{"name":"operator fun Map<String, String>.plus(ontology: Ontology): Map<String, String>","description":"dev.tesserakt.rdf.serialization.common.Prefixes.Companion.plus","location":"serialization/common/dev.tesserakt.rdf.serialization.common/-prefixes/-companion/plus.html","searchKeys":["plus","operator fun Map<String, String>.plus(ontology: Ontology): Map<String, String>","dev.tesserakt.rdf.serialization.common.Prefixes.Companion.plus"]},{"name":"operator fun plus(other: Prefixes): Prefixes","description":"dev.tesserakt.rdf.serialization.common.Prefixes.plus","location":"serialization/common/dev.tesserakt.rdf.serialization.common/-prefixes/plus.html","searchKeys":["plus","operator fun plus(other: Prefixes): Prefixes","dev.tesserakt.rdf.serialization.common.Prefixes.plus"]},{"name":"val filepath: String","description":"dev.tesserakt.rdf.serialization.common.FileDataSource.filepath","location":"serialization/common/dev.tesserakt.rdf.serialization.common/-file-data-source/[native]filepath.html","searchKeys":["filepath","val filepath: String","dev.tesserakt.rdf.serialization.common.FileDataSource.filepath"]},{"name":"val filepath: String","description":"dev.tesserakt.rdf.serialization.common.FileDataSource.filepath","location":"serialization/common/dev.tesserakt.rdf.serialization.common/-file-data-source/[wasm-js]filepath.html","searchKeys":["filepath","val filepath: String","dev.tesserakt.rdf.serialization.common.FileDataSource.filepath"]},{"name":"val prefix: String","description":"dev.tesserakt.rdf.serialization.common.Prefixes.PrefixedTerm.prefix","location":"serialization/common/dev.tesserakt.rdf.serialization.common/-prefixes/-prefixed-term/prefix.html","searchKeys":["prefix","val prefix: String","dev.tesserakt.rdf.serialization.common.Prefixes.PrefixedTerm.prefix"]},{"name":"val text: String","description":"dev.tesserakt.rdf.serialization.common.TextDataSource.text","location":"serialization/common/dev.tesserakt.rdf.serialization.common/-text-data-source/text.html","searchKeys":["text","val text: String","dev.tesserakt.rdf.serialization.common.TextDataSource.text"]},{"name":"val value: String","description":"dev.tesserakt.rdf.serialization.common.Prefixes.PrefixedTerm.value","location":"serialization/common/dev.tesserakt.rdf.serialization.common/-prefixes/-prefixed-term/value.html","searchKeys":["value","val value: String","dev.tesserakt.rdf.serialization.common.Prefixes.PrefixedTerm.value"]},{"name":"value class Prefixes(map: Map<String, String>) : Map<String, String> ","description":"dev.tesserakt.rdf.serialization.common.Prefixes","location":"serialization/common/dev.tesserakt.rdf.serialization.common/-prefixes/index.html","searchKeys":["Prefixes","value class Prefixes(map: Map<String, String>) : Map<String, String> ","dev.tesserakt.rdf.serialization.common.Prefixes"]},{"name":"value class StreamDataSource(stream: InputStream) : DataSource","description":"dev.tesserakt.rdf.serialization.common.StreamDataSource","location":"serialization/common/dev.tesserakt.rdf.serialization.common/-stream-data-source/index.html","searchKeys":["StreamDataSource","value class StreamDataSource(stream: InputStream) : DataSource","dev.tesserakt.rdf.serialization.common.StreamDataSource"]},{"name":"value class TextDataSource(val text: String) : DataSource","description":"dev.tesserakt.rdf.serialization.common.TextDataSource","location":"serialization/common/dev.tesserakt.rdf.serialization.common/-text-data-source/index.html","searchKeys":["TextDataSource","value class TextDataSource(val text: String) : DataSource","dev.tesserakt.rdf.serialization.common.TextDataSource"]},{"name":"fun main()","description":"main","location":"js-build/[root]/main.html","searchKeys":["main","fun main()","main"]},{"name":"abstract fun parse(queryString: String, options: Map<String, dynamic>): Promise<Unit>","description":"QueryEngine.parse","location":"testing/rdf-test-suite-js/[root]/-query-engine/parse.html","searchKeys":["parse","abstract fun parse(queryString: String, options: Map<String, dynamic>): Promise<Unit>","QueryEngine.parse"]},{"name":"abstract fun query(data: Array<N3Quad>, queryString: String, options: Map<String, dynamic>): Promise<QueryResult>","description":"QueryEngine.query","location":"testing/rdf-test-suite-js/[root]/-query-engine/query.html","searchKeys":["query","abstract fun query(data: Array<N3Quad>, queryString: String, options: Map<String, dynamic>): Promise<QueryResult>","QueryEngine.query"]},{"name":"constructor(variables: Array<String>, value: Array<dynamic>)","description":"QueryResultBindings.QueryResultBindings","location":"testing/rdf-test-suite-js/[root]/-query-result-bindings/-query-result-bindings.html","searchKeys":["QueryResultBindings","constructor(variables: Array<String>, value: Array<dynamic>)","QueryResultBindings.QueryResultBindings"]},{"name":"data class QueryResultBindings(val variables: Array<String>, val value: Array<dynamic>) : QueryResult","description":"QueryResultBindings","location":"testing/rdf-test-suite-js/[root]/-query-result-bindings/index.html","searchKeys":["QueryResultBindings","data class QueryResultBindings(val variables: Array<String>, val value: Array<dynamic>) : QueryResult","QueryResultBindings"]},{"name":"external interface IQueryResultBoolean : QueryResult","description":"IQueryResultBoolean","location":"testing/rdf-test-suite-js/[root]/-i-query-result-boolean/index.html","searchKeys":["IQueryResultBoolean","external interface IQueryResultBoolean : QueryResult","IQueryResultBoolean"]},{"name":"external interface QueryEngine","description":"QueryEngine","location":"testing/rdf-test-suite-js/[root]/-query-engine/index.html","searchKeys":["QueryEngine","external interface QueryEngine","QueryEngine"]},{"name":"external interface QueryResult","description":"QueryResult","location":"testing/rdf-test-suite-js/[root]/-query-result/index.html","searchKeys":["QueryResult","external interface QueryResult","QueryResult"]},{"name":"external interface QueryResultQuads : QueryResult","description":"QueryResultQuads","location":"testing/rdf-test-suite-js/[root]/-query-result-quads/index.html","searchKeys":["QueryResultQuads","external interface QueryResultQuads : QueryResult","QueryResultQuads"]},{"name":"fun parse(queryString: String, options: Map<String, dynamic>)","description":"parse","location":"testing/rdf-test-suite-js/[root]/parse.html","searchKeys":["parse","fun parse(queryString: String, options: Map<String, dynamic>)","parse"]},{"name":"fun query(data: Array<N3Quad>, queryString: String, options: dynamic): QueryResult","description":"query","location":"testing/rdf-test-suite-js/[root]/query.html","searchKeys":["query","fun query(data: Array<N3Quad>, queryString: String, options: dynamic): QueryResult","query"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"QueryResultBindings.equals","location":"testing/rdf-test-suite-js/[root]/-query-result-bindings/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","QueryResultBindings.equals"]},{"name":"open override fun hashCode(): Int","description":"QueryResultBindings.hashCode","location":"testing/rdf-test-suite-js/[root]/-query-result-bindings/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","QueryResultBindings.hashCode"]},{"name":"open override fun toString(): String","description":"QueryResultBindings.toString","location":"testing/rdf-test-suite-js/[root]/-query-result-bindings/to-string.html","searchKeys":["toString","open override fun toString(): String","QueryResultBindings.toString"]},{"name":"val checkOrder: Boolean = false","description":"QueryResultBindings.checkOrder","location":"testing/rdf-test-suite-js/[root]/-query-result-bindings/check-order.html","searchKeys":["checkOrder","val checkOrder: Boolean = false","QueryResultBindings.checkOrder"]},{"name":"val type: String","description":"QueryResultBindings.type","location":"testing/rdf-test-suite-js/[root]/-query-result-bindings/type.html","searchKeys":["type","val type: String","QueryResultBindings.type"]},{"name":"val value: Array<dynamic>","description":"QueryResultBindings.value","location":"testing/rdf-test-suite-js/[root]/-query-result-bindings/value.html","searchKeys":["value","val value: Array<dynamic>","QueryResultBindings.value"]},{"name":"val variables: Array<String>","description":"QueryResultBindings.variables","location":"testing/rdf-test-suite-js/[root]/-query-result-bindings/variables.html","searchKeys":["variables","val variables: Array<String>","QueryResultBindings.variables"]},{"name":"fun Collection<Quad>.toJenaDataset(): Dataset","description":"dev.tesserakt.interop.jena.toJenaDataset","location":"interop/jena/dev.tesserakt.interop.jena/to-jena-dataset.html","searchKeys":["toJenaDataset","fun Collection<Quad>.toJenaDataset(): Dataset","dev.tesserakt.interop.jena.toJenaDataset"]},{"name":"fun Node.toTerm(): Quad.Term","description":"dev.tesserakt.interop.jena.toTerm","location":"interop/jena/dev.tesserakt.interop.jena/to-term.html","searchKeys":["toTerm","fun Node.toTerm(): Quad.Term","dev.tesserakt.interop.jena.toTerm"]},{"name":"fun Quad.Term.toJenaTerm(): Node","description":"dev.tesserakt.interop.jena.toJenaTerm","location":"interop/jena/dev.tesserakt.interop.jena/to-jena-term.html","searchKeys":["toJenaTerm","fun Quad.Term.toJenaTerm(): Node","dev.tesserakt.interop.jena.toJenaTerm"]},{"name":"fun Quad.toJenaQuad(): Quad","description":"dev.tesserakt.interop.jena.toJenaQuad","location":"interop/jena/dev.tesserakt.interop.jena/to-jena-quad.html","searchKeys":["toJenaQuad","fun Quad.toJenaQuad(): Quad","dev.tesserakt.interop.jena.toJenaQuad"]},{"name":"fun Triple.toQuad(): Quad","description":"dev.tesserakt.interop.jena.toQuad","location":"interop/jena/dev.tesserakt.interop.jena/to-quad.html","searchKeys":["toQuad","fun Triple.toQuad(): Quad","dev.tesserakt.interop.jena.toQuad"]},{"name":"abstract fun process(subject: Quad.Term, predicate: Quad.Term, object: Quad.Term)","description":"dev.tesserakt.rdf.n3.dsl.N3Context.Consumer.process","location":"n3/dsl/dev.tesserakt.rdf.n3.dsl/-n3-context/-consumer/process.html","searchKeys":["process","abstract fun process(subject: Quad.Term, predicate: Quad.Term, object: Quad.Term)","dev.tesserakt.rdf.n3.dsl.N3Context.Consumer.process"]},{"name":"class N3Context","description":"dev.tesserakt.rdf.n3.dsl.N3Context","location":"n3/dsl/dev.tesserakt.rdf.n3.dsl/-n3-context/index.html","searchKeys":["N3Context","class N3Context","dev.tesserakt.rdf.n3.dsl.N3Context"]},{"name":"class StoreAdapter(store: Store) : N3Context.Consumer","description":"dev.tesserakt.rdf.n3.dsl.StoreAdapter","location":"n3/dsl/dev.tesserakt.rdf.n3.dsl/-store-adapter/index.html","searchKeys":["StoreAdapter","class StoreAdapter(store: Store) : N3Context.Consumer","dev.tesserakt.rdf.n3.dsl.StoreAdapter"]},{"name":"constructor(_name: Quad.Term)","description":"dev.tesserakt.rdf.n3.dsl.N3Context.Blank.Blank","location":"n3/dsl/dev.tesserakt.rdf.n3.dsl/-n3-context/-blank/-blank.html","searchKeys":["Blank","constructor(_name: Quad.Term)","dev.tesserakt.rdf.n3.dsl.N3Context.Blank.Blank"]},{"name":"constructor(_s: Quad.Term, _p: Quad.Term)","description":"dev.tesserakt.rdf.n3.dsl.N3Context.Statement.Statement","location":"n3/dsl/dev.tesserakt.rdf.n3.dsl/-n3-context/-statement/-statement.html","searchKeys":["Statement","constructor(_s: Quad.Term, _p: Quad.Term)","dev.tesserakt.rdf.n3.dsl.N3Context.Statement.Statement"]},{"name":"constructor(path: String)","description":"dev.tesserakt.rdf.n3.dsl.N3Context.Environment.Environment","location":"n3/dsl/dev.tesserakt.rdf.n3.dsl/-n3-context/-environment/-environment.html","searchKeys":["Environment","constructor(path: String)","dev.tesserakt.rdf.n3.dsl.N3Context.Environment.Environment"]},{"name":"constructor(store: Store)","description":"dev.tesserakt.rdf.n3.dsl.StoreAdapter.StoreAdapter","location":"n3/dsl/dev.tesserakt.rdf.n3.dsl/-store-adapter/-store-adapter.html","searchKeys":["StoreAdapter","constructor(store: Store)","dev.tesserakt.rdf.n3.dsl.StoreAdapter.StoreAdapter"]},{"name":"fun N3(environment: N3Context.Environment, block: N3Context.() -> Unit): Store","description":"dev.tesserakt.rdf.n3.dsl.N3","location":"n3/dsl/dev.tesserakt.rdf.n3.dsl/-n3.html","searchKeys":["N3","fun N3(environment: N3Context.Environment, block: N3Context.() -> Unit): Store","dev.tesserakt.rdf.n3.dsl.N3"]},{"name":"fun N3(path: String = \"\", block: N3Context.() -> Unit): Store","description":"dev.tesserakt.rdf.n3.dsl.N3","location":"n3/dsl/dev.tesserakt.rdf.n3.dsl/-n3.html","searchKeys":["N3","fun N3(path: String = \"\", block: N3Context.() -> Unit): Store","dev.tesserakt.rdf.n3.dsl.N3"]},{"name":"fun Quad.Term.toN3Term(): Quad.Term.RdfTerm","description":"dev.tesserakt.rdf.n3.dsl.toN3Term","location":"n3/dsl/dev.tesserakt.rdf.n3.dsl/to-n3-term.html","searchKeys":["toN3Term","fun Quad.Term.toN3Term(): Quad.Term.RdfTerm","dev.tesserakt.rdf.n3.dsl.toN3Term"]},{"name":"fun Store.insert(environment: N3Context.Environment, block: N3Context.() -> Unit)","description":"dev.tesserakt.rdf.n3.dsl.insert","location":"n3/dsl/dev.tesserakt.rdf.n3.dsl/insert.html","searchKeys":["insert","fun Store.insert(environment: N3Context.Environment, block: N3Context.() -> Unit)","dev.tesserakt.rdf.n3.dsl.insert"]},{"name":"fun String.asLiteralTerm(type: Quad.NamedTerm): Quad.Term","description":"dev.tesserakt.rdf.n3.dsl.N3Context.asLiteralTerm","location":"n3/dsl/dev.tesserakt.rdf.n3.dsl/-n3-context/as-literal-term.html","searchKeys":["asLiteralTerm","fun String.asLiteralTerm(type: Quad.NamedTerm): Quad.Term","dev.tesserakt.rdf.n3.dsl.N3Context.asLiteralTerm"]},{"name":"fun String.asLiteralTerm(type: String): Quad.Term","description":"dev.tesserakt.rdf.n3.dsl.N3Context.asLiteralTerm","location":"n3/dsl/dev.tesserakt.rdf.n3.dsl/-n3-context/as-literal-term.html","searchKeys":["asLiteralTerm","fun String.asLiteralTerm(type: String): Quad.Term","dev.tesserakt.rdf.n3.dsl.N3Context.asLiteralTerm"]},{"name":"fun String.asNamedTerm(): Quad.Term","description":"dev.tesserakt.rdf.n3.dsl.N3Context.asNamedTerm","location":"n3/dsl/dev.tesserakt.rdf.n3.dsl/-n3-context/as-named-term.html","searchKeys":["asNamedTerm","fun String.asNamedTerm(): Quad.Term","dev.tesserakt.rdf.n3.dsl.N3Context.asNamedTerm"]},{"name":"fun list(data: Collection<Quad.Term>): N3Context.List","description":"dev.tesserakt.rdf.n3.dsl.N3Context.list","location":"n3/dsl/dev.tesserakt.rdf.n3.dsl/-n3-context/list.html","searchKeys":["list","fun list(data: Collection<Quad.Term>): N3Context.List","dev.tesserakt.rdf.n3.dsl.N3Context.list"]},{"name":"fun list(vararg data: Quad.Term): N3Context.List","description":"dev.tesserakt.rdf.n3.dsl.N3Context.list","location":"n3/dsl/dev.tesserakt.rdf.n3.dsl/-n3-context/list.html","searchKeys":["list","fun list(vararg data: Quad.Term): N3Context.List","dev.tesserakt.rdf.n3.dsl.N3Context.list"]},{"name":"fun local(name: String): Quad.Term","description":"dev.tesserakt.rdf.n3.dsl.N3Context.local","location":"n3/dsl/dev.tesserakt.rdf.n3.dsl/-n3-context/local.html","searchKeys":["local","fun local(name: String): Quad.Term","dev.tesserakt.rdf.n3.dsl.N3Context.local"]},{"name":"fun multiple(data: Collection<Quad.Term>): N3Context.Multiple","description":"dev.tesserakt.rdf.n3.dsl.N3Context.multiple","location":"n3/dsl/dev.tesserakt.rdf.n3.dsl/-n3-context/multiple.html","searchKeys":["multiple","fun multiple(data: Collection<Quad.Term>): N3Context.Multiple","dev.tesserakt.rdf.n3.dsl.N3Context.multiple"]},{"name":"fun multiple(vararg data: Quad.Term): N3Context.Multiple","description":"dev.tesserakt.rdf.n3.dsl.N3Context.multiple","location":"n3/dsl/dev.tesserakt.rdf.n3.dsl/-n3-context/multiple.html","searchKeys":["multiple","fun multiple(vararg data: Quad.Term): N3Context.Multiple","dev.tesserakt.rdf.n3.dsl.N3Context.multiple"]},{"name":"infix fun Quad.Term.has(predicate: Quad.Term): N3Context.Statement","description":"dev.tesserakt.rdf.n3.dsl.N3Context.has","location":"n3/dsl/dev.tesserakt.rdf.n3.dsl/-n3-context/has.html","searchKeys":["has","infix fun Quad.Term.has(predicate: Quad.Term): N3Context.Statement","dev.tesserakt.rdf.n3.dsl.N3Context.has"]},{"name":"infix fun Quad.Term.has(predicate: Quad.Term): N3Context.Statement","description":"dev.tesserakt.rdf.n3.dsl.N3Context.has","location":"n3/dsl/dev.tesserakt.rdf.n3.dsl/-n3-context/has.html","searchKeys":["has","infix fun Quad.Term.has(predicate: Quad.Term): N3Context.Statement","dev.tesserakt.rdf.n3.dsl.N3Context.has"]},{"name":"infix inline fun Quad.Term.being(blank: N3Context.Blank)","description":"dev.tesserakt.rdf.n3.dsl.N3Context.Blank.being","location":"n3/dsl/dev.tesserakt.rdf.n3.dsl/-n3-context/-blank/being.html","searchKeys":["being","infix inline fun Quad.Term.being(blank: N3Context.Blank)","dev.tesserakt.rdf.n3.dsl.N3Context.Blank.being"]},{"name":"infix inline fun Quad.Term.being(list: N3Context.List)","description":"dev.tesserakt.rdf.n3.dsl.N3Context.Blank.being","location":"n3/dsl/dev.tesserakt.rdf.n3.dsl/-n3-context/-blank/being.html","searchKeys":["being","infix inline fun Quad.Term.being(list: N3Context.List)","dev.tesserakt.rdf.n3.dsl.N3Context.Blank.being"]},{"name":"infix inline fun Quad.Term.being(literal: Double)","description":"dev.tesserakt.rdf.n3.dsl.N3Context.Blank.being","location":"n3/dsl/dev.tesserakt.rdf.n3.dsl/-n3-context/-blank/being.html","searchKeys":["being","infix inline fun Quad.Term.being(literal: Double)","dev.tesserakt.rdf.n3.dsl.N3Context.Blank.being"]},{"name":"infix inline fun Quad.Term.being(literal: Float)","description":"dev.tesserakt.rdf.n3.dsl.N3Context.Blank.being","location":"n3/dsl/dev.tesserakt.rdf.n3.dsl/-n3-context/-blank/being.html","searchKeys":["being","infix inline fun Quad.Term.being(literal: Float)","dev.tesserakt.rdf.n3.dsl.N3Context.Blank.being"]},{"name":"infix inline fun Quad.Term.being(literal: Int)","description":"dev.tesserakt.rdf.n3.dsl.N3Context.Blank.being","location":"n3/dsl/dev.tesserakt.rdf.n3.dsl/-n3-context/-blank/being.html","searchKeys":["being","infix inline fun Quad.Term.being(literal: Int)","dev.tesserakt.rdf.n3.dsl.N3Context.Blank.being"]},{"name":"infix inline fun Quad.Term.being(literal: Long)","description":"dev.tesserakt.rdf.n3.dsl.N3Context.Blank.being","location":"n3/dsl/dev.tesserakt.rdf.n3.dsl/-n3-context/-blank/being.html","searchKeys":["being","infix inline fun Quad.Term.being(literal: Long)","dev.tesserakt.rdf.n3.dsl.N3Context.Blank.being"]},{"name":"infix inline fun Quad.Term.being(multiple: N3Context.Multiple)","description":"dev.tesserakt.rdf.n3.dsl.N3Context.Blank.being","location":"n3/dsl/dev.tesserakt.rdf.n3.dsl/-n3-context/-blank/being.html","searchKeys":["being","infix inline fun Quad.Term.being(multiple: N3Context.Multiple)","dev.tesserakt.rdf.n3.dsl.N3Context.Blank.being"]},{"name":"infix inline fun Quad.Term.being(term: Quad.Term)","description":"dev.tesserakt.rdf.n3.dsl.N3Context.Blank.being","location":"n3/dsl/dev.tesserakt.rdf.n3.dsl/-n3-context/-blank/being.html","searchKeys":["being","infix inline fun Quad.Term.being(term: Quad.Term)","dev.tesserakt.rdf.n3.dsl.N3Context.Blank.being"]},{"name":"infix inline fun being(blank: N3Context.Blank)","description":"dev.tesserakt.rdf.n3.dsl.N3Context.Statement.being","location":"n3/dsl/dev.tesserakt.rdf.n3.dsl/-n3-context/-statement/being.html","searchKeys":["being","infix inline fun being(blank: N3Context.Blank)","dev.tesserakt.rdf.n3.dsl.N3Context.Statement.being"]},{"name":"infix inline fun being(list: N3Context.List)","description":"dev.tesserakt.rdf.n3.dsl.N3Context.Statement.being","location":"n3/dsl/dev.tesserakt.rdf.n3.dsl/-n3-context/-statement/being.html","searchKeys":["being","infix inline fun being(list: N3Context.List)","dev.tesserakt.rdf.n3.dsl.N3Context.Statement.being"]},{"name":"infix inline fun being(literal: Double)","description":"dev.tesserakt.rdf.n3.dsl.N3Context.Statement.being","location":"n3/dsl/dev.tesserakt.rdf.n3.dsl/-n3-context/-statement/being.html","searchKeys":["being","infix inline fun being(literal: Double)","dev.tesserakt.rdf.n3.dsl.N3Context.Statement.being"]},{"name":"infix inline fun being(literal: Float)","description":"dev.tesserakt.rdf.n3.dsl.N3Context.Statement.being","location":"n3/dsl/dev.tesserakt.rdf.n3.dsl/-n3-context/-statement/being.html","searchKeys":["being","infix inline fun being(literal: Float)","dev.tesserakt.rdf.n3.dsl.N3Context.Statement.being"]},{"name":"infix inline fun being(literal: Int)","description":"dev.tesserakt.rdf.n3.dsl.N3Context.Statement.being","location":"n3/dsl/dev.tesserakt.rdf.n3.dsl/-n3-context/-statement/being.html","searchKeys":["being","infix inline fun being(literal: Int)","dev.tesserakt.rdf.n3.dsl.N3Context.Statement.being"]},{"name":"infix inline fun being(literal: Long)","description":"dev.tesserakt.rdf.n3.dsl.N3Context.Statement.being","location":"n3/dsl/dev.tesserakt.rdf.n3.dsl/-n3-context/-statement/being.html","searchKeys":["being","infix inline fun being(literal: Long)","dev.tesserakt.rdf.n3.dsl.N3Context.Statement.being"]},{"name":"infix inline fun being(multiple: N3Context.Multiple)","description":"dev.tesserakt.rdf.n3.dsl.N3Context.Statement.being","location":"n3/dsl/dev.tesserakt.rdf.n3.dsl/-n3-context/-statement/being.html","searchKeys":["being","infix inline fun being(multiple: N3Context.Multiple)","dev.tesserakt.rdf.n3.dsl.N3Context.Statement.being"]},{"name":"infix inline fun being(value: Quad.Term)","description":"dev.tesserakt.rdf.n3.dsl.N3Context.Statement.being","location":"n3/dsl/dev.tesserakt.rdf.n3.dsl/-n3-context/-statement/being.html","searchKeys":["being","infix inline fun being(value: Quad.Term)","dev.tesserakt.rdf.n3.dsl.N3Context.Statement.being"]},{"name":"inline fun blank(block: N3Context.Blank.() -> Unit): Quad.Term","description":"dev.tesserakt.rdf.n3.dsl.N3Context.blank","location":"n3/dsl/dev.tesserakt.rdf.n3.dsl/-n3-context/blank.html","searchKeys":["blank","inline fun blank(block: N3Context.Blank.() -> Unit): Quad.Term","dev.tesserakt.rdf.n3.dsl.N3Context.blank"]},{"name":"inline fun genBlankNodeId(): Quad.Term.RdfTerm","description":"dev.tesserakt.rdf.n3.dsl.N3Context.genBlankNodeId","location":"n3/dsl/dev.tesserakt.rdf.n3.dsl/-n3-context/gen-blank-node-id.html","searchKeys":["genBlankNodeId","inline fun genBlankNodeId(): Quad.Term.RdfTerm","dev.tesserakt.rdf.n3.dsl.N3Context.genBlankNodeId"]},{"name":"inline fun statements(path: String = \"\", noinline block: N3Context.() -> Unit): Quad.Term","description":"dev.tesserakt.rdf.n3.dsl.N3Context.statements","location":"n3/dsl/dev.tesserakt.rdf.n3.dsl/-n3-context/statements.html","searchKeys":["statements","inline fun statements(path: String = \"\", noinline block: N3Context.() -> Unit): Quad.Term","dev.tesserakt.rdf.n3.dsl.N3Context.statements"]},{"name":"inner class Blank(val _name: Quad.Term)","description":"dev.tesserakt.rdf.n3.dsl.N3Context.Blank","location":"n3/dsl/dev.tesserakt.rdf.n3.dsl/-n3-context/-blank/index.html","searchKeys":["Blank","inner class Blank(val _name: Quad.Term)","dev.tesserakt.rdf.n3.dsl.N3Context.Blank"]},{"name":"inner class Statement(val _s: Quad.Term, val _p: Quad.Term)","description":"dev.tesserakt.rdf.n3.dsl.N3Context.Statement","location":"n3/dsl/dev.tesserakt.rdf.n3.dsl/-n3-context/-statement/index.html","searchKeys":["Statement","inner class Statement(val _s: Quad.Term, val _p: Quad.Term)","dev.tesserakt.rdf.n3.dsl.N3Context.Statement"]},{"name":"interface Consumer","description":"dev.tesserakt.rdf.n3.dsl.N3Context.Consumer","location":"n3/dsl/dev.tesserakt.rdf.n3.dsl/-n3-context/-consumer/index.html","searchKeys":["Consumer","interface Consumer","dev.tesserakt.rdf.n3.dsl.N3Context.Consumer"]},{"name":"object Companion","description":"dev.tesserakt.rdf.n3.dsl.N3Context.Companion","location":"n3/dsl/dev.tesserakt.rdf.n3.dsl/-n3-context/-companion/index.html","searchKeys":["Companion","object Companion","dev.tesserakt.rdf.n3.dsl.N3Context.Companion"]},{"name":"open class Environment(val path: String)","description":"dev.tesserakt.rdf.n3.dsl.N3Context.Environment","location":"n3/dsl/dev.tesserakt.rdf.n3.dsl/-n3-context/-environment/index.html","searchKeys":["Environment","open class Environment(val path: String)","dev.tesserakt.rdf.n3.dsl.N3Context.Environment"]},{"name":"open fun process(context: N3Context, list: N3Context.List): Quad.Term","description":"dev.tesserakt.rdf.n3.dsl.N3Context.Consumer.process","location":"n3/dsl/dev.tesserakt.rdf.n3.dsl/-n3-context/-consumer/process.html","searchKeys":["process","open fun process(context: N3Context, list: N3Context.List): Quad.Term","dev.tesserakt.rdf.n3.dsl.N3Context.Consumer.process"]},{"name":"open override fun process(subject: Quad.Term, predicate: Quad.Term, object: Quad.Term)","description":"dev.tesserakt.rdf.n3.dsl.StoreAdapter.process","location":"n3/dsl/dev.tesserakt.rdf.n3.dsl/-store-adapter/process.html","searchKeys":["process","open override fun process(subject: Quad.Term, predicate: Quad.Term, object: Quad.Term)","dev.tesserakt.rdf.n3.dsl.StoreAdapter.process"]},{"name":"val Quad.NamedTerm.relativePath: String","description":"dev.tesserakt.rdf.n3.dsl.N3Context.Environment.relativePath","location":"n3/dsl/dev.tesserakt.rdf.n3.dsl/-n3-context/-environment/relative-path.html","searchKeys":["relativePath","val Quad.NamedTerm.relativePath: String","dev.tesserakt.rdf.n3.dsl.N3Context.Environment.relativePath"]},{"name":"val _name: Quad.Term","description":"dev.tesserakt.rdf.n3.dsl.N3Context.Blank._name","location":"n3/dsl/dev.tesserakt.rdf.n3.dsl/-n3-context/-blank/_name.html","searchKeys":["_name","val _name: Quad.Term","dev.tesserakt.rdf.n3.dsl.N3Context.Blank._name"]},{"name":"val _p: Quad.Term","description":"dev.tesserakt.rdf.n3.dsl.N3Context.Statement._p","location":"n3/dsl/dev.tesserakt.rdf.n3.dsl/-n3-context/-statement/_p.html","searchKeys":["_p","val _p: Quad.Term","dev.tesserakt.rdf.n3.dsl.N3Context.Statement._p"]},{"name":"val _s: Quad.Term","description":"dev.tesserakt.rdf.n3.dsl.N3Context.Statement._s","location":"n3/dsl/dev.tesserakt.rdf.n3.dsl/-n3-context/-statement/_s.html","searchKeys":["_s","val _s: Quad.Term","dev.tesserakt.rdf.n3.dsl.N3Context.Statement._s"]},{"name":"val consumer: N3Context.Consumer","description":"dev.tesserakt.rdf.n3.dsl.N3Context.consumer","location":"n3/dsl/dev.tesserakt.rdf.n3.dsl/-n3-context/consumer.html","searchKeys":["consumer","val consumer: N3Context.Consumer","dev.tesserakt.rdf.n3.dsl.N3Context.consumer"]},{"name":"val data: Array<out Quad.Term>","description":"dev.tesserakt.rdf.n3.dsl.N3Context.List.data","location":"n3/dsl/dev.tesserakt.rdf.n3.dsl/-n3-context/-list/data.html","searchKeys":["data","val data: Array<out Quad.Term>","dev.tesserakt.rdf.n3.dsl.N3Context.List.data"]},{"name":"val data: Array<out Quad.Term>","description":"dev.tesserakt.rdf.n3.dsl.N3Context.Multiple.data","location":"n3/dsl/dev.tesserakt.rdf.n3.dsl/-n3-context/-multiple/data.html","searchKeys":["data","val data: Array<out Quad.Term>","dev.tesserakt.rdf.n3.dsl.N3Context.Multiple.data"]},{"name":"val path: String","description":"dev.tesserakt.rdf.n3.dsl.N3Context.Environment.path","location":"n3/dsl/dev.tesserakt.rdf.n3.dsl/-n3-context/-environment/path.html","searchKeys":["path","val path: String","dev.tesserakt.rdf.n3.dsl.N3Context.Environment.path"]},{"name":"value class List","description":"dev.tesserakt.rdf.n3.dsl.N3Context.List","location":"n3/dsl/dev.tesserakt.rdf.n3.dsl/-n3-context/-list/index.html","searchKeys":["List","value class List","dev.tesserakt.rdf.n3.dsl.N3Context.List"]},{"name":"value class Multiple","description":"dev.tesserakt.rdf.n3.dsl.N3Context.Multiple","location":"n3/dsl/dev.tesserakt.rdf.n3.dsl/-n3-context/-multiple/index.html","searchKeys":["Multiple","value class Multiple","dev.tesserakt.rdf.n3.dsl.N3Context.Multiple"]},{"name":"var _blank_index: Int","description":"dev.tesserakt.rdf.n3.dsl.N3Context._blank_index","location":"n3/dsl/dev.tesserakt.rdf.n3.dsl/-n3-context/_blank_index.html","searchKeys":["_blank_index","var _blank_index: Int","dev.tesserakt.rdf.n3.dsl.N3Context._blank_index"]},{"name":"abstract fun create(stack: PrettyFormatter.Stack): String","description":"dev.tesserakt.rdf.trig.serialization.PrettyFormatter.Indent.create","location":"serialization/trig/dev.tesserakt.rdf.trig.serialization/-pretty-formatter/-indent/create.html","searchKeys":["create","abstract fun create(stack: PrettyFormatter.Stack): String","dev.tesserakt.rdf.trig.serialization.PrettyFormatter.Indent.create"]},{"name":"annotation class TrigSerializerDsl","description":"dev.tesserakt.rdf.trig.serialization.TrigSerializerDsl","location":"serialization/trig/dev.tesserakt.rdf.trig.serialization/-trig-serializer-dsl/index.html","searchKeys":["TrigSerializerDsl","annotation class TrigSerializerDsl","dev.tesserakt.rdf.trig.serialization.TrigSerializerDsl"]},{"name":"class Stack","description":"dev.tesserakt.rdf.trig.serialization.PrettyFormatter.Stack","location":"serialization/trig/dev.tesserakt.rdf.trig.serialization/-pretty-formatter/-stack/index.html","searchKeys":["Stack","class Stack","dev.tesserakt.rdf.trig.serialization.PrettyFormatter.Stack"]},{"name":"class TRiGConfig(var formatter: Formatter = DEFAULT_FORMATTER)","description":"dev.tesserakt.rdf.trig.serialization.TRiGConfig","location":"serialization/trig/dev.tesserakt.rdf.trig.serialization/-t-ri-g-config/index.html","searchKeys":["TRiGConfig","class TRiGConfig(var formatter: Formatter = DEFAULT_FORMATTER)","dev.tesserakt.rdf.trig.serialization.TRiGConfig"]},{"name":"class TriGSerializer(config: TRiGConfig) : Serializer","description":"dev.tesserakt.rdf.trig.serialization.TriGSerializer","location":"serialization/trig/dev.tesserakt.rdf.trig.serialization/-tri-g-serializer/index.html","searchKeys":["TriGSerializer","class TriGSerializer(config: TRiGConfig) : Serializer","dev.tesserakt.rdf.trig.serialization.TriGSerializer"]},{"name":"constructor()","description":"dev.tesserakt.rdf.trig.serialization.PrettyFormatter.Stack.Stack","location":"serialization/trig/dev.tesserakt.rdf.trig.serialization/-pretty-formatter/-stack/-stack.html","searchKeys":["Stack","constructor()","dev.tesserakt.rdf.trig.serialization.PrettyFormatter.Stack.Stack"]},{"name":"constructor(config: TRiGConfig)","description":"dev.tesserakt.rdf.trig.serialization.TriGSerializer.TriGSerializer","location":"serialization/trig/dev.tesserakt.rdf.trig.serialization/-tri-g-serializer/-tri-g-serializer.html","searchKeys":["TriGSerializer","constructor(config: TRiGConfig)","dev.tesserakt.rdf.trig.serialization.TriGSerializer.TriGSerializer"]},{"name":"constructor(formatter: Formatter = DEFAULT_FORMATTER)","description":"dev.tesserakt.rdf.trig.serialization.TRiGConfig.TRiGConfig","location":"serialization/trig/dev.tesserakt.rdf.trig.serialization/-t-ri-g-config/-t-ri-g-config.html","searchKeys":["TRiGConfig","constructor(formatter: Formatter = DEFAULT_FORMATTER)","dev.tesserakt.rdf.trig.serialization.TRiGConfig.TRiGConfig"]},{"name":"constructor(maxLength: Int)","description":"dev.tesserakt.rdf.trig.serialization.PrettyFormatter.LengthBasedFlattening.LengthBasedFlattening","location":"serialization/trig/dev.tesserakt.rdf.trig.serialization/-pretty-formatter/-length-based-flattening/-length-based-flattening.html","searchKeys":["LengthBasedFlattening","constructor(maxLength: Int)","dev.tesserakt.rdf.trig.serialization.PrettyFormatter.LengthBasedFlattening.LengthBasedFlattening"]},{"name":"constructor(pattern: String)","description":"dev.tesserakt.rdf.trig.serialization.PrettyFormatter.DynamicIndent.DynamicIndent","location":"serialization/trig/dev.tesserakt.rdf.trig.serialization/-pretty-formatter/-dynamic-indent/-dynamic-indent.html","searchKeys":["DynamicIndent","constructor(pattern: String)","dev.tesserakt.rdf.trig.serialization.PrettyFormatter.DynamicIndent.DynamicIndent"]},{"name":"constructor(pattern: String)","description":"dev.tesserakt.rdf.trig.serialization.PrettyFormatter.FixedStepIndent.FixedStepIndent","location":"serialization/trig/dev.tesserakt.rdf.trig.serialization/-pretty-formatter/-fixed-step-indent/-fixed-step-indent.html","searchKeys":["FixedStepIndent","constructor(pattern: String)","dev.tesserakt.rdf.trig.serialization.PrettyFormatter.FixedStepIndent.FixedStepIndent"]},{"name":"constructor(prefixes: Prefixes = NoPrefixes, indent: PrettyFormatter.Indent = FixedStepIndent(INDENT_PATTERN), flattenStrategy: PrettyFormatter.FlattenStrategy = LengthBasedFlattening(64))","description":"dev.tesserakt.rdf.trig.serialization.TRiGConfig.PrettyFormatterConf.PrettyFormatterConf","location":"serialization/trig/dev.tesserakt.rdf.trig.serialization/-t-ri-g-config/-pretty-formatter-conf/-pretty-formatter-conf.html","searchKeys":["PrettyFormatterConf","constructor(prefixes: Prefixes = NoPrefixes, indent: PrettyFormatter.Indent = FixedStepIndent(INDENT_PATTERN), flattenStrategy: PrettyFormatter.FlattenStrategy = LengthBasedFlattening(64))","dev.tesserakt.rdf.trig.serialization.TRiGConfig.PrettyFormatterConf.PrettyFormatterConf"]},{"name":"constructor(prefixes: Prefixes, indent: PrettyFormatter.Indent = if (prefixes.isEmpty()) FixedStepIndent(INDENT_PATTERN) else DynamicIndent(INDENT_PATTERN), flattenStrategy: PrettyFormatter.FlattenStrategy = LengthBasedFlattening(64))","description":"dev.tesserakt.rdf.trig.serialization.PrettyFormatter.PrettyFormatter","location":"serialization/trig/dev.tesserakt.rdf.trig.serialization/-pretty-formatter/-pretty-formatter.html","searchKeys":["PrettyFormatter","constructor(prefixes: Prefixes, indent: PrettyFormatter.Indent = if (prefixes.isEmpty()) FixedStepIndent(INDENT_PATTERN) else DynamicIndent(INDENT_PATTERN), flattenStrategy: PrettyFormatter.FlattenStrategy = LengthBasedFlattening(64))","dev.tesserakt.rdf.trig.serialization.PrettyFormatter.PrettyFormatter"]},{"name":"data class LengthBasedFlattening(maxLength: Int) : PrettyFormatter.FlattenStrategy","description":"dev.tesserakt.rdf.trig.serialization.PrettyFormatter.LengthBasedFlattening","location":"serialization/trig/dev.tesserakt.rdf.trig.serialization/-pretty-formatter/-length-based-flattening/index.html","searchKeys":["LengthBasedFlattening","data class LengthBasedFlattening(maxLength: Int) : PrettyFormatter.FlattenStrategy","dev.tesserakt.rdf.trig.serialization.PrettyFormatter.LengthBasedFlattening"]},{"name":"data class PrettyFormatter(val prefixes: Prefixes, val indent: PrettyFormatter.Indent = if (prefixes.isEmpty()) FixedStepIndent(INDENT_PATTERN) else DynamicIndent(INDENT_PATTERN), val flattenStrategy: PrettyFormatter.FlattenStrategy = LengthBasedFlattening(64)) : Formatter","description":"dev.tesserakt.rdf.trig.serialization.PrettyFormatter","location":"serialization/trig/dev.tesserakt.rdf.trig.serialization/-pretty-formatter/index.html","searchKeys":["PrettyFormatter","data class PrettyFormatter(val prefixes: Prefixes, val indent: PrettyFormatter.Indent = if (prefixes.isEmpty()) FixedStepIndent(INDENT_PATTERN) else DynamicIndent(INDENT_PATTERN), val flattenStrategy: PrettyFormatter.FlattenStrategy = LengthBasedFlattening(64)) : Formatter","dev.tesserakt.rdf.trig.serialization.PrettyFormatter"]},{"name":"data class PrettyFormatterConf(prefixes: Prefixes = NoPrefixes, indent: PrettyFormatter.Indent = FixedStepIndent(INDENT_PATTERN), flattenStrategy: PrettyFormatter.FlattenStrategy = LengthBasedFlattening(64))","description":"dev.tesserakt.rdf.trig.serialization.TRiGConfig.PrettyFormatterConf","location":"serialization/trig/dev.tesserakt.rdf.trig.serialization/-t-ri-g-config/-pretty-formatter-conf/index.html","searchKeys":["PrettyFormatterConf","data class PrettyFormatterConf(prefixes: Prefixes = NoPrefixes, indent: PrettyFormatter.Indent = FixedStepIndent(INDENT_PATTERN), flattenStrategy: PrettyFormatter.FlattenStrategy = LengthBasedFlattening(64))","dev.tesserakt.rdf.trig.serialization.TRiGConfig.PrettyFormatterConf"]},{"name":"data object NoFlattening : PrettyFormatter.FlattenStrategy","description":"dev.tesserakt.rdf.trig.serialization.PrettyFormatter.NoFlattening","location":"serialization/trig/dev.tesserakt.rdf.trig.serialization/-pretty-formatter/-no-flattening/index.html","searchKeys":["NoFlattening","data object NoFlattening : PrettyFormatter.FlattenStrategy","dev.tesserakt.rdf.trig.serialization.PrettyFormatter.NoFlattening"]},{"name":"data object SimpleFormatter : Formatter","description":"dev.tesserakt.rdf.trig.serialization.SimpleFormatter","location":"serialization/trig/dev.tesserakt.rdf.trig.serialization/-simple-formatter/index.html","searchKeys":["SimpleFormatter","data object SimpleFormatter : Formatter","dev.tesserakt.rdf.trig.serialization.SimpleFormatter"]},{"name":"fun TRiGConfig.PrettyFormatterConf.withDynamicIndent(pattern: String = INDENT_PATTERN)","description":"dev.tesserakt.rdf.trig.serialization.withDynamicIndent","location":"serialization/trig/dev.tesserakt.rdf.trig.serialization/with-dynamic-indent.html","searchKeys":["withDynamicIndent","fun TRiGConfig.PrettyFormatterConf.withDynamicIndent(pattern: String = INDENT_PATTERN)","dev.tesserakt.rdf.trig.serialization.withDynamicIndent"]},{"name":"fun TRiGConfig.PrettyFormatterConf.withFixedIndent(pattern: String = INDENT_PATTERN)","description":"dev.tesserakt.rdf.trig.serialization.withFixedIndent","location":"serialization/trig/dev.tesserakt.rdf.trig.serialization/with-fixed-indent.html","searchKeys":["withFixedIndent","fun TRiGConfig.PrettyFormatterConf.withFixedIndent(pattern: String = INDENT_PATTERN)","dev.tesserakt.rdf.trig.serialization.withFixedIndent"]},{"name":"fun TRiGConfig.PrettyFormatterConf.withPrefixes(value: Iterable<Pair<String, String>>)","description":"dev.tesserakt.rdf.trig.serialization.withPrefixes","location":"serialization/trig/dev.tesserakt.rdf.trig.serialization/with-prefixes.html","searchKeys":["withPrefixes","fun TRiGConfig.PrettyFormatterConf.withPrefixes(value: Iterable<Pair<String, String>>)","dev.tesserakt.rdf.trig.serialization.withPrefixes"]},{"name":"fun TRiGConfig.PrettyFormatterConf.withPrefixes(value: Map<String, String>)","description":"dev.tesserakt.rdf.trig.serialization.withPrefixes","location":"serialization/trig/dev.tesserakt.rdf.trig.serialization/with-prefixes.html","searchKeys":["withPrefixes","fun TRiGConfig.PrettyFormatterConf.withPrefixes(value: Map<String, String>)","dev.tesserakt.rdf.trig.serialization.withPrefixes"]},{"name":"fun TRiGConfig.PrettyFormatterConf.withPrefixes(value: Prefixes)","description":"dev.tesserakt.rdf.trig.serialization.withPrefixes","location":"serialization/trig/dev.tesserakt.rdf.trig.serialization/with-prefixes.html","searchKeys":["withPrefixes","fun TRiGConfig.PrettyFormatterConf.withPrefixes(value: Prefixes)","dev.tesserakt.rdf.trig.serialization.withPrefixes"]},{"name":"fun TRiGConfig.PrettyFormatterConf.withPrefixes(vararg ontology: Ontology)","description":"dev.tesserakt.rdf.trig.serialization.withPrefixes","location":"serialization/trig/dev.tesserakt.rdf.trig.serialization/with-prefixes.html","searchKeys":["withPrefixes","fun TRiGConfig.PrettyFormatterConf.withPrefixes(vararg ontology: Ontology)","dev.tesserakt.rdf.trig.serialization.withPrefixes"]},{"name":"fun build(): PrettyFormatter","description":"dev.tesserakt.rdf.trig.serialization.TRiGConfig.PrettyFormatterConf.build","location":"serialization/trig/dev.tesserakt.rdf.trig.serialization/-t-ri-g-config/-pretty-formatter-conf/build.html","searchKeys":["build","fun build(): PrettyFormatter","dev.tesserakt.rdf.trig.serialization.TRiGConfig.PrettyFormatterConf.build"]},{"name":"fun interface Indent","description":"dev.tesserakt.rdf.trig.serialization.PrettyFormatter.Indent","location":"serialization/trig/dev.tesserakt.rdf.trig.serialization/-pretty-formatter/-indent/index.html","searchKeys":["Indent","fun interface Indent","dev.tesserakt.rdf.trig.serialization.PrettyFormatter.Indent"]},{"name":"fun trig(builder: TRiGConfig.() -> Unit): TriGSerializer","description":"dev.tesserakt.rdf.trig.serialization.trig","location":"serialization/trig/dev.tesserakt.rdf.trig.serialization/trig.html","searchKeys":["trig","fun trig(builder: TRiGConfig.() -> Unit): TriGSerializer","dev.tesserakt.rdf.trig.serialization.trig"]},{"name":"inline fun TRiGConfig.PrettyFormatterConf.withPrefixes(block: MutableMap<String, String>.() -> Unit)","description":"dev.tesserakt.rdf.trig.serialization.withPrefixes","location":"serialization/trig/dev.tesserakt.rdf.trig.serialization/with-prefixes.html","searchKeys":["withPrefixes","inline fun TRiGConfig.PrettyFormatterConf.withPrefixes(block: MutableMap<String, String>.() -> Unit)","dev.tesserakt.rdf.trig.serialization.withPrefixes"]},{"name":"inline fun TRiGConfig.usePrettyFormatting(block: TRiGConfig.PrettyFormatterConf.() -> Unit = {})","description":"dev.tesserakt.rdf.trig.serialization.usePrettyFormatting","location":"serialization/trig/dev.tesserakt.rdf.trig.serialization/use-pretty-formatting.html","searchKeys":["usePrettyFormatting","inline fun TRiGConfig.usePrettyFormatting(block: TRiGConfig.PrettyFormatterConf.() -> Unit = {})","dev.tesserakt.rdf.trig.serialization.usePrettyFormatting"]},{"name":"inline fun TRiGConfig.useSimpleFormatting()","description":"dev.tesserakt.rdf.trig.serialization.useSimpleFormatting","location":"serialization/trig/dev.tesserakt.rdf.trig.serialization/use-simple-formatting.html","searchKeys":["useSimpleFormatting","inline fun TRiGConfig.useSimpleFormatting()","dev.tesserakt.rdf.trig.serialization.useSimpleFormatting"]},{"name":"object Companion","description":"dev.tesserakt.rdf.trig.serialization.TRiGConfig.Companion","location":"serialization/trig/dev.tesserakt.rdf.trig.serialization/-t-ri-g-config/-companion/index.html","searchKeys":["Companion","object Companion","dev.tesserakt.rdf.trig.serialization.TRiGConfig.Companion"]},{"name":"object Companion : Serializer","description":"dev.tesserakt.rdf.trig.serialization.TriGSerializer.Companion","location":"serialization/trig/dev.tesserakt.rdf.trig.serialization/-tri-g-serializer/-companion/index.html","searchKeys":["Companion","object Companion : Serializer","dev.tesserakt.rdf.trig.serialization.TriGSerializer.Companion"]},{"name":"open override fun create(stack: PrettyFormatter.Stack): String","description":"dev.tesserakt.rdf.trig.serialization.PrettyFormatter.DynamicIndent.create","location":"serialization/trig/dev.tesserakt.rdf.trig.serialization/-pretty-formatter/-dynamic-indent/create.html","searchKeys":["create","open override fun create(stack: PrettyFormatter.Stack): String","dev.tesserakt.rdf.trig.serialization.PrettyFormatter.DynamicIndent.create"]},{"name":"open override fun create(stack: PrettyFormatter.Stack): String","description":"dev.tesserakt.rdf.trig.serialization.PrettyFormatter.FixedStepIndent.create","location":"serialization/trig/dev.tesserakt.rdf.trig.serialization/-pretty-formatter/-fixed-step-indent/create.html","searchKeys":["create","open override fun create(stack: PrettyFormatter.Stack): String","dev.tesserakt.rdf.trig.serialization.PrettyFormatter.FixedStepIndent.create"]},{"name":"open override fun deserialize(input: DataSource): Iterator<Quad>","description":"dev.tesserakt.rdf.trig.serialization.TriGSerializer.Companion.deserialize","location":"serialization/trig/dev.tesserakt.rdf.trig.serialization/-tri-g-serializer/-companion/deserialize.html","searchKeys":["deserialize","open override fun deserialize(input: DataSource): Iterator<Quad>","dev.tesserakt.rdf.trig.serialization.TriGSerializer.Companion.deserialize"]},{"name":"open override fun deserialize(input: DataSource): Iterator<Quad>","description":"dev.tesserakt.rdf.trig.serialization.TriGSerializer.deserialize","location":"serialization/trig/dev.tesserakt.rdf.trig.serialization/-tri-g-serializer/deserialize.html","searchKeys":["deserialize","open override fun deserialize(input: DataSource): Iterator<Quad>","dev.tesserakt.rdf.trig.serialization.TriGSerializer.deserialize"]},{"name":"open override fun serialize(data: Collection<Quad>): Iterator<String>","description":"dev.tesserakt.rdf.trig.serialization.TriGSerializer.Companion.serialize","location":"serialization/trig/dev.tesserakt.rdf.trig.serialization/-tri-g-serializer/-companion/serialize.html","searchKeys":["serialize","open override fun serialize(data: Collection<Quad>): Iterator<String>","dev.tesserakt.rdf.trig.serialization.TriGSerializer.Companion.serialize"]},{"name":"open override fun serialize(data: Collection<Quad>): Iterator<String>","description":"dev.tesserakt.rdf.trig.serialization.TriGSerializer.serialize","location":"serialization/trig/dev.tesserakt.rdf.trig.serialization/-tri-g-serializer/serialize.html","searchKeys":["serialize","open override fun serialize(data: Collection<Quad>): Iterator<String>","dev.tesserakt.rdf.trig.serialization.TriGSerializer.serialize"]},{"name":"open override fun serialize(data: Iterator<Quad>): Iterator<String>","description":"dev.tesserakt.rdf.trig.serialization.TriGSerializer.Companion.serialize","location":"serialization/trig/dev.tesserakt.rdf.trig.serialization/-tri-g-serializer/-companion/serialize.html","searchKeys":["serialize","open override fun serialize(data: Iterator<Quad>): Iterator<String>","dev.tesserakt.rdf.trig.serialization.TriGSerializer.Companion.serialize"]},{"name":"open override fun serialize(data: Iterator<Quad>): Iterator<String>","description":"dev.tesserakt.rdf.trig.serialization.TriGSerializer.serialize","location":"serialization/trig/dev.tesserakt.rdf.trig.serialization/-tri-g-serializer/serialize.html","searchKeys":["serialize","open override fun serialize(data: Iterator<Quad>): Iterator<String>","dev.tesserakt.rdf.trig.serialization.TriGSerializer.serialize"]},{"name":"open override fun toString(): String","description":"dev.tesserakt.rdf.trig.serialization.PrettyFormatter.Stack.toString","location":"serialization/trig/dev.tesserakt.rdf.trig.serialization/-pretty-formatter/-stack/to-string.html","searchKeys":["toString","open override fun toString(): String","dev.tesserakt.rdf.trig.serialization.PrettyFormatter.Stack.toString"]},{"name":"sealed class FlattenStrategy","description":"dev.tesserakt.rdf.trig.serialization.PrettyFormatter.FlattenStrategy","location":"serialization/trig/dev.tesserakt.rdf.trig.serialization/-pretty-formatter/-flatten-strategy/index.html","searchKeys":["FlattenStrategy","sealed class FlattenStrategy","dev.tesserakt.rdf.trig.serialization.PrettyFormatter.FlattenStrategy"]},{"name":"sealed class Formatter","description":"dev.tesserakt.rdf.trig.serialization.Formatter","location":"serialization/trig/dev.tesserakt.rdf.trig.serialization/-formatter/index.html","searchKeys":["Formatter","sealed class Formatter","dev.tesserakt.rdf.trig.serialization.Formatter"]},{"name":"val NoPrefixes: Prefixes","description":"dev.tesserakt.rdf.trig.serialization.TRiGConfig.Companion.NoPrefixes","location":"serialization/trig/dev.tesserakt.rdf.trig.serialization/-t-ri-g-config/-companion/-no-prefixes.html","searchKeys":["NoPrefixes","val NoPrefixes: Prefixes","dev.tesserakt.rdf.trig.serialization.TRiGConfig.Companion.NoPrefixes"]},{"name":"val depth: Int","description":"dev.tesserakt.rdf.trig.serialization.PrettyFormatter.Stack.depth","location":"serialization/trig/dev.tesserakt.rdf.trig.serialization/-pretty-formatter/-stack/depth.html","searchKeys":["depth","val depth: Int","dev.tesserakt.rdf.trig.serialization.PrettyFormatter.Stack.depth"]},{"name":"val flattenStrategy: PrettyFormatter.FlattenStrategy","description":"dev.tesserakt.rdf.trig.serialization.PrettyFormatter.flattenStrategy","location":"serialization/trig/dev.tesserakt.rdf.trig.serialization/-pretty-formatter/flatten-strategy.html","searchKeys":["flattenStrategy","val flattenStrategy: PrettyFormatter.FlattenStrategy","dev.tesserakt.rdf.trig.serialization.PrettyFormatter.flattenStrategy"]},{"name":"val indent: PrettyFormatter.Indent","description":"dev.tesserakt.rdf.trig.serialization.PrettyFormatter.indent","location":"serialization/trig/dev.tesserakt.rdf.trig.serialization/-pretty-formatter/indent.html","searchKeys":["indent","val indent: PrettyFormatter.Indent","dev.tesserakt.rdf.trig.serialization.PrettyFormatter.indent"]},{"name":"val prefixes: Prefixes","description":"dev.tesserakt.rdf.trig.serialization.PrettyFormatter.prefixes","location":"serialization/trig/dev.tesserakt.rdf.trig.serialization/-pretty-formatter/prefixes.html","searchKeys":["prefixes","val prefixes: Prefixes","dev.tesserakt.rdf.trig.serialization.PrettyFormatter.prefixes"]},{"name":"value class DynamicIndent(pattern: String) : PrettyFormatter.Indent","description":"dev.tesserakt.rdf.trig.serialization.PrettyFormatter.DynamicIndent","location":"serialization/trig/dev.tesserakt.rdf.trig.serialization/-pretty-formatter/-dynamic-indent/index.html","searchKeys":["DynamicIndent","value class DynamicIndent(pattern: String) : PrettyFormatter.Indent","dev.tesserakt.rdf.trig.serialization.PrettyFormatter.DynamicIndent"]},{"name":"value class FixedStepIndent(pattern: String) : PrettyFormatter.Indent","description":"dev.tesserakt.rdf.trig.serialization.PrettyFormatter.FixedStepIndent","location":"serialization/trig/dev.tesserakt.rdf.trig.serialization/-pretty-formatter/-fixed-step-indent/index.html","searchKeys":["FixedStepIndent","value class FixedStepIndent(pattern: String) : PrettyFormatter.Indent","dev.tesserakt.rdf.trig.serialization.PrettyFormatter.FixedStepIndent"]},{"name":"var formatter: Formatter","description":"dev.tesserakt.rdf.trig.serialization.TRiGConfig.formatter","location":"serialization/trig/dev.tesserakt.rdf.trig.serialization/-t-ri-g-config/formatter.html","searchKeys":["formatter","var formatter: Formatter","dev.tesserakt.rdf.trig.serialization.TRiGConfig.formatter"]},{"name":"class BufferedString(reader: DataSourceStream, bufferSize: Int = 4000)","description":"dev.tesserakt.rdf.serialization.util.BufferedString","location":"serialization/core/dev.tesserakt.rdf.serialization.util/-buffered-string/index.html","searchKeys":["BufferedString","class BufferedString(reader: DataSourceStream, bufferSize: Int = 4000)","dev.tesserakt.rdf.serialization.util.BufferedString"]},{"name":"constructor(reader: DataSourceStream, bufferSize: Int = 4000)","description":"dev.tesserakt.rdf.serialization.util.BufferedString.BufferedString","location":"serialization/core/dev.tesserakt.rdf.serialization.util/-buffered-string/-buffered-string.html","searchKeys":["BufferedString","constructor(reader: DataSourceStream, bufferSize: Int = 4000)","dev.tesserakt.rdf.serialization.util.BufferedString.BufferedString"]},{"name":"fun consume(count: Int = 1)","description":"dev.tesserakt.rdf.serialization.util.BufferedString.consume","location":"serialization/core/dev.tesserakt.rdf.serialization.util/-buffered-string/consume.html","searchKeys":["consume","fun consume(count: Int = 1)","dev.tesserakt.rdf.serialization.util.BufferedString.consume"]},{"name":"fun index(): Int","description":"dev.tesserakt.rdf.serialization.util.BufferedString.index","location":"serialization/core/dev.tesserakt.rdf.serialization.util/-buffered-string/--index--.html","searchKeys":["index","fun index(): Int","dev.tesserakt.rdf.serialization.util.BufferedString.index"]},{"name":"fun peek(offset: Int = 0): Char?","description":"dev.tesserakt.rdf.serialization.util.BufferedString.peek","location":"serialization/core/dev.tesserakt.rdf.serialization.util/-buffered-string/peek.html","searchKeys":["peek","fun peek(offset: Int = 0): Char?","dev.tesserakt.rdf.serialization.util.BufferedString.peek"]},{"name":"fun report(indicator: String, message: String): String","description":"dev.tesserakt.rdf.serialization.util.BufferedString.report","location":"serialization/core/dev.tesserakt.rdf.serialization.util/-buffered-string/report.html","searchKeys":["report","fun report(indicator: String, message: String): String","dev.tesserakt.rdf.serialization.util.BufferedString.report"]},{"name":"fun startsWith(other: String, ignoreCase: Boolean = false): Boolean","description":"dev.tesserakt.rdf.serialization.util.BufferedString.startsWith","location":"serialization/core/dev.tesserakt.rdf.serialization.util/-buffered-string/starts-with.html","searchKeys":["startsWith","fun startsWith(other: String, ignoreCase: Boolean = false): Boolean","dev.tesserakt.rdf.serialization.util.BufferedString.startsWith"]},{"name":"fun substring(start: Int, end: Int): String","description":"dev.tesserakt.rdf.serialization.util.BufferedString.substring","location":"serialization/core/dev.tesserakt.rdf.serialization.util/-buffered-string/substring.html","searchKeys":["substring","fun substring(start: Int, end: Int): String","dev.tesserakt.rdf.serialization.util.BufferedString.substring"]},{"name":"abstract fun onQuadAdded(quad: Quad)","description":"dev.tesserakt.rdf.types.MutableStore.Listener.onQuadAdded","location":"rdf/dev.tesserakt.rdf.types/-mutable-store/-listener/on-quad-added.html","searchKeys":["onQuadAdded","abstract fun onQuadAdded(quad: Quad)","dev.tesserakt.rdf.types.MutableStore.Listener.onQuadAdded"]},{"name":"abstract fun onQuadRemoved(quad: Quad)","description":"dev.tesserakt.rdf.types.MutableStore.Listener.onQuadRemoved","location":"rdf/dev.tesserakt.rdf.types/-mutable-store/-listener/on-quad-removed.html","searchKeys":["onQuadRemoved","abstract fun onQuadRemoved(quad: Quad)","dev.tesserakt.rdf.types.MutableStore.Listener.onQuadRemoved"]},{"name":"abstract val base_uri: String","description":"dev.tesserakt.rdf.ontology.Ontology.base_uri","location":"rdf/dev.tesserakt.rdf.ontology/-ontology/base_uri.html","searchKeys":["base_uri","abstract val base_uri: String","dev.tesserakt.rdf.ontology.Ontology.base_uri"]},{"name":"abstract val prefix: String","description":"dev.tesserakt.rdf.ontology.Ontology.prefix","location":"rdf/dev.tesserakt.rdf.ontology/-ontology/prefix.html","searchKeys":["prefix","abstract val prefix: String","dev.tesserakt.rdf.ontology.Ontology.prefix"]},{"name":"abstract val value: String","description":"dev.tesserakt.rdf.types.Quad.Term.value","location":"rdf/dev.tesserakt.rdf.types/-quad/-term/value.html","searchKeys":["value","abstract val value: String","dev.tesserakt.rdf.types.Quad.Term.value"]},{"name":"class GraphJs","description":"QuadJs.GraphJs","location":"rdf/[root]/-quad-js/-graph-js/index.html","searchKeys":["GraphJs","class GraphJs","QuadJs.GraphJs"]},{"name":"class MutableStore(quads: Collection<Quad> = emptyList()) : Set<Quad> ","description":"dev.tesserakt.rdf.types.MutableStore","location":"rdf/dev.tesserakt.rdf.types/-mutable-store/index.html","searchKeys":["MutableStore","class MutableStore(quads: Collection<Quad> = emptyList()) : Set<Quad> ","dev.tesserakt.rdf.types.MutableStore"]},{"name":"class MutableStoreJs(quads: Array<QuadJs>? = undefined)","description":"MutableStoreJs","location":"rdf/[root]/-mutable-store-js/index.html","searchKeys":["MutableStoreJs","class MutableStoreJs(quads: Array<QuadJs>? = undefined)","MutableStoreJs"]},{"name":"class QuadJs(s: QuadJs.TermJs? = undefined, p: QuadJs.TermJs? = undefined, o: QuadJs.TermJs? = undefined, g: QuadJs.GraphJs = graph())","description":"QuadJs","location":"rdf/[root]/-quad-js/index.html","searchKeys":["QuadJs","class QuadJs(s: QuadJs.TermJs? = undefined, p: QuadJs.TermJs? = undefined, o: QuadJs.TermJs? = undefined, g: QuadJs.GraphJs = graph())","QuadJs"]},{"name":"class Store : Set<Quad> ","description":"dev.tesserakt.rdf.types.Store","location":"rdf/dev.tesserakt.rdf.types/-store/index.html","searchKeys":["Store","class Store : Set<Quad> ","dev.tesserakt.rdf.types.Store"]},{"name":"class TermJs","description":"QuadJs.TermJs","location":"rdf/[root]/-quad-js/-term-js/index.html","searchKeys":["TermJs","class TermJs","QuadJs.TermJs"]},{"name":"constructor()","description":"dev.tesserakt.rdf.types.Store.Store","location":"rdf/dev.tesserakt.rdf.types/-store/-store.html","searchKeys":["Store","constructor()","dev.tesserakt.rdf.types.Store.Store"]},{"name":"constructor(id: Int)","description":"dev.tesserakt.rdf.types.Quad.BlankTerm.BlankTerm","location":"rdf/dev.tesserakt.rdf.types/-quad/-blank-term/-blank-term.html","searchKeys":["BlankTerm","constructor(id: Int)","dev.tesserakt.rdf.types.Quad.BlankTerm.BlankTerm"]},{"name":"constructor(quads: Array<QuadJs>? = undefined)","description":"MutableStoreJs.MutableStoreJs","location":"rdf/[root]/-mutable-store-js/-mutable-store-js.html","searchKeys":["MutableStoreJs","constructor(quads: Array<QuadJs>? = undefined)","MutableStoreJs.MutableStoreJs"]},{"name":"constructor(quads: Collection<Quad> = emptyList())","description":"dev.tesserakt.rdf.types.MutableStore.MutableStore","location":"rdf/dev.tesserakt.rdf.types/-mutable-store/-mutable-store.html","searchKeys":["MutableStore","constructor(quads: Collection<Quad> = emptyList())","dev.tesserakt.rdf.types.MutableStore.MutableStore"]},{"name":"constructor(s: Quad.Term, p: Quad.NamedTerm, o: Quad.Term, g: Quad.Graph = DefaultGraph)","description":"dev.tesserakt.rdf.types.Quad.Quad","location":"rdf/dev.tesserakt.rdf.types/-quad/-quad.html","searchKeys":["Quad","constructor(s: Quad.Term, p: Quad.NamedTerm, o: Quad.Term, g: Quad.Graph = DefaultGraph)","dev.tesserakt.rdf.types.Quad.Quad"]},{"name":"constructor(s: QuadJs.TermJs? = undefined, p: QuadJs.TermJs? = undefined, o: QuadJs.TermJs? = undefined, g: QuadJs.GraphJs = graph())","description":"QuadJs.QuadJs","location":"rdf/[root]/-quad-js/-quad-js.html","searchKeys":["QuadJs","constructor(s: QuadJs.TermJs? = undefined, p: QuadJs.TermJs? = undefined, o: QuadJs.TermJs? = undefined, g: QuadJs.GraphJs = graph())","QuadJs.QuadJs"]},{"name":"constructor(value: String)","description":"dev.tesserakt.rdf.types.Quad.NamedTerm.NamedTerm","location":"rdf/dev.tesserakt.rdf.types/-quad/-named-term/-named-term.html","searchKeys":["NamedTerm","constructor(value: String)","dev.tesserakt.rdf.types.Quad.NamedTerm.NamedTerm"]},{"name":"constructor(value: String, type: Quad.NamedTerm)","description":"dev.tesserakt.rdf.types.Quad.Literal.Literal","location":"rdf/dev.tesserakt.rdf.types/-quad/-literal/-literal.html","searchKeys":["Literal","constructor(value: String, type: Quad.NamedTerm)","dev.tesserakt.rdf.types.Quad.Literal.Literal"]},{"name":"data class Literal(val value: String, val type: Quad.NamedTerm) : Quad.Term","description":"dev.tesserakt.rdf.types.Quad.Literal","location":"rdf/dev.tesserakt.rdf.types/-quad/-literal/index.html","searchKeys":["Literal","data class Literal(val value: String, val type: Quad.NamedTerm) : Quad.Term","dev.tesserakt.rdf.types.Quad.Literal"]},{"name":"data class Quad(val s: Quad.Term, val p: Quad.NamedTerm, val o: Quad.Term, val g: Quad.Graph = DefaultGraph)","description":"dev.tesserakt.rdf.types.Quad","location":"rdf/dev.tesserakt.rdf.types/-quad/index.html","searchKeys":["Quad","data class Quad(val s: Quad.Term, val p: Quad.NamedTerm, val o: Quad.Term, val g: Quad.Graph = DefaultGraph)","dev.tesserakt.rdf.types.Quad"]},{"name":"data object DefaultGraph : Quad.Graph","description":"dev.tesserakt.rdf.types.Quad.DefaultGraph","location":"rdf/dev.tesserakt.rdf.types/-quad/-default-graph/index.html","searchKeys":["DefaultGraph","data object DefaultGraph : Quad.Graph","dev.tesserakt.rdf.types.Quad.DefaultGraph"]},{"name":"fun <T> T.asLiteralTerm(): Quad.Literal","description":"dev.tesserakt.rdf.types.Quad.Companion.asLiteralTerm","location":"rdf/dev.tesserakt.rdf.types/-quad/-companion/as-literal-term.html","searchKeys":["asLiteralTerm","fun <T> T.asLiteralTerm(): Quad.Literal","dev.tesserakt.rdf.types.Quad.Companion.asLiteralTerm"]},{"name":"fun Boolean.asLiteralTerm(): Quad.Literal","description":"dev.tesserakt.rdf.types.Quad.Companion.asLiteralTerm","location":"rdf/dev.tesserakt.rdf.types/-quad/-companion/as-literal-term.html","searchKeys":["asLiteralTerm","fun Boolean.asLiteralTerm(): Quad.Literal","dev.tesserakt.rdf.types.Quad.Companion.asLiteralTerm"]},{"name":"fun Collection<Quad>.toJsMutableStore(): MutableStoreJs","description":"toJsMutableStore","location":"rdf/[root]/to-js-mutable-store.html","searchKeys":["toJsMutableStore","fun Collection<Quad>.toJsMutableStore(): MutableStoreJs","toJsMutableStore"]},{"name":"fun Double.asLiteralTerm(): Quad.Literal","description":"dev.tesserakt.rdf.types.Quad.Companion.asLiteralTerm","location":"rdf/dev.tesserakt.rdf.types/-quad/-companion/as-literal-term.html","searchKeys":["asLiteralTerm","fun Double.asLiteralTerm(): Quad.Literal","dev.tesserakt.rdf.types.Quad.Companion.asLiteralTerm"]},{"name":"fun Float.asLiteralTerm(): Quad.Literal","description":"dev.tesserakt.rdf.types.Quad.Companion.asLiteralTerm","location":"rdf/dev.tesserakt.rdf.types/-quad/-companion/as-literal-term.html","searchKeys":["asLiteralTerm","fun Float.asLiteralTerm(): Quad.Literal","dev.tesserakt.rdf.types.Quad.Companion.asLiteralTerm"]},{"name":"fun Int.asLiteralTerm(): Quad.Literal","description":"dev.tesserakt.rdf.types.Quad.Companion.asLiteralTerm","location":"rdf/dev.tesserakt.rdf.types/-quad/-companion/as-literal-term.html","searchKeys":["asLiteralTerm","fun Int.asLiteralTerm(): Quad.Literal","dev.tesserakt.rdf.types.Quad.Companion.asLiteralTerm"]},{"name":"fun Iterable<Quad>.toStore(): Store","description":"dev.tesserakt.rdf.types.toStore","location":"rdf/dev.tesserakt.rdf.types/to-store.html","searchKeys":["toStore","fun Iterable<Quad>.toStore(): Store","dev.tesserakt.rdf.types.toStore"]},{"name":"fun Iterator<Quad>.consume(target: Store = Store()): Store","description":"dev.tesserakt.rdf.types.consume","location":"rdf/dev.tesserakt.rdf.types/consume.html","searchKeys":["consume","fun Iterator<Quad>.consume(target: Store = Store()): Store","dev.tesserakt.rdf.types.consume"]},{"name":"fun Long.asLiteralTerm(): Quad.Literal","description":"dev.tesserakt.rdf.types.Quad.Companion.asLiteralTerm","location":"rdf/dev.tesserakt.rdf.types/-quad/-companion/as-literal-term.html","searchKeys":["asLiteralTerm","fun Long.asLiteralTerm(): Quad.Literal","dev.tesserakt.rdf.types.Quad.Companion.asLiteralTerm"]},{"name":"fun MutableStoreJs.unwrap(): MutableStore","description":"unwrap","location":"rdf/[root]/unwrap.html","searchKeys":["unwrap","fun MutableStoreJs.unwrap(): MutableStore","unwrap"]},{"name":"fun Number.asLiteralTerm(): Quad.Literal","description":"dev.tesserakt.rdf.types.Quad.Companion.asLiteralTerm","location":"rdf/dev.tesserakt.rdf.types/-quad/-companion/as-literal-term.html","searchKeys":["asLiteralTerm","fun Number.asLiteralTerm(): Quad.Literal","dev.tesserakt.rdf.types.Quad.Companion.asLiteralTerm"]},{"name":"fun Quad.Graph.toJsGraph(): QuadJs.GraphJs","description":"toJsGraph","location":"rdf/[root]/to-js-graph.html","searchKeys":["toJsGraph","fun Quad.Graph.toJsGraph(): QuadJs.GraphJs","toJsGraph"]},{"name":"fun Quad.Term.toJsTerm(): QuadJs.TermJs","description":"toJsTerm","location":"rdf/[root]/to-js-term.html","searchKeys":["toJsTerm","fun Quad.Term.toJsTerm(): QuadJs.TermJs","toJsTerm"]},{"name":"fun Quad.toJsQuad(): QuadJs","description":"toJsQuad","location":"rdf/[root]/to-js-quad.html","searchKeys":["toJsQuad","fun Quad.toJsQuad(): QuadJs","toJsQuad"]},{"name":"fun QuadJs.unwrap(): Quad","description":"unwrap","location":"rdf/[root]/unwrap.html","searchKeys":["unwrap","fun QuadJs.unwrap(): Quad","unwrap"]},{"name":"fun String.asLiteralTerm(): Quad.Literal","description":"dev.tesserakt.rdf.types.Quad.Companion.asLiteralTerm","location":"rdf/dev.tesserakt.rdf.types/-quad/-companion/as-literal-term.html","searchKeys":["asLiteralTerm","fun String.asLiteralTerm(): Quad.Literal","dev.tesserakt.rdf.types.Quad.Companion.asLiteralTerm"]},{"name":"fun String.asNamedTerm(): Quad.NamedTerm","description":"dev.tesserakt.rdf.types.Quad.Companion.asNamedTerm","location":"rdf/dev.tesserakt.rdf.types/-quad/-companion/as-named-term.html","searchKeys":["asNamedTerm","fun String.asNamedTerm(): Quad.NamedTerm","dev.tesserakt.rdf.types.Quad.Companion.asNamedTerm"]},{"name":"fun add(quad: Quad)","description":"dev.tesserakt.rdf.types.MutableStore.add","location":"rdf/dev.tesserakt.rdf.types/-mutable-store/add.html","searchKeys":["add","fun add(quad: Quad)","dev.tesserakt.rdf.types.MutableStore.add"]},{"name":"fun add(quad: Quad)","description":"dev.tesserakt.rdf.types.Store.add","location":"rdf/dev.tesserakt.rdf.types/-store/add.html","searchKeys":["add","fun add(quad: Quad)","dev.tesserakt.rdf.types.Store.add"]},{"name":"fun addAll(quad: Collection<Quad>)","description":"dev.tesserakt.rdf.types.Store.addAll","location":"rdf/dev.tesserakt.rdf.types/-store/add-all.html","searchKeys":["addAll","fun addAll(quad: Collection<Quad>)","dev.tesserakt.rdf.types.Store.addAll"]},{"name":"fun addAll(quad: Iterable<Quad>)","description":"dev.tesserakt.rdf.types.Store.addAll","location":"rdf/dev.tesserakt.rdf.types/-store/add-all.html","searchKeys":["addAll","fun addAll(quad: Iterable<Quad>)","dev.tesserakt.rdf.types.Store.addAll"]},{"name":"fun addListener(listener: MutableStore.Listener)","description":"dev.tesserakt.rdf.types.MutableStore.addListener","location":"rdf/dev.tesserakt.rdf.types/-mutable-store/add-listener.html","searchKeys":["addListener","fun addListener(listener: MutableStore.Listener)","dev.tesserakt.rdf.types.MutableStore.addListener"]},{"name":"fun contains(element: QuadJs): Boolean","description":"MutableStoreJs.contains","location":"rdf/[root]/-mutable-store-js/contains.html","searchKeys":["contains","fun contains(element: QuadJs): Boolean","MutableStoreJs.contains"]},{"name":"fun graph(value: String? = undefined): QuadJs.GraphJs","description":"QuadJs.Builder.graph","location":"rdf/[root]/-quad-js/-builder/graph.html","searchKeys":["graph","fun graph(value: String? = undefined): QuadJs.GraphJs","QuadJs.Builder.graph"]},{"name":"fun insert(quad: QuadJs? = undefined)","description":"MutableStoreJs.insert","location":"rdf/[root]/-mutable-store-js/insert.html","searchKeys":["insert","fun insert(quad: QuadJs? = undefined)","MutableStoreJs.insert"]},{"name":"fun insertQuad(s: QuadJs.TermJs? = undefined, p: QuadJs.TermJs? = undefined, o: QuadJs.TermJs? = undefined, g: QuadJs.GraphJs? = undefined)","description":"MutableStoreJs.insertQuad","location":"rdf/[root]/-mutable-store-js/insert-quad.html","searchKeys":["insertQuad","fun insertQuad(s: QuadJs.TermJs? = undefined, p: QuadJs.TermJs? = undefined, o: QuadJs.TermJs? = undefined, g: QuadJs.GraphJs? = undefined)","MutableStoreJs.insertQuad"]},{"name":"fun iri(value: String? = undefined): QuadJs.TermJs","description":"QuadJs.Builder.iri","location":"rdf/[root]/-quad-js/-builder/iri.html","searchKeys":["iri","fun iri(value: String? = undefined): QuadJs.TermJs","QuadJs.Builder.iri"]},{"name":"fun isEmpty(): Boolean","description":"MutableStoreJs.isEmpty","location":"rdf/[root]/-mutable-store-js/is-empty.html","searchKeys":["isEmpty","fun isEmpty(): Boolean","MutableStoreJs.isEmpty"]},{"name":"fun literal(value: Any? = undefined): QuadJs.TermJs","description":"QuadJs.Builder.literal","location":"rdf/[root]/-quad-js/-builder/literal.html","searchKeys":["literal","fun literal(value: Any? = undefined): QuadJs.TermJs","QuadJs.Builder.literal"]},{"name":"fun remove(quad: Quad)","description":"dev.tesserakt.rdf.types.MutableStore.remove","location":"rdf/dev.tesserakt.rdf.types/-mutable-store/remove.html","searchKeys":["remove","fun remove(quad: Quad)","dev.tesserakt.rdf.types.MutableStore.remove"]},{"name":"fun remove(quad: QuadJs? = undefined)","description":"MutableStoreJs.remove","location":"rdf/[root]/-mutable-store-js/remove.html","searchKeys":["remove","fun remove(quad: QuadJs? = undefined)","MutableStoreJs.remove"]},{"name":"fun removeListener(listener: MutableStore.Listener)","description":"dev.tesserakt.rdf.types.MutableStore.removeListener","location":"rdf/dev.tesserakt.rdf.types/-mutable-store/remove-listener.html","searchKeys":["removeListener","fun removeListener(listener: MutableStore.Listener)","dev.tesserakt.rdf.types.MutableStore.removeListener"]},{"name":"fun toMutableStore(): MutableStore","description":"dev.tesserakt.rdf.types.Store.toMutableStore","location":"rdf/dev.tesserakt.rdf.types/-store/to-mutable-store.html","searchKeys":["toMutableStore","fun toMutableStore(): MutableStore","dev.tesserakt.rdf.types.Store.toMutableStore"]},{"name":"interface Listener","description":"dev.tesserakt.rdf.types.MutableStore.Listener","location":"rdf/dev.tesserakt.rdf.types/-mutable-store/-listener/index.html","searchKeys":["Listener","interface Listener","dev.tesserakt.rdf.types.MutableStore.Listener"]},{"name":"interface Ontology","description":"dev.tesserakt.rdf.ontology.Ontology","location":"rdf/dev.tesserakt.rdf.ontology/-ontology/index.html","searchKeys":["Ontology","interface Ontology","dev.tesserakt.rdf.ontology.Ontology"]},{"name":"object Builder","description":"QuadJs.Builder","location":"rdf/[root]/-quad-js/-builder/index.html","searchKeys":["Builder","object Builder","QuadJs.Builder"]},{"name":"object Companion","description":"dev.tesserakt.rdf.types.Quad.Companion","location":"rdf/dev.tesserakt.rdf.types/-quad/-companion/index.html","searchKeys":["Companion","object Companion","dev.tesserakt.rdf.types.Quad.Companion"]},{"name":"object RDF : Ontology","description":"dev.tesserakt.rdf.ontology.RDF","location":"rdf/dev.tesserakt.rdf.ontology/-r-d-f/index.html","searchKeys":["RDF","object RDF : Ontology","dev.tesserakt.rdf.ontology.RDF"]},{"name":"object SHACL : Ontology","description":"dev.tesserakt.rdf.ontology.SHACL","location":"rdf/dev.tesserakt.rdf.ontology/-s-h-a-c-l/index.html","searchKeys":["SHACL","object SHACL : Ontology","dev.tesserakt.rdf.ontology.SHACL"]},{"name":"object XSD : Ontology","description":"dev.tesserakt.rdf.ontology.XSD","location":"rdf/dev.tesserakt.rdf.ontology/-x-s-d/index.html","searchKeys":["XSD","object XSD : Ontology","dev.tesserakt.rdf.ontology.XSD"]},{"name":"open operator fun invoke(iri: String): Quad.NamedTerm","description":"dev.tesserakt.rdf.ontology.Ontology.invoke","location":"rdf/dev.tesserakt.rdf.ontology/-ontology/invoke.html","searchKeys":["invoke","open operator fun invoke(iri: String): Quad.NamedTerm","dev.tesserakt.rdf.ontology.Ontology.invoke"]},{"name":"open operator override fun contains(element: Quad): Boolean","description":"dev.tesserakt.rdf.types.MutableStore.contains","location":"rdf/dev.tesserakt.rdf.types/-mutable-store/contains.html","searchKeys":["contains","open operator override fun contains(element: Quad): Boolean","dev.tesserakt.rdf.types.MutableStore.contains"]},{"name":"open operator override fun contains(element: Quad): Boolean","description":"dev.tesserakt.rdf.types.Store.contains","location":"rdf/dev.tesserakt.rdf.types/-store/contains.html","searchKeys":["contains","open operator override fun contains(element: Quad): Boolean","dev.tesserakt.rdf.types.Store.contains"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"MutableStoreJs.equals","location":"rdf/[root]/-mutable-store-js/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","MutableStoreJs.equals"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"QuadJs.GraphJs.equals","location":"rdf/[root]/-quad-js/-graph-js/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","QuadJs.GraphJs.equals"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"QuadJs.TermJs.equals","location":"rdf/[root]/-quad-js/-term-js/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","QuadJs.TermJs.equals"]},{"name":"open operator override fun iterator(): MutableIterator<Quad>","description":"dev.tesserakt.rdf.types.MutableStore.iterator","location":"rdf/dev.tesserakt.rdf.types/-mutable-store/iterator.html","searchKeys":["iterator","open operator override fun iterator(): MutableIterator<Quad>","dev.tesserakt.rdf.types.MutableStore.iterator"]},{"name":"open operator override fun iterator(): MutableIterator<Quad>","description":"dev.tesserakt.rdf.types.Store.iterator","location":"rdf/dev.tesserakt.rdf.types/-store/iterator.html","searchKeys":["iterator","open operator override fun iterator(): MutableIterator<Quad>","dev.tesserakt.rdf.types.Store.iterator"]},{"name":"open override fun containsAll(elements: Collection<Quad>): Boolean","description":"dev.tesserakt.rdf.types.MutableStore.containsAll","location":"rdf/dev.tesserakt.rdf.types/-mutable-store/contains-all.html","searchKeys":["containsAll","open override fun containsAll(elements: Collection<Quad>): Boolean","dev.tesserakt.rdf.types.MutableStore.containsAll"]},{"name":"open override fun containsAll(elements: Collection<Quad>): Boolean","description":"dev.tesserakt.rdf.types.Store.containsAll","location":"rdf/dev.tesserakt.rdf.types/-store/contains-all.html","searchKeys":["containsAll","open override fun containsAll(elements: Collection<Quad>): Boolean","dev.tesserakt.rdf.types.Store.containsAll"]},{"name":"open override fun hashCode(): Int","description":"MutableStoreJs.hashCode","location":"rdf/[root]/-mutable-store-js/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","MutableStoreJs.hashCode"]},{"name":"open override fun hashCode(): Int","description":"QuadJs.GraphJs.hashCode","location":"rdf/[root]/-quad-js/-graph-js/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","QuadJs.GraphJs.hashCode"]},{"name":"open override fun hashCode(): Int","description":"QuadJs.TermJs.hashCode","location":"rdf/[root]/-quad-js/-term-js/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","QuadJs.TermJs.hashCode"]},{"name":"open override fun isEmpty(): Boolean","description":"dev.tesserakt.rdf.types.MutableStore.isEmpty","location":"rdf/dev.tesserakt.rdf.types/-mutable-store/is-empty.html","searchKeys":["isEmpty","open override fun isEmpty(): Boolean","dev.tesserakt.rdf.types.MutableStore.isEmpty"]},{"name":"open override fun isEmpty(): Boolean","description":"dev.tesserakt.rdf.types.Store.isEmpty","location":"rdf/dev.tesserakt.rdf.types/-store/is-empty.html","searchKeys":["isEmpty","open override fun isEmpty(): Boolean","dev.tesserakt.rdf.types.Store.isEmpty"]},{"name":"open override fun toString(): String","description":"MutableStoreJs.toString","location":"rdf/[root]/-mutable-store-js/to-string.html","searchKeys":["toString","open override fun toString(): String","MutableStoreJs.toString"]},{"name":"open override fun toString(): String","description":"QuadJs.GraphJs.toString","location":"rdf/[root]/-quad-js/-graph-js/to-string.html","searchKeys":["toString","open override fun toString(): String","QuadJs.GraphJs.toString"]},{"name":"open override fun toString(): String","description":"QuadJs.TermJs.toString","location":"rdf/[root]/-quad-js/-term-js/to-string.html","searchKeys":["toString","open override fun toString(): String","QuadJs.TermJs.toString"]},{"name":"open override fun toString(): String","description":"dev.tesserakt.rdf.types.MutableStore.toString","location":"rdf/dev.tesserakt.rdf.types/-mutable-store/to-string.html","searchKeys":["toString","open override fun toString(): String","dev.tesserakt.rdf.types.MutableStore.toString"]},{"name":"open override fun toString(): String","description":"dev.tesserakt.rdf.types.Quad.BlankTerm.toString","location":"rdf/dev.tesserakt.rdf.types/-quad/-blank-term/to-string.html","searchKeys":["toString","open override fun toString(): String","dev.tesserakt.rdf.types.Quad.BlankTerm.toString"]},{"name":"open override fun toString(): String","description":"dev.tesserakt.rdf.types.Quad.Literal.toString","location":"rdf/dev.tesserakt.rdf.types/-quad/-literal/to-string.html","searchKeys":["toString","open override fun toString(): String","dev.tesserakt.rdf.types.Quad.Literal.toString"]},{"name":"open override fun toString(): String","description":"dev.tesserakt.rdf.types.Quad.NamedTerm.toString","location":"rdf/dev.tesserakt.rdf.types/-quad/-named-term/to-string.html","searchKeys":["toString","open override fun toString(): String","dev.tesserakt.rdf.types.Quad.NamedTerm.toString"]},{"name":"open override fun toString(): String","description":"dev.tesserakt.rdf.types.Quad.toString","location":"rdf/dev.tesserakt.rdf.types/-quad/to-string.html","searchKeys":["toString","open override fun toString(): String","dev.tesserakt.rdf.types.Quad.toString"]},{"name":"open override fun toString(): String","description":"dev.tesserakt.rdf.types.Store.toString","location":"rdf/dev.tesserakt.rdf.types/-store/to-string.html","searchKeys":["toString","open override fun toString(): String","dev.tesserakt.rdf.types.Store.toString"]},{"name":"open override val base_uri: String","description":"dev.tesserakt.rdf.ontology.RDF.base_uri","location":"rdf/dev.tesserakt.rdf.ontology/-r-d-f/base_uri.html","searchKeys":["base_uri","open override val base_uri: String","dev.tesserakt.rdf.ontology.RDF.base_uri"]},{"name":"open override val base_uri: String","description":"dev.tesserakt.rdf.ontology.SHACL.base_uri","location":"rdf/dev.tesserakt.rdf.ontology/-s-h-a-c-l/base_uri.html","searchKeys":["base_uri","open override val base_uri: String","dev.tesserakt.rdf.ontology.SHACL.base_uri"]},{"name":"open override val base_uri: String","description":"dev.tesserakt.rdf.ontology.XSD.base_uri","location":"rdf/dev.tesserakt.rdf.ontology/-x-s-d/base_uri.html","searchKeys":["base_uri","open override val base_uri: String","dev.tesserakt.rdf.ontology.XSD.base_uri"]},{"name":"open override val prefix: String","description":"dev.tesserakt.rdf.ontology.RDF.prefix","location":"rdf/dev.tesserakt.rdf.ontology/-r-d-f/prefix.html","searchKeys":["prefix","open override val prefix: String","dev.tesserakt.rdf.ontology.RDF.prefix"]},{"name":"open override val prefix: String","description":"dev.tesserakt.rdf.ontology.SHACL.prefix","location":"rdf/dev.tesserakt.rdf.ontology/-s-h-a-c-l/prefix.html","searchKeys":["prefix","open override val prefix: String","dev.tesserakt.rdf.ontology.SHACL.prefix"]},{"name":"open override val prefix: String","description":"dev.tesserakt.rdf.ontology.XSD.prefix","location":"rdf/dev.tesserakt.rdf.ontology/-x-s-d/prefix.html","searchKeys":["prefix","open override val prefix: String","dev.tesserakt.rdf.ontology.XSD.prefix"]},{"name":"open override val size: Int","description":"dev.tesserakt.rdf.types.MutableStore.size","location":"rdf/dev.tesserakt.rdf.types/-mutable-store/size.html","searchKeys":["size","open override val size: Int","dev.tesserakt.rdf.types.MutableStore.size"]},{"name":"open override val size: Int","description":"dev.tesserakt.rdf.types.Store.size","location":"rdf/dev.tesserakt.rdf.types/-store/size.html","searchKeys":["size","open override val size: Int","dev.tesserakt.rdf.types.Store.size"]},{"name":"open override val value: String","description":"dev.tesserakt.rdf.types.Quad.BlankTerm.value","location":"rdf/dev.tesserakt.rdf.types/-quad/-blank-term/value.html","searchKeys":["value","open override val value: String","dev.tesserakt.rdf.types.Quad.BlankTerm.value"]},{"name":"open override val value: String","description":"dev.tesserakt.rdf.types.Quad.Literal.value","location":"rdf/dev.tesserakt.rdf.types/-quad/-literal/value.html","searchKeys":["value","open override val value: String","dev.tesserakt.rdf.types.Quad.Literal.value"]},{"name":"open override val value: String","description":"dev.tesserakt.rdf.types.Quad.NamedTerm.value","location":"rdf/dev.tesserakt.rdf.types/-quad/-named-term/value.html","searchKeys":["value","open override val value: String","dev.tesserakt.rdf.types.Quad.NamedTerm.value"]},{"name":"sealed interface Graph","description":"dev.tesserakt.rdf.types.Quad.Graph","location":"rdf/dev.tesserakt.rdf.types/-quad/-graph/index.html","searchKeys":["Graph","sealed interface Graph","dev.tesserakt.rdf.types.Quad.Graph"]},{"name":"sealed interface Term","description":"dev.tesserakt.rdf.types.Quad.Term","location":"rdf/dev.tesserakt.rdf.types/-quad/-term/index.html","searchKeys":["Term","sealed interface Term","dev.tesserakt.rdf.types.Quad.Term"]},{"name":"val IRI: Quad.NamedTerm","description":"dev.tesserakt.rdf.ontology.SHACL.IRI","location":"rdf/dev.tesserakt.rdf.ontology/-s-h-a-c-l/-i-r-i.html","searchKeys":["IRI","val IRI: Quad.NamedTerm","dev.tesserakt.rdf.ontology.SHACL.IRI"]},{"name":"val Literal: Quad.NamedTerm","description":"dev.tesserakt.rdf.ontology.SHACL.Literal","location":"rdf/dev.tesserakt.rdf.ontology/-s-h-a-c-l/-literal.html","searchKeys":["Literal","val Literal: Quad.NamedTerm","dev.tesserakt.rdf.ontology.SHACL.Literal"]},{"name":"val NodeShape: Quad.NamedTerm","description":"dev.tesserakt.rdf.ontology.SHACL.NodeShape","location":"rdf/dev.tesserakt.rdf.ontology/-s-h-a-c-l/-node-shape.html","searchKeys":["NodeShape","val NodeShape: Quad.NamedTerm","dev.tesserakt.rdf.ontology.SHACL.NodeShape"]},{"name":"val PropertyShape: Quad.NamedTerm","description":"dev.tesserakt.rdf.ontology.SHACL.PropertyShape","location":"rdf/dev.tesserakt.rdf.ontology/-s-h-a-c-l/-property-shape.html","searchKeys":["PropertyShape","val PropertyShape: Quad.NamedTerm","dev.tesserakt.rdf.ontology.SHACL.PropertyShape"]},{"name":"val boolean: Quad.NamedTerm","description":"dev.tesserakt.rdf.ontology.XSD.boolean","location":"rdf/dev.tesserakt.rdf.ontology/-x-s-d/boolean.html","searchKeys":["boolean","val boolean: Quad.NamedTerm","dev.tesserakt.rdf.ontology.XSD.boolean"]},{"name":"val datatype: Quad.NamedTerm","description":"dev.tesserakt.rdf.ontology.SHACL.datatype","location":"rdf/dev.tesserakt.rdf.ontology/-s-h-a-c-l/datatype.html","searchKeys":["datatype","val datatype: Quad.NamedTerm","dev.tesserakt.rdf.ontology.SHACL.datatype"]},{"name":"val date: Quad.NamedTerm","description":"dev.tesserakt.rdf.ontology.XSD.date","location":"rdf/dev.tesserakt.rdf.ontology/-x-s-d/date.html","searchKeys":["date","val date: Quad.NamedTerm","dev.tesserakt.rdf.ontology.XSD.date"]},{"name":"val dateTime: Quad.NamedTerm","description":"dev.tesserakt.rdf.ontology.XSD.dateTime","location":"rdf/dev.tesserakt.rdf.ontology/-x-s-d/date-time.html","searchKeys":["dateTime","val dateTime: Quad.NamedTerm","dev.tesserakt.rdf.ontology.XSD.dateTime"]},{"name":"val double: Quad.NamedTerm","description":"dev.tesserakt.rdf.ontology.XSD.double","location":"rdf/dev.tesserakt.rdf.ontology/-x-s-d/double.html","searchKeys":["double","val double: Quad.NamedTerm","dev.tesserakt.rdf.ontology.XSD.double"]},{"name":"val duration: Quad.NamedTerm","description":"dev.tesserakt.rdf.ontology.XSD.duration","location":"rdf/dev.tesserakt.rdf.ontology/-x-s-d/duration.html","searchKeys":["duration","val duration: Quad.NamedTerm","dev.tesserakt.rdf.ontology.XSD.duration"]},{"name":"val first: Quad.NamedTerm","description":"dev.tesserakt.rdf.ontology.RDF.first","location":"rdf/dev.tesserakt.rdf.ontology/-r-d-f/first.html","searchKeys":["first","val first: Quad.NamedTerm","dev.tesserakt.rdf.ontology.RDF.first"]},{"name":"val float: Quad.NamedTerm","description":"dev.tesserakt.rdf.ontology.XSD.float","location":"rdf/dev.tesserakt.rdf.ontology/-x-s-d/float.html","searchKeys":["float","val float: Quad.NamedTerm","dev.tesserakt.rdf.ontology.XSD.float"]},{"name":"val g: Quad.Graph","description":"dev.tesserakt.rdf.types.Quad.g","location":"rdf/dev.tesserakt.rdf.types/-quad/g.html","searchKeys":["g","val g: Quad.Graph","dev.tesserakt.rdf.types.Quad.g"]},{"name":"val g: QuadJs.GraphJs","description":"QuadJs.g","location":"rdf/[root]/-quad-js/g.html","searchKeys":["g","val g: QuadJs.GraphJs","QuadJs.g"]},{"name":"val id: Int","description":"dev.tesserakt.rdf.types.Quad.BlankTerm.id","location":"rdf/dev.tesserakt.rdf.types/-quad/-blank-term/id.html","searchKeys":["id","val id: Int","dev.tesserakt.rdf.types.Quad.BlankTerm.id"]},{"name":"val int: Quad.NamedTerm","description":"dev.tesserakt.rdf.ontology.XSD.int","location":"rdf/dev.tesserakt.rdf.ontology/-x-s-d/int.html","searchKeys":["int","val int: Quad.NamedTerm","dev.tesserakt.rdf.ontology.XSD.int"]},{"name":"val integer: Quad.NamedTerm","description":"dev.tesserakt.rdf.ontology.XSD.integer","location":"rdf/dev.tesserakt.rdf.ontology/-x-s-d/integer.html","searchKeys":["integer","val integer: Quad.NamedTerm","dev.tesserakt.rdf.ontology.XSD.integer"]},{"name":"val langString: Quad.NamedTerm","description":"dev.tesserakt.rdf.ontology.RDF.langString","location":"rdf/dev.tesserakt.rdf.ontology/-r-d-f/lang-string.html","searchKeys":["langString","val langString: Quad.NamedTerm","dev.tesserakt.rdf.ontology.RDF.langString"]},{"name":"val long: Quad.NamedTerm","description":"dev.tesserakt.rdf.ontology.XSD.long","location":"rdf/dev.tesserakt.rdf.ontology/-x-s-d/long.html","searchKeys":["long","val long: Quad.NamedTerm","dev.tesserakt.rdf.ontology.XSD.long"]},{"name":"val maxCount: Quad.NamedTerm","description":"dev.tesserakt.rdf.ontology.SHACL.maxCount","location":"rdf/dev.tesserakt.rdf.ontology/-s-h-a-c-l/max-count.html","searchKeys":["maxCount","val maxCount: Quad.NamedTerm","dev.tesserakt.rdf.ontology.SHACL.maxCount"]},{"name":"val minCount: Quad.NamedTerm","description":"dev.tesserakt.rdf.ontology.SHACL.minCount","location":"rdf/dev.tesserakt.rdf.ontology/-s-h-a-c-l/min-count.html","searchKeys":["minCount","val minCount: Quad.NamedTerm","dev.tesserakt.rdf.ontology.SHACL.minCount"]},{"name":"val nil: Quad.NamedTerm","description":"dev.tesserakt.rdf.ontology.RDF.nil","location":"rdf/dev.tesserakt.rdf.ontology/-r-d-f/nil.html","searchKeys":["nil","val nil: Quad.NamedTerm","dev.tesserakt.rdf.ontology.RDF.nil"]},{"name":"val nodeKind: Quad.NamedTerm","description":"dev.tesserakt.rdf.ontology.SHACL.nodeKind","location":"rdf/dev.tesserakt.rdf.ontology/-s-h-a-c-l/node-kind.html","searchKeys":["nodeKind","val nodeKind: Quad.NamedTerm","dev.tesserakt.rdf.ontology.SHACL.nodeKind"]},{"name":"val o: Quad.Term","description":"dev.tesserakt.rdf.types.Quad.o","location":"rdf/dev.tesserakt.rdf.types/-quad/o.html","searchKeys":["o","val o: Quad.Term","dev.tesserakt.rdf.types.Quad.o"]},{"name":"val o: QuadJs.TermJs","description":"QuadJs.o","location":"rdf/[root]/-quad-js/o.html","searchKeys":["o","val o: QuadJs.TermJs","QuadJs.o"]},{"name":"val p: Quad.NamedTerm","description":"dev.tesserakt.rdf.types.Quad.p","location":"rdf/dev.tesserakt.rdf.types/-quad/p.html","searchKeys":["p","val p: Quad.NamedTerm","dev.tesserakt.rdf.types.Quad.p"]},{"name":"val p: QuadJs.TermJs","description":"QuadJs.p","location":"rdf/[root]/-quad-js/p.html","searchKeys":["p","val p: QuadJs.TermJs","QuadJs.p"]},{"name":"val path: Quad.NamedTerm","description":"dev.tesserakt.rdf.ontology.SHACL.path","location":"rdf/dev.tesserakt.rdf.ontology/-s-h-a-c-l/path.html","searchKeys":["path","val path: Quad.NamedTerm","dev.tesserakt.rdf.ontology.SHACL.path"]},{"name":"val property: Quad.NamedTerm","description":"dev.tesserakt.rdf.ontology.SHACL.property","location":"rdf/dev.tesserakt.rdf.ontology/-s-h-a-c-l/property.html","searchKeys":["property","val property: Quad.NamedTerm","dev.tesserakt.rdf.ontology.SHACL.property"]},{"name":"val rest: Quad.NamedTerm","description":"dev.tesserakt.rdf.ontology.RDF.rest","location":"rdf/dev.tesserakt.rdf.ontology/-r-d-f/rest.html","searchKeys":["rest","val rest: Quad.NamedTerm","dev.tesserakt.rdf.ontology.RDF.rest"]},{"name":"val s: Quad.Term","description":"dev.tesserakt.rdf.types.Quad.s","location":"rdf/dev.tesserakt.rdf.types/-quad/s.html","searchKeys":["s","val s: Quad.Term","dev.tesserakt.rdf.types.Quad.s"]},{"name":"val s: QuadJs.TermJs","description":"QuadJs.s","location":"rdf/[root]/-quad-js/s.html","searchKeys":["s","val s: QuadJs.TermJs","QuadJs.s"]},{"name":"val size: Int","description":"MutableStoreJs.size","location":"rdf/[root]/-mutable-store-js/size.html","searchKeys":["size","val size: Int","MutableStoreJs.size"]},{"name":"val string: Quad.NamedTerm","description":"dev.tesserakt.rdf.ontology.XSD.string","location":"rdf/dev.tesserakt.rdf.ontology/-x-s-d/string.html","searchKeys":["string","val string: Quad.NamedTerm","dev.tesserakt.rdf.ontology.XSD.string"]},{"name":"val targetClass: Quad.NamedTerm","description":"dev.tesserakt.rdf.ontology.SHACL.targetClass","location":"rdf/dev.tesserakt.rdf.ontology/-s-h-a-c-l/target-class.html","searchKeys":["targetClass","val targetClass: Quad.NamedTerm","dev.tesserakt.rdf.ontology.SHACL.targetClass"]},{"name":"val time: Quad.NamedTerm","description":"dev.tesserakt.rdf.ontology.XSD.time","location":"rdf/dev.tesserakt.rdf.ontology/-x-s-d/time.html","searchKeys":["time","val time: Quad.NamedTerm","dev.tesserakt.rdf.ontology.XSD.time"]},{"name":"val type: Quad.NamedTerm","description":"dev.tesserakt.rdf.ontology.RDF.type","location":"rdf/dev.tesserakt.rdf.ontology/-r-d-f/type.html","searchKeys":["type","val type: Quad.NamedTerm","dev.tesserakt.rdf.ontology.RDF.type"]},{"name":"val type: Quad.NamedTerm","description":"dev.tesserakt.rdf.types.Quad.Literal.type","location":"rdf/dev.tesserakt.rdf.types/-quad/-literal/type.html","searchKeys":["type","val type: Quad.NamedTerm","dev.tesserakt.rdf.types.Quad.Literal.type"]},{"name":"value class BlankTerm(val id: Int) : Quad.Term, Quad.Graph","description":"dev.tesserakt.rdf.types.Quad.BlankTerm","location":"rdf/dev.tesserakt.rdf.types/-quad/-blank-term/index.html","searchKeys":["BlankTerm","value class BlankTerm(val id: Int) : Quad.Term, Quad.Graph","dev.tesserakt.rdf.types.Quad.BlankTerm"]},{"name":"value class NamedTerm(val value: String) : Quad.Term, Quad.Graph","description":"dev.tesserakt.rdf.types.Quad.NamedTerm","location":"rdf/dev.tesserakt.rdf.types/-quad/-named-term/index.html","searchKeys":["NamedTerm","value class NamedTerm(val value: String) : Quad.Term, Quad.Graph","dev.tesserakt.rdf.types.Quad.NamedTerm"]},{"name":"abstract class SparqlException(message: String?) : RuntimeException","description":"dev.tesserakt.sparql.SparqlException","location":"sparql/common/dev.tesserakt.sparql/-sparql-exception/index.html","searchKeys":["SparqlException","abstract class SparqlException(message: String?) : RuntimeException","dev.tesserakt.sparql.SparqlException"]},{"name":"constructor(message: String?)","description":"dev.tesserakt.sparql.SparqlException.SparqlException","location":"sparql/common/dev.tesserakt.sparql/-sparql-exception/-sparql-exception.html","searchKeys":["SparqlException","constructor(message: String?)","dev.tesserakt.sparql.SparqlException.SparqlException"]},{"name":"fun List<Pair<String, Quad.Term>>.toBindings(): Bindings","description":"dev.tesserakt.sparql.toBindings","location":"sparql/common/dev.tesserakt.sparql/to-bindings.html","searchKeys":["toBindings","fun List<Pair<String, Quad.Term>>.toBindings(): Bindings","dev.tesserakt.sparql.toBindings"]},{"name":"fun Map<String, Quad.Term>.toBindings(): Bindings","description":"dev.tesserakt.sparql.toBindings","location":"sparql/common/dev.tesserakt.sparql/to-bindings.html","searchKeys":["toBindings","fun Map<String, Quad.Term>.toBindings(): Bindings","dev.tesserakt.sparql.toBindings"]},{"name":"interface Bindings : Iterable<Pair<String, Quad.Term>> ","description":"dev.tesserakt.sparql.Bindings","location":"sparql/common/dev.tesserakt.sparql/-bindings/index.html","searchKeys":["Bindings","interface Bindings : Iterable<Pair<String, Quad.Term>> ","dev.tesserakt.sparql.Bindings"]},{"name":"operator fun Bindings.get(name: String): Quad.Term?","description":"dev.tesserakt.sparql.get","location":"sparql/common/dev.tesserakt.sparql/get.html","searchKeys":["get","operator fun Bindings.get(name: String): Quad.Term?","dev.tesserakt.sparql.get"]},{"name":"abstract fun add(quad: Quad)","description":"dev.tesserakt.sparql.OngoingQueryEvaluation.add","location":"sparql/dev.tesserakt.sparql/-ongoing-query-evaluation/add.html","searchKeys":["add","abstract fun add(quad: Quad)","dev.tesserakt.sparql.OngoingQueryEvaluation.add"]},{"name":"abstract fun debugInformation(): String","description":"dev.tesserakt.sparql.OngoingQueryEvaluation.debugInformation","location":"sparql/dev.tesserakt.sparql/-ongoing-query-evaluation/debug-information.html","searchKeys":["debugInformation","abstract fun debugInformation(): String","dev.tesserakt.sparql.OngoingQueryEvaluation.debugInformation"]},{"name":"abstract fun remove(quad: Quad)","description":"dev.tesserakt.sparql.OngoingQueryEvaluation.remove","location":"sparql/dev.tesserakt.sparql/-ongoing-query-evaluation/remove.html","searchKeys":["remove","abstract fun remove(quad: Quad)","dev.tesserakt.sparql.OngoingQueryEvaluation.remove"]},{"name":"abstract fun subscribe(store: MutableStore)","description":"dev.tesserakt.sparql.OngoingQueryEvaluation.subscribe","location":"sparql/dev.tesserakt.sparql/-ongoing-query-evaluation/subscribe.html","searchKeys":["subscribe","abstract fun subscribe(store: MutableStore)","dev.tesserakt.sparql.OngoingQueryEvaluation.subscribe"]},{"name":"abstract fun unsubscribe(store: MutableStore)","description":"dev.tesserakt.sparql.OngoingQueryEvaluation.unsubscribe","location":"sparql/dev.tesserakt.sparql/-ongoing-query-evaluation/unsubscribe.html","searchKeys":["unsubscribe","abstract fun unsubscribe(store: MutableStore)","dev.tesserakt.sparql.OngoingQueryEvaluation.unsubscribe"]},{"name":"abstract val results: Collection<RT>","description":"dev.tesserakt.sparql.OngoingQueryEvaluation.results","location":"sparql/dev.tesserakt.sparql/-ongoing-query-evaluation/results.html","searchKeys":["results","abstract val results: Collection<RT>","dev.tesserakt.sparql.OngoingQueryEvaluation.results"]},{"name":"class BindingsJs : JsMap<String, QuadJs.TermJs> ","description":"SPARQLJs.BindingsJs","location":"sparql/[root]/-s-p-a-r-q-l-js/-bindings-js/index.html","searchKeys":["BindingsJs","class BindingsJs : JsMap<String, QuadJs.TermJs> ","SPARQLJs.BindingsJs"]},{"name":"class OngoingQueryEvaluationDebug<RT>(query: QueryState<RT, *>) : OngoingQueryEvaluation<RT> ","description":"dev.tesserakt.sparql.OngoingQueryEvaluationDebug","location":"sparql/dev.tesserakt.sparql/-ongoing-query-evaluation-debug/index.html","searchKeys":["OngoingQueryEvaluationDebug","class OngoingQueryEvaluationDebug<RT>(query: QueryState<RT, *>) : OngoingQueryEvaluation<RT> ","dev.tesserakt.sparql.OngoingQueryEvaluationDebug"]},{"name":"class OngoingQueryEvaluationRelease<RT>(query: QueryState<RT, *>) : OngoingQueryEvaluation<RT> ","description":"dev.tesserakt.sparql.OngoingQueryEvaluationRelease","location":"sparql/dev.tesserakt.sparql/-ongoing-query-evaluation-release/index.html","searchKeys":["OngoingQueryEvaluationRelease","class OngoingQueryEvaluationRelease<RT>(query: QueryState<RT, *>) : OngoingQueryEvaluation<RT> ","dev.tesserakt.sparql.OngoingQueryEvaluationRelease"]},{"name":"class Query<T>","description":"dev.tesserakt.sparql.Query","location":"sparql/dev.tesserakt.sparql/-query/index.html","searchKeys":["Query","class Query<T>","dev.tesserakt.sparql.Query"]},{"name":"class SelectQueryEvaluationJs","description":"SPARQLJs.SelectQueryEvaluationJs","location":"sparql/[root]/-s-p-a-r-q-l-js/-select-query-evaluation-js/index.html","searchKeys":["SelectQueryEvaluationJs","class SelectQueryEvaluationJs","SPARQLJs.SelectQueryEvaluationJs"]},{"name":"class SelectQueryJs","description":"SPARQLJs.SelectQueryJs","location":"sparql/[root]/-s-p-a-r-q-l-js/-select-query-js/index.html","searchKeys":["SelectQueryJs","class SelectQueryJs","SPARQLJs.SelectQueryJs"]},{"name":"constructor()","description":"dev.tesserakt.sparql.Compiler.Compiler","location":"sparql/dev.tesserakt.sparql/-compiler/-compiler.html","searchKeys":["Compiler","constructor()","dev.tesserakt.sparql.Compiler.Compiler"]},{"name":"constructor(query: QueryState<RT, *>)","description":"dev.tesserakt.sparql.OngoingQueryEvaluationDebug.OngoingQueryEvaluationDebug","location":"sparql/dev.tesserakt.sparql/-ongoing-query-evaluation-debug/-ongoing-query-evaluation-debug.html","searchKeys":["OngoingQueryEvaluationDebug","constructor(query: QueryState<RT, *>)","dev.tesserakt.sparql.OngoingQueryEvaluationDebug.OngoingQueryEvaluationDebug"]},{"name":"constructor(query: QueryState<RT, *>)","description":"dev.tesserakt.sparql.OngoingQueryEvaluationRelease.OngoingQueryEvaluationRelease","location":"sparql/dev.tesserakt.sparql/-ongoing-query-evaluation-release/-ongoing-query-evaluation-release.html","searchKeys":["OngoingQueryEvaluationRelease","constructor(query: QueryState<RT, *>)","dev.tesserakt.sparql.OngoingQueryEvaluationRelease.OngoingQueryEvaluationRelease"]},{"name":"constructor(structure: QueryStructure)","description":"dev.tesserakt.sparql.Compiler.CompiledQuery.CompiledQuery","location":"sparql/dev.tesserakt.sparql/-compiler/-compiled-query/-compiled-query.html","searchKeys":["CompiledQuery","constructor(structure: QueryStructure)","dev.tesserakt.sparql.Compiler.CompiledQuery.CompiledQuery"]},{"name":"fun <RT> Iterable<Quad>.query(query: Query<RT>): List<RT>","description":"dev.tesserakt.sparql.query","location":"sparql/dev.tesserakt.sparql/query.html","searchKeys":["query","fun <RT> Iterable<Quad>.query(query: Query<RT>): List<RT>","dev.tesserakt.sparql.query"]},{"name":"fun <RT> Iterable<Quad>.query(query: Query<RT>, callback: (QueryState.ResultChange<RT>) -> Unit)","description":"dev.tesserakt.sparql.query","location":"sparql/dev.tesserakt.sparql/query.html","searchKeys":["query","fun <RT> Iterable<Quad>.query(query: Query<RT>, callback: (QueryState.ResultChange<RT>) -> Unit)","dev.tesserakt.sparql.query"]},{"name":"fun <RT> MutableStore.query(query: Query<RT>): OngoingQueryEvaluation<RT>","description":"dev.tesserakt.sparql.query","location":"sparql/dev.tesserakt.sparql/query.html","searchKeys":["query","fun <RT> MutableStore.query(query: Query<RT>): OngoingQueryEvaluation<RT>","dev.tesserakt.sparql.query"]},{"name":"fun <RT> MutableStore.queryDebug(query: Query<RT>): OngoingQueryEvaluation<RT>","description":"dev.tesserakt.sparql.queryDebug","location":"sparql/dev.tesserakt.sparql/query-debug.html","searchKeys":["queryDebug","fun <RT> MutableStore.queryDebug(query: Query<RT>): OngoingQueryEvaluation<RT>","dev.tesserakt.sparql.queryDebug"]},{"name":"fun Select(input: String? = undefined): SPARQLJs.SelectQueryJs","description":"SPARQLJs.Select","location":"sparql/[root]/-s-p-a-r-q-l-js/-select.html","searchKeys":["Select","fun Select(input: String? = undefined): SPARQLJs.SelectQueryJs","SPARQLJs.Select"]},{"name":"fun Select(query: String, compiler: Compiler = Compiler()): Query<Bindings>","description":"dev.tesserakt.sparql.Query.Companion.Select","location":"sparql/dev.tesserakt.sparql/-query/-companion/-select.html","searchKeys":["Select","fun Select(query: String, compiler: Compiler = Compiler()): Query<Bindings>","dev.tesserakt.sparql.Query.Companion.Select"]},{"name":"fun String.toSparqlSelectQuery(): Query<Bindings>","description":"dev.tesserakt.sparql.Compiler.toSparqlSelectQuery","location":"sparql/dev.tesserakt.sparql/-compiler/to-sparql-select-query.html","searchKeys":["toSparqlSelectQuery","fun String.toSparqlSelectQuery(): Query<Bindings>","dev.tesserakt.sparql.Compiler.toSparqlSelectQuery"]},{"name":"fun query(query: SPARQLJs.SelectQueryJs? = undefined, store: MutableStoreJs? = undefined): SPARQLJs.SelectQueryEvaluationJs","description":"SPARQLJs.query","location":"sparql/[root]/-s-p-a-r-q-l-js/query.html","searchKeys":["query","fun query(query: SPARQLJs.SelectQueryJs? = undefined, store: MutableStoreJs? = undefined): SPARQLJs.SelectQueryEvaluationJs","SPARQLJs.query"]},{"name":"interface OngoingQueryEvaluation<RT>","description":"dev.tesserakt.sparql.OngoingQueryEvaluation","location":"sparql/dev.tesserakt.sparql/-ongoing-query-evaluation/index.html","searchKeys":["OngoingQueryEvaluation","interface OngoingQueryEvaluation<RT>","dev.tesserakt.sparql.OngoingQueryEvaluation"]},{"name":"object Companion","description":"dev.tesserakt.sparql.Query.Companion","location":"sparql/dev.tesserakt.sparql/-query/-companion/index.html","searchKeys":["Companion","object Companion","dev.tesserakt.sparql.Query.Companion"]},{"name":"object SPARQLJs","description":"SPARQLJs","location":"sparql/[root]/-s-p-a-r-q-l-js/index.html","searchKeys":["SPARQLJs","object SPARQLJs","SPARQLJs"]},{"name":"open class Compiler","description":"dev.tesserakt.sparql.Compiler","location":"sparql/dev.tesserakt.sparql/-compiler/index.html","searchKeys":["Compiler","open class Compiler","dev.tesserakt.sparql.Compiler"]},{"name":"open fun compile(query: String): Compiler.CompiledQuery","description":"dev.tesserakt.sparql.Compiler.compile","location":"sparql/dev.tesserakt.sparql/-compiler/compile.html","searchKeys":["compile","open fun compile(query: String): Compiler.CompiledQuery","dev.tesserakt.sparql.Compiler.compile"]},{"name":"open override fun add(quad: Quad)","description":"dev.tesserakt.sparql.OngoingQueryEvaluationDebug.add","location":"sparql/dev.tesserakt.sparql/-ongoing-query-evaluation-debug/add.html","searchKeys":["add","open override fun add(quad: Quad)","dev.tesserakt.sparql.OngoingQueryEvaluationDebug.add"]},{"name":"open override fun add(quad: Quad)","description":"dev.tesserakt.sparql.OngoingQueryEvaluationRelease.add","location":"sparql/dev.tesserakt.sparql/-ongoing-query-evaluation-release/add.html","searchKeys":["add","open override fun add(quad: Quad)","dev.tesserakt.sparql.OngoingQueryEvaluationRelease.add"]},{"name":"open override fun debugInformation(): String","description":"dev.tesserakt.sparql.OngoingQueryEvaluationDebug.debugInformation","location":"sparql/dev.tesserakt.sparql/-ongoing-query-evaluation-debug/debug-information.html","searchKeys":["debugInformation","open override fun debugInformation(): String","dev.tesserakt.sparql.OngoingQueryEvaluationDebug.debugInformation"]},{"name":"open override fun debugInformation(): String","description":"dev.tesserakt.sparql.OngoingQueryEvaluationRelease.debugInformation","location":"sparql/dev.tesserakt.sparql/-ongoing-query-evaluation-release/debug-information.html","searchKeys":["debugInformation","open override fun debugInformation(): String","dev.tesserakt.sparql.OngoingQueryEvaluationRelease.debugInformation"]},{"name":"open override fun remove(quad: Quad)","description":"dev.tesserakt.sparql.OngoingQueryEvaluationDebug.remove","location":"sparql/dev.tesserakt.sparql/-ongoing-query-evaluation-debug/remove.html","searchKeys":["remove","open override fun remove(quad: Quad)","dev.tesserakt.sparql.OngoingQueryEvaluationDebug.remove"]},{"name":"open override fun remove(quad: Quad)","description":"dev.tesserakt.sparql.OngoingQueryEvaluationRelease.remove","location":"sparql/dev.tesserakt.sparql/-ongoing-query-evaluation-release/remove.html","searchKeys":["remove","open override fun remove(quad: Quad)","dev.tesserakt.sparql.OngoingQueryEvaluationRelease.remove"]},{"name":"open override fun subscribe(store: MutableStore)","description":"dev.tesserakt.sparql.OngoingQueryEvaluationDebug.subscribe","location":"sparql/dev.tesserakt.sparql/-ongoing-query-evaluation-debug/subscribe.html","searchKeys":["subscribe","open override fun subscribe(store: MutableStore)","dev.tesserakt.sparql.OngoingQueryEvaluationDebug.subscribe"]},{"name":"open override fun subscribe(store: MutableStore)","description":"dev.tesserakt.sparql.OngoingQueryEvaluationRelease.subscribe","location":"sparql/dev.tesserakt.sparql/-ongoing-query-evaluation-release/subscribe.html","searchKeys":["subscribe","open override fun subscribe(store: MutableStore)","dev.tesserakt.sparql.OngoingQueryEvaluationRelease.subscribe"]},{"name":"open override fun unsubscribe(store: MutableStore)","description":"dev.tesserakt.sparql.OngoingQueryEvaluationDebug.unsubscribe","location":"sparql/dev.tesserakt.sparql/-ongoing-query-evaluation-debug/unsubscribe.html","searchKeys":["unsubscribe","open override fun unsubscribe(store: MutableStore)","dev.tesserakt.sparql.OngoingQueryEvaluationDebug.unsubscribe"]},{"name":"open override fun unsubscribe(store: MutableStore)","description":"dev.tesserakt.sparql.OngoingQueryEvaluationRelease.unsubscribe","location":"sparql/dev.tesserakt.sparql/-ongoing-query-evaluation-release/unsubscribe.html","searchKeys":["unsubscribe","open override fun unsubscribe(store: MutableStore)","dev.tesserakt.sparql.OngoingQueryEvaluationRelease.unsubscribe"]},{"name":"open override val results: List<RT>","description":"dev.tesserakt.sparql.OngoingQueryEvaluationDebug.results","location":"sparql/dev.tesserakt.sparql/-ongoing-query-evaluation-debug/results.html","searchKeys":["results","open override val results: List<RT>","dev.tesserakt.sparql.OngoingQueryEvaluationDebug.results"]},{"name":"open override val results: List<RT>","description":"dev.tesserakt.sparql.OngoingQueryEvaluationRelease.results","location":"sparql/dev.tesserakt.sparql/-ongoing-query-evaluation-release/results.html","searchKeys":["results","open override val results: List<RT>","dev.tesserakt.sparql.OngoingQueryEvaluationRelease.results"]},{"name":"val bindings: Array<JsMap<String, QuadJs.TermJs>>","description":"SPARQLJs.SelectQueryEvaluationJs.bindings","location":"sparql/[root]/-s-p-a-r-q-l-js/-select-query-evaluation-js/bindings.html","searchKeys":["bindings","val bindings: Array<JsMap<String, QuadJs.TermJs>>","SPARQLJs.SelectQueryEvaluationJs.bindings"]},{"name":"val structure: QueryStructure","description":"dev.tesserakt.sparql.Compiler.CompiledQuery.structure","location":"sparql/dev.tesserakt.sparql/-compiler/-compiled-query/structure.html","searchKeys":["structure","val structure: QueryStructure","dev.tesserakt.sparql.Compiler.CompiledQuery.structure"]},{"name":"value class CompiledQuery(val structure: QueryStructure)","description":"dev.tesserakt.sparql.Compiler.CompiledQuery","location":"sparql/dev.tesserakt.sparql/-compiler/-compiled-query/index.html","searchKeys":["CompiledQuery","value class CompiledQuery(val structure: QueryStructure)","dev.tesserakt.sparql.Compiler.CompiledQuery"]},{"name":"abstract fun process(subject: Quad.BlankTerm, predicate: Quad.NamedTerm, object: Quad.Term, graph: Quad.Graph = Quad.DefaultGraph)","description":"dev.tesserakt.rdf.dsl.RDF.Consumer.process","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-r-d-f/-consumer/process.html","searchKeys":["process","abstract fun process(subject: Quad.BlankTerm, predicate: Quad.NamedTerm, object: Quad.Term, graph: Quad.Graph = Quad.DefaultGraph)","dev.tesserakt.rdf.dsl.RDF.Consumer.process"]},{"name":"abstract fun process(subject: Quad.NamedTerm, predicate: Quad.NamedTerm, object: Quad.Term, graph: Quad.Graph = Quad.DefaultGraph)","description":"dev.tesserakt.rdf.dsl.RDF.Consumer.process","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-r-d-f/-consumer/process.html","searchKeys":["process","abstract fun process(subject: Quad.NamedTerm, predicate: Quad.NamedTerm, object: Quad.Term, graph: Quad.Graph = Quad.DefaultGraph)","dev.tesserakt.rdf.dsl.RDF.Consumer.process"]},{"name":"class Prefix(prefix: String, base: String)","description":"dev.tesserakt.rdf.dsl.RDF.Prefix","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-r-d-f/-prefix/index.html","searchKeys":["Prefix","class Prefix(prefix: String, base: String)","dev.tesserakt.rdf.dsl.RDF.Prefix"]},{"name":"class RDF","description":"dev.tesserakt.rdf.dsl.RDF","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-r-d-f/index.html","searchKeys":["RDF","class RDF","dev.tesserakt.rdf.dsl.RDF"]},{"name":"class StoreAdapter(store: Store) : RDF.Consumer","description":"dev.tesserakt.rdf.dsl.StoreAdapter","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-store-adapter/index.html","searchKeys":["StoreAdapter","class StoreAdapter(store: Store) : RDF.Consumer","dev.tesserakt.rdf.dsl.StoreAdapter"]},{"name":"constructor(_name: Quad.BlankTerm)","description":"dev.tesserakt.rdf.dsl.RDF.Blank.Blank","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-r-d-f/-blank/-blank.html","searchKeys":["Blank","constructor(_name: Quad.BlankTerm)","dev.tesserakt.rdf.dsl.RDF.Blank.Blank"]},{"name":"constructor(_s: Quad.BlankTerm, _p: Quad.NamedTerm)","description":"dev.tesserakt.rdf.dsl.RDF.BlankStatement.BlankStatement","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-r-d-f/-blank-statement/-blank-statement.html","searchKeys":["BlankStatement","constructor(_s: Quad.BlankTerm, _p: Quad.NamedTerm)","dev.tesserakt.rdf.dsl.RDF.BlankStatement.BlankStatement"]},{"name":"constructor(_s: Quad.NamedTerm, _p: Quad.NamedTerm)","description":"dev.tesserakt.rdf.dsl.RDF.Statement.Statement","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-r-d-f/-statement/-statement.html","searchKeys":["Statement","constructor(_s: Quad.NamedTerm, _p: Quad.NamedTerm)","dev.tesserakt.rdf.dsl.RDF.Statement.Statement"]},{"name":"constructor(path: String)","description":"dev.tesserakt.rdf.dsl.RDF.Environment.Environment","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-r-d-f/-environment/-environment.html","searchKeys":["Environment","constructor(path: String)","dev.tesserakt.rdf.dsl.RDF.Environment.Environment"]},{"name":"constructor(prefix: String, base: String)","description":"dev.tesserakt.rdf.dsl.RDF.Prefix.Prefix","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-r-d-f/-prefix/-prefix.html","searchKeys":["Prefix","constructor(prefix: String, base: String)","dev.tesserakt.rdf.dsl.RDF.Prefix.Prefix"]},{"name":"constructor(store: Store)","description":"dev.tesserakt.rdf.dsl.StoreAdapter.StoreAdapter","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-store-adapter/-store-adapter.html","searchKeys":["StoreAdapter","constructor(store: Store)","dev.tesserakt.rdf.dsl.StoreAdapter.StoreAdapter"]},{"name":"fun RDF_DSL.extractPrefixes(): Map<String, String>","description":"dev.tesserakt.rdf.dsl.extractPrefixes","location":"rdf/dsl/dev.tesserakt.rdf.dsl/extract-prefixes.html","searchKeys":["extractPrefixes","fun RDF_DSL.extractPrefixes(): Map<String, String>","dev.tesserakt.rdf.dsl.extractPrefixes"]},{"name":"fun Store.insert(environment: RDF.Environment = Environment(path = \"\"), block: RDF.() -> Unit): Store","description":"dev.tesserakt.rdf.dsl.insert","location":"rdf/dsl/dev.tesserakt.rdf.dsl/insert.html","searchKeys":["insert","fun Store.insert(environment: RDF.Environment = Environment(path = \"\"), block: RDF.() -> Unit): Store","dev.tesserakt.rdf.dsl.insert"]},{"name":"fun buildStore(environment: RDF.Environment, block: RDF.() -> Unit): Store","description":"dev.tesserakt.rdf.dsl.buildStore","location":"rdf/dsl/dev.tesserakt.rdf.dsl/build-store.html","searchKeys":["buildStore","fun buildStore(environment: RDF.Environment, block: RDF.() -> Unit): Store","dev.tesserakt.rdf.dsl.buildStore"]},{"name":"fun buildStore(path: String = \"\", block: RDF.() -> Unit): Store","description":"dev.tesserakt.rdf.dsl.buildStore","location":"rdf/dsl/dev.tesserakt.rdf.dsl/build-store.html","searchKeys":["buildStore","fun buildStore(path: String = \"\", block: RDF.() -> Unit): Store","dev.tesserakt.rdf.dsl.buildStore"]},{"name":"fun graph(identifier: Quad.BlankTerm, producer: RDF.() -> Unit)","description":"dev.tesserakt.rdf.dsl.RDF.graph","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-r-d-f/graph.html","searchKeys":["graph","fun graph(identifier: Quad.BlankTerm, producer: RDF.() -> Unit)","dev.tesserakt.rdf.dsl.RDF.graph"]},{"name":"fun graph(iri: String, producer: RDF.() -> Unit)","description":"dev.tesserakt.rdf.dsl.RDF.graph","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-r-d-f/graph.html","searchKeys":["graph","fun graph(iri: String, producer: RDF.() -> Unit)","dev.tesserakt.rdf.dsl.RDF.graph"]},{"name":"fun graph(term: Quad.NamedTerm, producer: RDF.() -> Unit)","description":"dev.tesserakt.rdf.dsl.RDF.graph","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-r-d-f/graph.html","searchKeys":["graph","fun graph(term: Quad.NamedTerm, producer: RDF.() -> Unit)","dev.tesserakt.rdf.dsl.RDF.graph"]},{"name":"fun list(data: Collection<Quad.Term>): RDF.List","description":"dev.tesserakt.rdf.dsl.RDF.list","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-r-d-f/list.html","searchKeys":["list","fun list(data: Collection<Quad.Term>): RDF.List","dev.tesserakt.rdf.dsl.RDF.list"]},{"name":"fun list(vararg data: Quad.Term): RDF.List","description":"dev.tesserakt.rdf.dsl.RDF.list","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-r-d-f/list.html","searchKeys":["list","fun list(vararg data: Quad.Term): RDF.List","dev.tesserakt.rdf.dsl.RDF.list"]},{"name":"fun local(name: String): Quad.NamedTerm","description":"dev.tesserakt.rdf.dsl.RDF.local","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-r-d-f/local.html","searchKeys":["local","fun local(name: String): Quad.NamedTerm","dev.tesserakt.rdf.dsl.RDF.local"]},{"name":"fun multiple(data: Collection<Quad.Term>): RDF.Multiple","description":"dev.tesserakt.rdf.dsl.RDF.multiple","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-r-d-f/multiple.html","searchKeys":["multiple","fun multiple(data: Collection<Quad.Term>): RDF.Multiple","dev.tesserakt.rdf.dsl.RDF.multiple"]},{"name":"fun multiple(vararg data: Quad.Term): RDF.Multiple","description":"dev.tesserakt.rdf.dsl.RDF.multiple","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-r-d-f/multiple.html","searchKeys":["multiple","fun multiple(vararg data: Quad.Term): RDF.Multiple","dev.tesserakt.rdf.dsl.RDF.multiple"]},{"name":"fun prefix(prefix: String, base: String): RDF.Prefix","description":"dev.tesserakt.rdf.dsl.RDF.prefix","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-r-d-f/prefix.html","searchKeys":["prefix","fun prefix(prefix: String, base: String): RDF.Prefix","dev.tesserakt.rdf.dsl.RDF.prefix"]},{"name":"infix fun Quad.BlankTerm.has(predicate: Quad.NamedTerm): RDF.BlankStatement","description":"dev.tesserakt.rdf.dsl.RDF.has","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-r-d-f/has.html","searchKeys":["has","infix fun Quad.BlankTerm.has(predicate: Quad.NamedTerm): RDF.BlankStatement","dev.tesserakt.rdf.dsl.RDF.has"]},{"name":"infix fun Quad.NamedTerm.has(predicate: Quad.NamedTerm): RDF.Statement","description":"dev.tesserakt.rdf.dsl.RDF.has","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-r-d-f/has.html","searchKeys":["has","infix fun Quad.NamedTerm.has(predicate: Quad.NamedTerm): RDF.Statement","dev.tesserakt.rdf.dsl.RDF.has"]},{"name":"infix inline fun Quad.NamedTerm.being(blank: RDF.Blank)","description":"dev.tesserakt.rdf.dsl.RDF.Blank.being","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-r-d-f/-blank/being.html","searchKeys":["being","infix inline fun Quad.NamedTerm.being(blank: RDF.Blank)","dev.tesserakt.rdf.dsl.RDF.Blank.being"]},{"name":"infix inline fun Quad.NamedTerm.being(list: RDF.List)","description":"dev.tesserakt.rdf.dsl.RDF.Blank.being","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-r-d-f/-blank/being.html","searchKeys":["being","infix inline fun Quad.NamedTerm.being(list: RDF.List)","dev.tesserakt.rdf.dsl.RDF.Blank.being"]},{"name":"infix inline fun Quad.NamedTerm.being(literal: Double)","description":"dev.tesserakt.rdf.dsl.RDF.Blank.being","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-r-d-f/-blank/being.html","searchKeys":["being","infix inline fun Quad.NamedTerm.being(literal: Double)","dev.tesserakt.rdf.dsl.RDF.Blank.being"]},{"name":"infix inline fun Quad.NamedTerm.being(literal: Float)","description":"dev.tesserakt.rdf.dsl.RDF.Blank.being","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-r-d-f/-blank/being.html","searchKeys":["being","infix inline fun Quad.NamedTerm.being(literal: Float)","dev.tesserakt.rdf.dsl.RDF.Blank.being"]},{"name":"infix inline fun Quad.NamedTerm.being(literal: Int)","description":"dev.tesserakt.rdf.dsl.RDF.Blank.being","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-r-d-f/-blank/being.html","searchKeys":["being","infix inline fun Quad.NamedTerm.being(literal: Int)","dev.tesserakt.rdf.dsl.RDF.Blank.being"]},{"name":"infix inline fun Quad.NamedTerm.being(literal: Long)","description":"dev.tesserakt.rdf.dsl.RDF.Blank.being","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-r-d-f/-blank/being.html","searchKeys":["being","infix inline fun Quad.NamedTerm.being(literal: Long)","dev.tesserakt.rdf.dsl.RDF.Blank.being"]},{"name":"infix inline fun Quad.NamedTerm.being(multiple: RDF.Multiple)","description":"dev.tesserakt.rdf.dsl.RDF.Blank.being","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-r-d-f/-blank/being.html","searchKeys":["being","infix inline fun Quad.NamedTerm.being(multiple: RDF.Multiple)","dev.tesserakt.rdf.dsl.RDF.Blank.being"]},{"name":"infix inline fun Quad.NamedTerm.being(term: Quad.Term)","description":"dev.tesserakt.rdf.dsl.RDF.Blank.being","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-r-d-f/-blank/being.html","searchKeys":["being","infix inline fun Quad.NamedTerm.being(term: Quad.Term)","dev.tesserakt.rdf.dsl.RDF.Blank.being"]},{"name":"infix inline fun being(blank: RDF.Blank)","description":"dev.tesserakt.rdf.dsl.RDF.BlankStatement.being","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-r-d-f/-blank-statement/being.html","searchKeys":["being","infix inline fun being(blank: RDF.Blank)","dev.tesserakt.rdf.dsl.RDF.BlankStatement.being"]},{"name":"infix inline fun being(blank: RDF.Blank)","description":"dev.tesserakt.rdf.dsl.RDF.Statement.being","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-r-d-f/-statement/being.html","searchKeys":["being","infix inline fun being(blank: RDF.Blank)","dev.tesserakt.rdf.dsl.RDF.Statement.being"]},{"name":"infix inline fun being(list: RDF.List)","description":"dev.tesserakt.rdf.dsl.RDF.BlankStatement.being","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-r-d-f/-blank-statement/being.html","searchKeys":["being","infix inline fun being(list: RDF.List)","dev.tesserakt.rdf.dsl.RDF.BlankStatement.being"]},{"name":"infix inline fun being(list: RDF.List)","description":"dev.tesserakt.rdf.dsl.RDF.Statement.being","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-r-d-f/-statement/being.html","searchKeys":["being","infix inline fun being(list: RDF.List)","dev.tesserakt.rdf.dsl.RDF.Statement.being"]},{"name":"infix inline fun being(literal: Double)","description":"dev.tesserakt.rdf.dsl.RDF.BlankStatement.being","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-r-d-f/-blank-statement/being.html","searchKeys":["being","infix inline fun being(literal: Double)","dev.tesserakt.rdf.dsl.RDF.BlankStatement.being"]},{"name":"infix inline fun being(literal: Double)","description":"dev.tesserakt.rdf.dsl.RDF.Statement.being","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-r-d-f/-statement/being.html","searchKeys":["being","infix inline fun being(literal: Double)","dev.tesserakt.rdf.dsl.RDF.Statement.being"]},{"name":"infix inline fun being(literal: Float)","description":"dev.tesserakt.rdf.dsl.RDF.BlankStatement.being","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-r-d-f/-blank-statement/being.html","searchKeys":["being","infix inline fun being(literal: Float)","dev.tesserakt.rdf.dsl.RDF.BlankStatement.being"]},{"name":"infix inline fun being(literal: Float)","description":"dev.tesserakt.rdf.dsl.RDF.Statement.being","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-r-d-f/-statement/being.html","searchKeys":["being","infix inline fun being(literal: Float)","dev.tesserakt.rdf.dsl.RDF.Statement.being"]},{"name":"infix inline fun being(literal: Int)","description":"dev.tesserakt.rdf.dsl.RDF.BlankStatement.being","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-r-d-f/-blank-statement/being.html","searchKeys":["being","infix inline fun being(literal: Int)","dev.tesserakt.rdf.dsl.RDF.BlankStatement.being"]},{"name":"infix inline fun being(literal: Int)","description":"dev.tesserakt.rdf.dsl.RDF.Statement.being","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-r-d-f/-statement/being.html","searchKeys":["being","infix inline fun being(literal: Int)","dev.tesserakt.rdf.dsl.RDF.Statement.being"]},{"name":"infix inline fun being(literal: Long)","description":"dev.tesserakt.rdf.dsl.RDF.BlankStatement.being","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-r-d-f/-blank-statement/being.html","searchKeys":["being","infix inline fun being(literal: Long)","dev.tesserakt.rdf.dsl.RDF.BlankStatement.being"]},{"name":"infix inline fun being(literal: Long)","description":"dev.tesserakt.rdf.dsl.RDF.Statement.being","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-r-d-f/-statement/being.html","searchKeys":["being","infix inline fun being(literal: Long)","dev.tesserakt.rdf.dsl.RDF.Statement.being"]},{"name":"infix inline fun being(multiple: RDF.Multiple)","description":"dev.tesserakt.rdf.dsl.RDF.BlankStatement.being","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-r-d-f/-blank-statement/being.html","searchKeys":["being","infix inline fun being(multiple: RDF.Multiple)","dev.tesserakt.rdf.dsl.RDF.BlankStatement.being"]},{"name":"infix inline fun being(multiple: RDF.Multiple)","description":"dev.tesserakt.rdf.dsl.RDF.Statement.being","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-r-d-f/-statement/being.html","searchKeys":["being","infix inline fun being(multiple: RDF.Multiple)","dev.tesserakt.rdf.dsl.RDF.Statement.being"]},{"name":"infix inline fun being(value: Quad.Term)","description":"dev.tesserakt.rdf.dsl.RDF.BlankStatement.being","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-r-d-f/-blank-statement/being.html","searchKeys":["being","infix inline fun being(value: Quad.Term)","dev.tesserakt.rdf.dsl.RDF.BlankStatement.being"]},{"name":"infix inline fun being(value: Quad.Term)","description":"dev.tesserakt.rdf.dsl.RDF.Statement.being","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-r-d-f/-statement/being.html","searchKeys":["being","infix inline fun being(value: Quad.Term)","dev.tesserakt.rdf.dsl.RDF.Statement.being"]},{"name":"inline fun blank(block: RDF.Blank.() -> Unit): Quad.BlankTerm","description":"dev.tesserakt.rdf.dsl.RDF.blank","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-r-d-f/blank.html","searchKeys":["blank","inline fun blank(block: RDF.Blank.() -> Unit): Quad.BlankTerm","dev.tesserakt.rdf.dsl.RDF.blank"]},{"name":"inline fun genBlankNodeId(): Quad.BlankTerm","description":"dev.tesserakt.rdf.dsl.RDF.genBlankNodeId","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-r-d-f/gen-blank-node-id.html","searchKeys":["genBlankNodeId","inline fun genBlankNodeId(): Quad.BlankTerm","dev.tesserakt.rdf.dsl.RDF.genBlankNodeId"]},{"name":"inner class Blank(val _name: Quad.BlankTerm)","description":"dev.tesserakt.rdf.dsl.RDF.Blank","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-r-d-f/-blank/index.html","searchKeys":["Blank","inner class Blank(val _name: Quad.BlankTerm)","dev.tesserakt.rdf.dsl.RDF.Blank"]},{"name":"inner class BlankStatement(val _s: Quad.BlankTerm, val _p: Quad.NamedTerm)","description":"dev.tesserakt.rdf.dsl.RDF.BlankStatement","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-r-d-f/-blank-statement/index.html","searchKeys":["BlankStatement","inner class BlankStatement(val _s: Quad.BlankTerm, val _p: Quad.NamedTerm)","dev.tesserakt.rdf.dsl.RDF.BlankStatement"]},{"name":"inner class Statement(val _s: Quad.NamedTerm, val _p: Quad.NamedTerm)","description":"dev.tesserakt.rdf.dsl.RDF.Statement","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-r-d-f/-statement/index.html","searchKeys":["Statement","inner class Statement(val _s: Quad.NamedTerm, val _p: Quad.NamedTerm)","dev.tesserakt.rdf.dsl.RDF.Statement"]},{"name":"interface Consumer","description":"dev.tesserakt.rdf.dsl.RDF.Consumer","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-r-d-f/-consumer/index.html","searchKeys":["Consumer","interface Consumer","dev.tesserakt.rdf.dsl.RDF.Consumer"]},{"name":"object Companion","description":"dev.tesserakt.rdf.dsl.RDF.Companion","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-r-d-f/-companion/index.html","searchKeys":["Companion","object Companion","dev.tesserakt.rdf.dsl.RDF.Companion"]},{"name":"open class Environment(val path: String)","description":"dev.tesserakt.rdf.dsl.RDF.Environment","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-r-d-f/-environment/index.html","searchKeys":["Environment","open class Environment(val path: String)","dev.tesserakt.rdf.dsl.RDF.Environment"]},{"name":"open fun process(context: RDF, list: RDF.List): Quad.Term","description":"dev.tesserakt.rdf.dsl.RDF.Consumer.process","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-r-d-f/-consumer/process.html","searchKeys":["process","open fun process(context: RDF, list: RDF.List): Quad.Term","dev.tesserakt.rdf.dsl.RDF.Consumer.process"]},{"name":"open override fun process(subject: Quad.BlankTerm, predicate: Quad.NamedTerm, object: Quad.Term, graph: Quad.Graph)","description":"dev.tesserakt.rdf.dsl.StoreAdapter.process","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-store-adapter/process.html","searchKeys":["process","open override fun process(subject: Quad.BlankTerm, predicate: Quad.NamedTerm, object: Quad.Term, graph: Quad.Graph)","dev.tesserakt.rdf.dsl.StoreAdapter.process"]},{"name":"open override fun process(subject: Quad.NamedTerm, predicate: Quad.NamedTerm, object: Quad.Term, graph: Quad.Graph)","description":"dev.tesserakt.rdf.dsl.StoreAdapter.process","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-store-adapter/process.html","searchKeys":["process","open override fun process(subject: Quad.NamedTerm, predicate: Quad.NamedTerm, object: Quad.Term, graph: Quad.Graph)","dev.tesserakt.rdf.dsl.StoreAdapter.process"]},{"name":"operator fun Iterable<Quad>.unaryPlus()","description":"dev.tesserakt.rdf.dsl.RDF.unaryPlus","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-r-d-f/unary-plus.html","searchKeys":["unaryPlus","operator fun Iterable<Quad>.unaryPlus()","dev.tesserakt.rdf.dsl.RDF.unaryPlus"]},{"name":"operator fun invoke(iri: String): Quad.NamedTerm","description":"dev.tesserakt.rdf.dsl.RDF.Prefix.invoke","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-r-d-f/-prefix/invoke.html","searchKeys":["invoke","operator fun invoke(iri: String): Quad.NamedTerm","dev.tesserakt.rdf.dsl.RDF.Prefix.invoke"]},{"name":"typealias RDF_DSL = RDF.() -> Unit","description":"dev.tesserakt.rdf.dsl.RDF_DSL","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-r-d-f_-d-s-l/index.html","searchKeys":["RDF_DSL","typealias RDF_DSL = RDF.() -> Unit","dev.tesserakt.rdf.dsl.RDF_DSL"]},{"name":"val Quad.NamedTerm.relativePath: String","description":"dev.tesserakt.rdf.dsl.RDF.Environment.relativePath","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-r-d-f/-environment/relative-path.html","searchKeys":["relativePath","val Quad.NamedTerm.relativePath: String","dev.tesserakt.rdf.dsl.RDF.Environment.relativePath"]},{"name":"val _name: Quad.BlankTerm","description":"dev.tesserakt.rdf.dsl.RDF.Blank._name","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-r-d-f/-blank/_name.html","searchKeys":["_name","val _name: Quad.BlankTerm","dev.tesserakt.rdf.dsl.RDF.Blank._name"]},{"name":"val _p: Quad.NamedTerm","description":"dev.tesserakt.rdf.dsl.RDF.BlankStatement._p","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-r-d-f/-blank-statement/_p.html","searchKeys":["_p","val _p: Quad.NamedTerm","dev.tesserakt.rdf.dsl.RDF.BlankStatement._p"]},{"name":"val _p: Quad.NamedTerm","description":"dev.tesserakt.rdf.dsl.RDF.Statement._p","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-r-d-f/-statement/_p.html","searchKeys":["_p","val _p: Quad.NamedTerm","dev.tesserakt.rdf.dsl.RDF.Statement._p"]},{"name":"val _s: Quad.BlankTerm","description":"dev.tesserakt.rdf.dsl.RDF.BlankStatement._s","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-r-d-f/-blank-statement/_s.html","searchKeys":["_s","val _s: Quad.BlankTerm","dev.tesserakt.rdf.dsl.RDF.BlankStatement._s"]},{"name":"val _s: Quad.NamedTerm","description":"dev.tesserakt.rdf.dsl.RDF.Statement._s","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-r-d-f/-statement/_s.html","searchKeys":["_s","val _s: Quad.NamedTerm","dev.tesserakt.rdf.dsl.RDF.Statement._s"]},{"name":"val consumer: RDF.Consumer","description":"dev.tesserakt.rdf.dsl.RDF.consumer","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-r-d-f/consumer.html","searchKeys":["consumer","val consumer: RDF.Consumer","dev.tesserakt.rdf.dsl.RDF.consumer"]},{"name":"val data: Array<out Quad.Term>","description":"dev.tesserakt.rdf.dsl.RDF.List.data","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-r-d-f/-list/data.html","searchKeys":["data","val data: Array<out Quad.Term>","dev.tesserakt.rdf.dsl.RDF.List.data"]},{"name":"val data: Array<out Quad.Term>","description":"dev.tesserakt.rdf.dsl.RDF.Multiple.data","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-r-d-f/-multiple/data.html","searchKeys":["data","val data: Array<out Quad.Term>","dev.tesserakt.rdf.dsl.RDF.Multiple.data"]},{"name":"val path: String","description":"dev.tesserakt.rdf.dsl.RDF.Environment.path","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-r-d-f/-environment/path.html","searchKeys":["path","val path: String","dev.tesserakt.rdf.dsl.RDF.Environment.path"]},{"name":"val type: Quad.NamedTerm","description":"dev.tesserakt.rdf.dsl.RDF.type","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-r-d-f/type.html","searchKeys":["type","val type: Quad.NamedTerm","dev.tesserakt.rdf.dsl.RDF.type"]},{"name":"value class List","description":"dev.tesserakt.rdf.dsl.RDF.List","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-r-d-f/-list/index.html","searchKeys":["List","value class List","dev.tesserakt.rdf.dsl.RDF.List"]},{"name":"value class Multiple","description":"dev.tesserakt.rdf.dsl.RDF.Multiple","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-r-d-f/-multiple/index.html","searchKeys":["Multiple","value class Multiple","dev.tesserakt.rdf.dsl.RDF.Multiple"]},{"name":"var _blank_index: Int","description":"dev.tesserakt.rdf.dsl.RDF._blank_index","location":"rdf/dsl/dev.tesserakt.rdf.dsl/-r-d-f/_blank_index.html","searchKeys":["_blank_index","var _blank_index: Int","dev.tesserakt.rdf.dsl.RDF._blank_index"]}]